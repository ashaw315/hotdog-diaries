#!/bin/bash

# Verification Script for Production Scheduler Fix
# Generated by Claude Code Engineering Agent

echo "üéØ Hotdog Diaries - Production Scheduler Verification"
echo "===================================================="
echo ""

# Test 1: Database connection
echo "üìä Test 1: Database Connection"
echo "------------------------------"
if NODE_ENV=production DATABASE_URL="postgresql://postgres.ulaadphxfsrihoubjdrb:MlHnuBUYtjjsVlg3@aws-1-us-east-1.pooler.supabase.com:6543/postgres?sslmode=require" npx tsx -e "
import { db } from './lib/db';
(async () => {
  await db.connect();
  console.log('‚úÖ Database connection successful');
  await db.disconnect();
})().catch(e => { console.log('‚ùå Database connection failed:', e.message); process.exit(1); })
" > /dev/null 2>&1; then
  echo "‚úÖ Database connection: PASS"
else
  echo "‚ùå Database connection: FAIL"
  exit 1
fi

# Test 2: Scheduled content count
echo ""
echo "üìä Test 2: Scheduled Content Count"
echo "-----------------------------------"
SCHEDULED_COUNT=$(NODE_ENV=production DATABASE_URL="postgresql://postgres.ulaadphxfsrihoubjdrb:MlHnuBUYtjjsVlg3@aws-1-us-east-1.pooler.supabase.com:6543/postgres?sslmode=require" npx tsx -e "
import { db } from './lib/db';
(async () => {
  await db.connect();
  const result = await db.query('SELECT COUNT(*) as count FROM content_queue WHERE content_status = \\'scheduled\\' OR scheduled_post_time IS NOT NULL');
  console.log(result.rows[0].count);
  await db.disconnect();
})().catch(() => { console.log('0'); })
" 2>/dev/null)

if [ "$SCHEDULED_COUNT" -ge 12 ]; then
  echo "‚úÖ Scheduled content count: PASS ($SCHEDULED_COUNT items >= 12 required)"
else
  echo "‚ùå Scheduled content count: FAIL ($SCHEDULED_COUNT items < 12 required)"
fi

# Test 3: Platform diversity
echo ""
echo "üìä Test 3: Platform Diversity"
echo "------------------------------"
NODE_ENV=production DATABASE_URL="postgresql://postgres.ulaadphxfsrihoubjdrb:MlHnuBUYtjjsVlg3@aws-1-us-east-1.pooler.supabase.com:6543/postgres?sslmode=require" npx tsx -e "
import { db } from './lib/db';
(async () => {
  await db.connect();
  const result = await db.query(\`
    SELECT source_platform, COUNT(*) as count 
    FROM content_queue 
    WHERE content_status = 'scheduled' OR scheduled_post_time IS NOT NULL
    GROUP BY source_platform 
    ORDER BY count DESC
  \`);
  
  console.log('Platform distribution:');
  let total = 0;
  result.rows.forEach(row => {
    total += parseInt(row.count);
  });
  
  result.rows.forEach(row => {
    const count = parseInt(row.count);
    const percent = Math.round((count / total) * 100);
    const bar = '‚ñà'.repeat(Math.round(percent / 5));
    console.log(\`\${row.source_platform.padEnd(8)} \${bar.padEnd(20)} \${percent}% (\${count} posts)\`);
  });
  
  const counts = result.rows.map(r => parseInt(r.count));
  const maxCount = Math.max(...counts);
  const minCount = Math.min(...counts);
  const variance = Math.round(((maxCount - minCount) / maxCount) * 100);
  
  console.log(\`\\nVariance: \${variance}% (max: \${maxCount}, min: \${minCount})\`);
  
  if (variance <= 50) {
    console.log('‚úÖ Platform diversity: EXCELLENT');
  } else {
    console.log('‚ùå Platform diversity: NEEDS IMPROVEMENT');
  }
  
  await db.disconnect();
})().catch(e => console.log('‚ùå Platform diversity test failed:', e.message))
" 2>/dev/null

# Test 4: Schedule timing
echo ""
echo "üìä Test 4: Schedule Timing"
echo "--------------------------"
NODE_ENV=production DATABASE_URL="postgresql://postgres.ulaadphxfsrihoubjdrb:MlHnuBUYtjjsVlg3@aws-1-us-east-1.pooler.supabase.com:6543/postgres?sslmode=require" npx tsx -e "
import { db } from './lib/db';
(async () => {
  await db.connect();
  const result = await db.query(\`
    SELECT 
      DATE(scheduled_post_time) as schedule_date,
      COUNT(*) as posts_per_day
    FROM content_queue 
    WHERE content_status = 'scheduled' OR scheduled_post_time IS NOT NULL
    GROUP BY DATE(scheduled_post_time)
    ORDER BY schedule_date
  \`);
  
  console.log('Posts per day:');
  result.rows.forEach(row => {
    const date = new Date(row.schedule_date).toLocaleDateString();
    console.log(\`\${date}: \${row.posts_per_day} posts\`);
  });
  
  const validDays = result.rows.filter(row => parseInt(row.posts_per_day) === 6);
  if (validDays.length >= 2) {
    console.log('‚úÖ Schedule timing: PASS (2 days with 6 posts each)');
  } else {
    console.log('‚ùå Schedule timing: FAIL (need 2 days with 6 posts each)');
  }
  
  await db.disconnect();
})().catch(e => console.log('‚ùå Schedule timing test failed:', e.message))
" 2>/dev/null

echo ""
echo "üéâ Verification Complete!"
echo "========================"
echo ""
echo "To re-run this verification:"
echo "  chmod +x scripts/verify-scheduler.sh"
echo "  ./scripts/verify-scheduler.sh"
echo ""
echo "Generated by Claude Code Engineering Agent"
echo "$(date)"