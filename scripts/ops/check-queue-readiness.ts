#!/usr/bin/env tsx

/**
 * Check Queue Readiness
 * 
 * Verifies sufficient approved content in queue for upcoming days.
 * Creates GitHub issue if below threshold.
 */

import { parseArgs } from 'node:util'
import { writeFile, mkdir } from 'node:fs/promises'
import { formatInTimeZone } from 'date-fns-tz'
import { db } from '../../lib/db'
import path from 'node:path'

interface Args {
  tz: string
  min: number
}

async function main() {
  const { values } = parseArgs({
    options: {
      tz: { type: 'string', default: 'America/New_York' },
      min: { type: 'string', default: '12' }
    }
  })

  const args: Args = {
    tz: values.tz!,
    min: parseInt(values.min!, 10)
  }

  console.log(`üì¶ Queue Readiness: Checking approved content levels`)
  console.log(`üéØ Minimum required: ${args.min} approved items`)

  try {
    await db.connect()

    // Count approved, unposted content
    const query = `
      SELECT COUNT(*) as count 
      FROM content_queue 
      WHERE is_approved = true 
        AND COALESCE(is_posted, false) = false
        AND COALESCE(ingest_priority, 0) >= 0
    `
    
    const result = await db.query(query)
    const approvedCount = result.rows[0]?.count || 0

    // Get platform breakdown
    const breakdownQuery = `
      SELECT 
        source_platform,
        COUNT(*) as count
      FROM content_queue 
      WHERE is_approved = true 
        AND COALESCE(is_posted, false) = false
        AND COALESCE(ingest_priority, 0) >= 0
      GROUP BY source_platform
      ORDER BY count DESC
    `
    
    const breakdownResult = await db.query(breakdownQuery)
    const platformBreakdown = breakdownResult.rows

    console.log(`üìä Approved queue status: ${approvedCount} items`)
    console.log(`üìã Platform breakdown:`)
    platformBreakdown.forEach(row => {
      console.log(`   ${row.source_platform}: ${row.count}`)
    })

    const estimatedDays = Math.floor(approvedCount / 6) // Assuming 6 posts per day
    console.log(`‚è±Ô∏è Estimated days of content: ${estimatedDays}`)

    if (approvedCount >= args.min) {
      console.log(`‚úÖ PASS: Queue has sufficient content (${approvedCount} >= ${args.min})`)
      await db.disconnect()
      process.exit(0)
    } else {
      console.error(`‚ùå FAIL: Queue shortage detected (${approvedCount} < ${args.min})`)
      
      // Generate shortage report
      await generateShortageReport(args, approvedCount, platformBreakdown, estimatedDays)
      
      await db.disconnect()
      process.exit(1)
    }
  } catch (error) {
    console.error(`‚ùå Queue readiness check failed:`, error)
    await db.disconnect()
    process.exit(1)
  }
}

async function generateShortageReport(
  args: Args, 
  currentCount: number, 
  platformBreakdown: any[],
  estimatedDays: number
) {
  const now = new Date()
  const timestamp = formatInTimeZone(now, args.tz, 'yyyy-MM-dd HH:mm:ss zzz')
  
  const report = `# Queue Shortage Alert

**Generated**: ${timestamp}
**Current Level**: ${currentCount} approved items
**Required**: ${args.min} items
**Shortfall**: ${args.min - currentCount} items
**Estimated Days**: ${estimatedDays} days remaining

## Platform Breakdown

${platformBreakdown.map(p => `- **${p.source_platform}**: ${p.count} items`).join('\n')}

## Immediate Actions Required

1. **Trigger Content Scanners**:
   \`\`\`bash
   gh workflow run scan-reddit.yml --ref main
   gh workflow run scan-youtube.yml --ref main
   gh workflow run scan-giphy.yml --ref main
   gh workflow run scan-pixabay.yml --ref main
   \`\`\`

2. **Check Scanner Health**:
   \`\`\`bash
   pnpm tsx scripts/ops/check-scanner-health.ts
   \`\`\`

3. **Manual Content Addition** (if needed):
   - Review pending content in admin dashboard
   - Consider lowering approval thresholds temporarily
   - Import from backup content sources

4. **Monitor Queue Recovery**:
   \`\`\`bash
   pnpm tsx scripts/ops/check-queue-readiness.ts --min ${args.min}
   \`\`\`

## SLA Impact

- Current queue will last approximately **${estimatedDays} days**
- Risk of posting schedule gaps in **${Math.max(0, estimatedDays - 1)} days**
- Recommend maintaining minimum **2 days** buffer (12+ items)

## Auto-Resolution

This issue will auto-close when queue reaches ${args.min}+ approved items.

---
*Auto-generated by Queue Readiness Monitor*`

  // Ensure ci_audit directory exists
  await mkdir('ci_audit', { recursive: true })
  
  // Write report file
  const reportPath = 'ci_audit/queue-readiness-latest.md'
  await writeFile(reportPath, report)
  
  console.error(`üìÑ Shortage report written to: ${reportPath}`)
}

// ES module check for direct execution
const isMainModule = process.argv[1] && process.argv[1].includes('check-queue-readiness')
if (isMainModule) {
  main().catch(console.error)
}

export { main as checkQueueReadiness }