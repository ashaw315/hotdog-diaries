'use client'

import { useState, useEffect, useRef } from 'react'
import { ContentType, SourcePlatform } from '@/types'

interface Post {
  id: number
  content_text?: string
  content_type: ContentType
  source_platform: SourcePlatform
  original_url: string
  original_author?: string
  content_image_url?: string
  content_video_url?: string
  scraped_at: Date
  is_posted: boolean
  is_approved: boolean
  posted_at?: Date
}

// No test data - using real database content only

export default function OptimizedTikTokFeed() {
  const [posts, setPosts] = useState<Post[]>([])
  const [currentIndex, setCurrentIndex] = useState(0)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [isMobile, setIsMobile] = useState(false)
  const containerRef = useRef<HTMLDivElement>(null)
  const videosRef = useRef<{ [key: number]: HTMLVideoElement }>({})

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768)
    }
    
    checkMobile()
    window.addEventListener('resize', checkMobile)
    return () => window.removeEventListener('resize', checkMobile)
  }, [])

  useEffect(() => {
    fetchPosts()
  }, [])

  const fetchPosts = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/content?limit=30')
      
      if (!response.ok) {
        throw new Error('Failed to load content')
      }

      const data = await response.json()
      
      if (data.success) {
        const apiPosts = data.data?.content || []
        
        const cleanedApiPosts = apiPosts.map((post, index) => {

          return {
            ...post,
            content_text: post.content_text && post.content_text.length > 150 
              ? post.content_text.substring(0, 150) + '...' 
              : post.content_text
          }
        })

        // Welcome card for mobile
        const welcomeCard = {
          id: -999,
          content_text: "Welcome to Hotdog Diaries! Swipe up to explore delicious hotdog content from around the web.",
          content_type: 'text' as ContentType,
          content_image_url: null,
          content_video_url: null,
          source_platform: 'reddit' as SourcePlatform,
          original_author: "hotdog_diaries",
          original_url: "",
          scraped_at: new Date(),
          is_posted: false,
          is_approved: true,
          posted_at: new Date()
        }

        const allPosts = [
          ...(isMobile ? [welcomeCard] : []),
          ...cleanedApiPosts
        ]
        
        setPosts(allPosts)
      } else {
        throw new Error(data.error || 'Failed to load content')
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load content')
    } finally {
      setLoading(false)
    }
  }

  // Handle video play/pause
  useEffect(() => {
    Object.values(videosRef.current).forEach(video => {
      if (video) {
        video.pause()
        video.currentTime = 0
      }
    })

    const currentVideo = videosRef.current[currentIndex]
    if (currentVideo) {
      const playPromise = currentVideo.play()
      if (playPromise !== undefined) {
        playPromise.catch(err => {
        })
      }
    }
  }, [currentIndex])


  // Keyboard navigation
  useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
      if (e.key === 'ArrowDown' && currentIndex < posts.length - 1) {
        e.preventDefault()
        setCurrentIndex(currentIndex + 1)
        scrollToPost(currentIndex + 1)
      } else if (e.key === 'ArrowUp' && currentIndex > 0) {
        e.preventDefault()
        setCurrentIndex(currentIndex - 1)
        scrollToPost(currentIndex - 1)
      }
    }

    window.addEventListener('keydown', handleKeyPress)
    return () => window.removeEventListener('keydown', handleKeyPress)
  }, [currentIndex, posts.length])

  const scrollToPost = (index: number) => {
    if (containerRef.current) {
      // Calculate cumulative height for dynamic card sizes
      let totalHeight = 0
      for (let i = 0; i < index; i++) {
        if (i < posts.length) {
          const dimensions = getCardDimensions(posts[i])
          // Add card height plus padding (15vh total padding per card slot)
          totalHeight += parseFloat(dimensions.height.replace('px', '')) + (window.innerHeight * 0.15)
        }
      }
      
      containerRef.current.scrollTo({
        top: totalHeight,
        behavior: 'smooth'
      })
    }
  }

  const handleScroll = () => {
    if (containerRef.current) {
      const scrollPosition = containerRef.current.scrollTop
      
      // Find which card we're currently viewing with variable heights
      let cumulativeHeight = 0
      let newIndex = 0
      
      for (let i = 0; i < posts.length; i++) {
        const dimensions = getCardDimensions(posts[i])
        const cardHeight = parseFloat(dimensions.height.replace('px', '')) + (window.innerHeight * 0.15)
        
        if (scrollPosition < cumulativeHeight + cardHeight / 2) {
          newIndex = i
          break
        }
        
        cumulativeHeight += cardHeight
        newIndex = i + 1
      }
      
      // Ensure index is within bounds
      newIndex = Math.max(0, Math.min(newIndex, posts.length - 1))
      
      if (newIndex !== currentIndex) {
        setCurrentIndex(newIndex)
      }
    }
  }

  // Touch support
  let touchStartY = 0
  
  const handleTouchStart = (e: React.TouchEvent) => {
    touchStartY = e.touches[0].clientY
  }

  const handleTouchEnd = (e: React.TouchEvent) => {
    const touchEndY = e.changedTouches[0].clientY
    const diff = touchStartY - touchEndY

    if (Math.abs(diff) > 50) {
      if (diff > 0 && currentIndex < posts.length - 1) {
        setCurrentIndex(currentIndex + 1)
        scrollToPost(currentIndex + 1)
      } else if (diff < 0 && currentIndex > 0) {
        setCurrentIndex(currentIndex - 1)
        scrollToPost(currentIndex - 1)
      }
    }
  }

  // Determine aspect ratio from content
  const getContentAspectRatio = (post: Post): number => {
    // Platform-specific aspect ratios
    if (post.source_platform === 'youtube') {
      return 16/9; // YouTube is typically 16:9 landscape
    }
    
    if (post.source_platform === 'tumblr') {
      return 1; // Tumblr tends to be square/portrait
    }
    
    if (post.source_platform === 'reddit') {
      if (post.content_type === 'image') return 4/3; // Reddit photos often 4:3
      return 1.2; // Text posts slightly wide
    }
    
    if (post.source_platform === 'pixabay') {
      return 3/2; // Professional photos often 3:2
    }
    
    if (post.source_platform === 'imgur') {
      if (post.content_type === 'video') return 16/9; // Imgur GIFs/videos
      return 1; // Imgur images often square/meme format
    }
    
    if (post.source_platform === 'lemmy') {
      return 16/9; // Discussion content with images
    }
    
    // Content type defaults
    if (post.content_type === 'video') return 16/9;
    if (post.content_type === 'text') return 1;
    
    return 4/3; // Default photo ratio
  }

  // Calculate dynamic card dimensions
  const getCardDimensions = (post: Post) => {
    const aspectRatio = getContentAspectRatio(post)
    const baseWidth = isMobile ? (window.innerWidth - 32) : 500
    
    // Calculate width with platform-specific adjustments
    let width = baseWidth
    if (!isMobile) {
      if (post.source_platform === 'youtube') width = 700
      if (post.source_platform === 'pixabay') width = 600
      if (post.source_platform === 'imgur') width = aspectRatio > 1 ? 650 : 450
      if (post.source_platform === 'lemmy') width = 580
    }
    
    // Calculate height from aspect ratio
    let height = width / aspectRatio
    
    // Set reasonable min/max heights for usability
    const minHeight = isMobile ? 300 : 400
    const maxHeight = isMobile ? (window.innerHeight * 0.85) : 800
    
    height = Math.min(Math.max(height, minHeight), maxHeight)
    
    
    return {
      width: `${width}px`,
      height: `${height}px`,
      aspectRatio,
      cardClass: aspectRatio > 1.5 ? 'card-landscape' : 
                 aspectRatio < 0.8 ? 'card-portrait' : 'card-square'
    }
  }

  if (loading) {
    return (
      <div className="page-container">
        <div className="header-title">
          <span className="hotdog-icon">🌭</span>
          <span className="title-text">Hotdog Diaries</span>
        </div>
        <div className="loading-content">
          <div className="loading-spinner">🌭</div>
          <p>Loading hotdog content...</p>
        </div>
        <style jsx>{`
          .page-container {
            height: 100vh;
            background: white;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
          }
          .header-title {
            position: fixed;
            top: 20px;
            left: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 24px;
            font-weight: 700;
            color: black;
            z-index: 100;
          }
          .hotdog-icon {
            font-size: 28px;
          }
          .loading-content {
            text-align: center;
            color: #333;
          }
          .loading-spinner {
            font-size: 48px;
            animation: spin 1s linear infinite;
            margin-bottom: 16px;
          }
          @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
          }
        `}</style>
      </div>
    )
  }

  if (error) {
    return (
      <div className="page-container">
        <div className="header-title">
          <span className="hotdog-icon">🌭</span>
          <span className="title-text">Hotdog Diaries</span>
        </div>
        <div className="error-content">
          <div className="error-icon">⚠️</div>
          <p>{error}</p>
          <button onClick={fetchPosts}>Try Again</button>
        </div>
        <style jsx>{`
          .page-container {
            height: 100vh;
            background: white;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
          }
          .header-title {
            position: fixed;
            top: 20px;
            left: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 24px;
            font-weight: 700;
            color: black;
            z-index: 100;
          }
          .hotdog-icon {
            font-size: 28px;
          }
          .error-content {
            text-align: center;
            color: #333;
          }
          .error-icon {
            font-size: 48px;
            margin-bottom: 16px;
          }
          button {
            margin-top: 16px;
            padding: 12px 24px;
            background: #333;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
          }
        `}</style>
      </div>
    )
  }

  if (posts.length === 0) {
    return (
      <div className="page-container">
        <div className="header-title">
          <span className="hotdog-icon">🌭</span>
          <span className="title-text">Hotdog Diaries</span>
        </div>
        <div className="empty-content">
          <div className="empty-icon">🌭</div>
          <p>No hotdog content found</p>
        </div>
        <style jsx>{`
          .page-container {
            height: 100vh;
            background: white;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
          }
          .header-title {
            position: fixed;
            top: 20px;
            left: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 24px;
            font-weight: 700;
            color: black;
            z-index: 100;
          }
          .hotdog-icon {
            font-size: 28px;
          }
          .empty-content {
            text-align: center;
            color: #333;
          }
          .empty-icon {
            font-size: 64px;
            margin-bottom: 16px;
          }
        `}</style>
      </div>
    )
  }

  return (
    <div className="page-container">
      {/* Fixed header title */}
      <div className="header-title">
        <span className="hotdog-icon">🌭</span>
        <span className="title-text">Hotdog Diaries</span>
      </div>
      
      {/* Feed container */}
      <div 
        ref={containerRef}
        className="feed-container"
        onScroll={handleScroll}
        onTouchStart={handleTouchStart}
        onTouchEnd={handleTouchEnd}
      >
        {posts.map((post, index) => {
          const dimensions = getCardDimensions(post)
          
          // Log dimensions in development only
          if (process.env.NODE_ENV === 'development' && index < 3) {
          }
          
          return (
            <div key={post.id} className="card-slot">
              <div 
                className={`post-card ${dimensions.cardClass}`}
                style={{ 
                  width: dimensions.width,
                  height: dimensions.height
                }}
                data-platform={post.source_platform}
                data-width={dimensions.width}
                data-height={dimensions.height}
              >
                <PostContent 
                  post={post} 
                  isActive={index === currentIndex}
                  isWelcomeCard={post.id === -999}
                  videoRef={(el) => {
                    if (el) videosRef.current[index] = el
                  }}
                />
              </div>
            </div>
          )
        })}
      </div>

      <style jsx>{`
        .page-container {
          height: 100vh;
          background: white;
          position: relative;
          overflow: hidden;
        }

        .header-title {
          position: fixed;
          top: 20px;
          left: 20px;
          display: flex;
          align-items: center;
          gap: 8px;
          font-size: 24px;
          font-weight: 700;
          color: black;
          z-index: 100;
          background: rgba(255, 255, 255, 0.9);
          padding: 8px 12px;
          border-radius: 8px;
          backdrop-filter: blur(10px);
        }

        .hotdog-icon {
          font-size: 28px;
        }

        .feed-container {
          height: 100vh;
          overflow-y: scroll;
          scroll-snap-type: y mandatory;
          scroll-behavior: smooth;
          scrollbar-width: none;
          -ms-overflow-style: none;
        }

        .feed-container::-webkit-scrollbar {
          display: none;
        }

        .card-slot {
          width: 100vw;
          min-height: 100vh;
          scroll-snap-align: start;
          scroll-snap-stop: always;
          position: relative;
          display: flex;
          align-items: center;
          justify-content: center;
          padding: 7.5vh 0;
        }

        .post-card {
          background: black;
          border-radius: 16px;
          overflow: hidden;
          position: relative;
          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
          transition: all 0.3s ease;
        }

        /* Dynamic card classes for different aspect ratios */
        .post-card.card-landscape {
          border-radius: 20px;
        }

        .post-card.card-portrait {
          border-radius: 12px;
          box-shadow: 0 12px 40px rgba(0, 0, 0, 0.3);
        }

        .post-card.card-square {
          border-radius: 16px;
        }

        @media (max-width: 768px) {
          .header-title {
            font-size: 20px;
            top: 15px;
            left: 15px;
          }
          
          .hotdog-icon {
            font-size: 24px;
          }
          
          .card-slot {
            padding: 5vh 16px;
            min-height: 100vh;
          }
          
          .post-card {
            border-radius: 12px;
          }

          .post-card.card-landscape {
            border-radius: 16px;
          }

          .post-card.card-portrait {
            border-radius: 8px;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.4);
          }

          .post-card.card-square {
            border-radius: 12px;
          }
        }
      `}</style>
    </div>
  )
}

function PostContent({ 
  post, 
  isActive, 
  isWelcomeCard = false,
  videoRef 
}: { 
  post: Post
  isActive: boolean
  isWelcomeCard?: boolean
  videoRef: (el: HTMLVideoElement | null) => void
}) {
  const [imageError, setImageError] = useState(false)
  const [videoError, setVideoError] = useState(false)
  const postContentRef = useRef<HTMLDivElement>(null)

  // NUCLEAR OPTION: Force YouTube sizing after render
  useEffect(() => {
    if (postContentRef.current && isActive) {
      const forceYouTubeSize = () => {
        const youtubeIframes = postContentRef.current!.querySelectorAll('iframe')
        youtubeIframes.forEach((iframe) => {
          iframe.style.cssText = `
            position: absolute !important;
            top: 0 !important;
            left: 0 !important;
            width: 100% !important;
            height: 100% !important;
            border: none !important;
            margin: 0 !important;
            padding: 0 !important;
          `
        })
      }
      
      // Force sizing immediately and after a delay
      forceYouTubeSize()
      setTimeout(forceYouTubeSize, 100)
    }
  }, [isActive, post.content_video_url])

  const getPlatformIcon = (platform: SourcePlatform) => {
    const icons: Record<string, string> = {
      reddit: '🤖',
      youtube: '📺',
      pixabay: '📷',
      imgur: '📸',
      tumblr: '📱',
      mastodon: '🐘',
      flickr: '📸',
      unsplash: '🎨'
    }
    return icons[platform] || '🌐'
  }

  const cleanAuthor = (author?: string) => {
    if (!author) return 'hotdog_lover'
    return author
      .replace(/^(u\/|r\/|@)/, '')
      .replace(/\s+\(via.*?\)$/i, '')
      .substring(0, 20)
  }

  const extractYouTubeId = (url: string): string | null => {
    if (!url) return null
    
    const patterns = [
      /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&#?\n]+)/,
      /youtube\.com\/watch\?.*v=([^&#?\n]+)/
    ]
    
    for (const pattern of patterns) {
      const match = url.match(pattern)
      if (match && match[1]) {
        // Ensure the video ID is exactly 11 characters (valid YouTube format)
        const videoId = match[1].substring(0, 11)
        if (/^[A-Za-z0-9_-]{11}$/.test(videoId)) {
          return videoId
        }
      }
    }
    return null
  }

  const extractImgurId = (url: string): string | null => {
    if (!url) return null
    
    const patterns = [
      /imgur\.com\/([A-Za-z0-9]+)/,
      /i\.imgur\.com\/([A-Za-z0-9]+)/
    ]
    
    for (const pattern of patterns) {
      const match = url.match(pattern)
      if (match && match[1]) {
        return match[1].split('.')[0] // Remove extension
      }
    }
    return null
  }

  const logVideoError = async (platform: string, url: string, error: string) => {
    try {
      await fetch('/api/video-errors', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ platform, url, error })
      })
    } catch (e) {
      console.warn('[VIDEO ERROR LOGGING] Failed to log error:', e)
    }
  }

  const renderMedia = () => {

    // Welcome card
    if (isWelcomeCard) {
      return (
        <div className="welcome-content">
          <div className="welcome-wrapper">
            <div className="hotdog-logo">🌭</div>
            <h1 className="welcome-title">Hotdog Diaries</h1>
            <p className="welcome-text">Discover the best hotdog content from around the web</p>
            <div className="welcome-instruction">Swipe up to explore →</div>
          </div>
        </div>
      )
    }

    // PLATFORM-SPECIFIC VIDEO HANDLING
    const hasVideoUrl = post.content_video_url && !videoError
    
    // 1. YOUTUBE VIDEOS - Use iframe embedding (CORS-safe)
    if (post.source_platform === 'youtube' && post.content_video_url) {
      const videoId = extractYouTubeId(post.content_video_url)
      
      if (videoId) {
        return (
          <iframe
            src={`https://www.youtube.com/embed/${videoId}?autoplay=1&mute=1&controls=0&playsinline=1&loop=1&playlist=${videoId}`}
            className="absolute inset-0 w-full h-full"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
            frameBorder="0"
            onError={() => {
              console.error('[YOUTUBE ERROR] Iframe failed to load:', videoId)
              logVideoError('youtube', post.content_video_url!, 'iframe_failed')
              setVideoError(true)
            }}
            onLoad={() => {}}
          />
        )
      } else {
        console.error(`[YOUTUBE ERROR] Invalid video URL: ${post.content_video_url}`)
        logVideoError('youtube', post.content_video_url, 'invalid_url_format')
        setVideoError(true)
      }
    }
    
    // 2. IMGUR VIDEOS/GIFS - Convert to MP4 format
    if (post.source_platform === 'imgur' && hasVideoUrl) {
      let videoUrl = post.content_video_url
      
      // Handle different Imgur formats
      if (videoUrl?.includes('imgur.com')) {
        const imgurId = extractImgurId(videoUrl)
        
        if (imgurId) {
          // Force MP4 format for best compatibility
          if (videoUrl.includes('.gif') || videoUrl.includes('/a/') || !videoUrl.includes('.mp4')) {
            videoUrl = `https://i.imgur.com/${imgurId}.mp4`
          }
          
          
          return (
            <video
              ref={videoRef}
              src={videoUrl}
              className="absolute inset-0 w-full h-full object-contain"
              autoPlay
              muted
              loop
              playsInline
              preload="metadata"
              onLoadedData={() => {}}
              onError={() => {
                console.error('[IMGUR] Video failed:', videoUrl)
                logVideoError('imgur', videoUrl!, 'video_failed')
                setVideoError(true)
              }}
            />
          )
        } else {
          console.error(`[IMGUR ERROR] Could not extract Imgur ID from: ${videoUrl}`)
          logVideoError('imgur', videoUrl, 'invalid_id_extraction')
          setVideoError(true)
        }
      }
    }
    
    // 3. OTHER VIDEO FORMATS - Generic HTML5 video
    if (post.content_type === 'video' && hasVideoUrl && post.source_platform !== 'youtube' && post.source_platform !== 'imgur') {
      const videoUrl = post.content_video_url
      
      
      return (
        <video
          ref={videoRef}
          src={videoUrl}
          className="absolute inset-0 w-full h-full object-contain"
          autoPlay
          muted
          loop
          playsInline
          preload="metadata"
          onLoadedData={() => {}}
          onError={() => {
            console.error(`[${post.source_platform.toUpperCase()}] Video failed:`, videoUrl)
            logVideoError(post.source_platform, videoUrl!, 'video_failed')
            setVideoError(true)
          }}
        />
      )
    }

    // 4. IMAGE CONTENT - FIX PIXABAY URLS
    if (post.content_image_url && !imageError) {
      let imageUrl = post.content_image_url
      
      // FIX: Pixabay URLs are malformed - remove /get/ path
      if (post.source_platform === 'pixabay' && imageUrl.includes('pixabay.com/get/')) {
        const match = imageUrl.match(/\/get\/([a-z0-9]+)/)
        if (match) {
          imageUrl = `https://cdn.pixabay.com/photo/${match[1]}.jpg`
          }
      }
      
      return (
        <img 
          src={imageUrl}
          alt={post.content_text || 'Hotdog content'}
          className="absolute inset-0 w-full h-full object-cover"
          onError={() => {
            console.error(`[${post.source_platform.toUpperCase()}] Failed to load:`, imageUrl)
            logVideoError(post.source_platform, imageUrl, 'image_failed')
            setImageError(true)
          }}
          onLoad={() => {}}
        />
      )
    }

    // Fallback content (when video/image fails or doesn't exist)
    const fallbackText = post.content_text || 
                        `Check out this hotdog content from ${post.source_platform}!`
    
    return (
      <div className="text-content">
        <div className="text-wrapper">
          <div className="hotdog-emoji">🌭</div>
          <p className="post-text">{fallbackText}</p>
          <div className="platform-badge">
            {getPlatformIcon(post.source_platform)} {post.source_platform}
          </div>
          {(videoError || imageError) && (
            <div className="error-message">
              Content failed to load - showing text instead
            </div>
          )}
        </div>
      </div>
    )
  }

  return (
    <div ref={postContentRef} className="post-content">
      {renderMedia()}
      
      {/* Info overlay */}
      {!isWelcomeCard && (
        <div className="info-overlay">
          <div className="creator-info">
            <div className="username">@{cleanAuthor(post.original_author)}</div>
            {post.content_text && post.content_type !== 'text' && (
              <div className="caption">{post.content_text}</div>
            )}
            <div className="platform-info">
              {getPlatformIcon(post.source_platform)} {post.source_platform}
            </div>
          </div>
        </div>
      )}

      <style jsx>{`
        .post-content {
          width: 100%;
          height: 100%;
          position: relative;
        }

        /* NUCLEAR OPTION - Force ALL children to full size */
        .post-content * {
          box-sizing: border-box !important;
        }

        .post-content > * {
          width: 100% !important;
          height: 100% !important;
          max-width: none !important;
          max-height: none !important;
          min-width: 0 !important;
          min-height: 0 !important;
        }

        /* FORCE ALL MEDIA TO FILL CARD COMPLETELY */
        .video-container,
        .image-container {
          position: absolute !important;
          top: 0 !important;
          left: 0 !important;
          width: 100% !important;
          height: 100% !important;
          overflow: hidden;
        }

        .youtube-iframe-fullsize {
          position: absolute !important;
          top: 0 !important;
          left: 0 !important;
          width: 100% !important;
          height: 100% !important;
          border: none !important;
          outline: none !important;
          margin: 0 !important;
          padding: 0 !important;
          background: black !important;
          z-index: 1;
          aspect-ratio: unset !important;
          object-fit: cover !important;
        }

        /* Override any potential aspect ratio containers */
        .post-content [class*="aspect"],
        .post-content [class*="ratio"],
        .post-content [class*="embed"],
        .post-content [class*="video"] {
          position: static !important;
          width: 100% !important;
          height: 100% !important;
          padding: 0 !important;
          aspect-ratio: unset !important;
        }

        .direct-video,
        .content-image {
          position: absolute !important;
          top: 0 !important;
          left: 0 !important;
          width: 100% !important;
          height: 100% !important;
          border: none !important;
          object-fit: cover !important;
          min-width: 100% !important;
          min-height: 100% !important;
        }

        /* Welcome card */
        .welcome-content {
          width: 100%;
          height: 100%;
          display: flex;
          align-items: center;
          justify-content: center;
          background: linear-gradient(135deg, #ff6b6b 0%, #ffa726 100%);
        }

        .welcome-wrapper {
          text-align: center;
          color: white;
          padding: 40px;
        }

        .hotdog-logo {
          font-size: 100px;
          margin-bottom: 20px;
          animation: bounce 2s infinite;
        }

        .welcome-title {
          font-size: 36px;
          font-weight: 900;
          margin-bottom: 16px;
          text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .welcome-text {
          font-size: 18px;
          margin-bottom: 30px;
          opacity: 0.9;
          line-height: 1.5;
        }

        .welcome-instruction {
          font-size: 16px;
          background: rgba(255, 255, 255, 0.2);
          padding: 12px 24px;
          border-radius: 25px;
          backdrop-filter: blur(10px);
          display: inline-block;
        }

        @keyframes bounce {
          0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
          40% { transform: translateY(-10px); }
          60% { transform: translateY(-5px); }
        }

        /* Text content */
        .text-content {
          width: 100%;
          height: 100%;
          display: flex;
          align-items: center;
          justify-content: center;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .text-wrapper {
          text-align: center;
          color: white;
          padding: 40px;
          max-width: 350px;
        }

        .hotdog-emoji {
          font-size: 80px;
          margin-bottom: 24px;
        }

        .post-text {
          font-size: 18px;
          line-height: 1.5;
          margin-bottom: 24px;
          color: rgba(255, 255, 255, 0.95);
          font-weight: 500;
        }

        .platform-badge {
          display: inline-flex;
          align-items: center;
          gap: 8px;
          padding: 8px 16px;
          background: rgba(255, 255, 255, 0.2);
          border-radius: 20px;
          font-size: 14px;
          backdrop-filter: blur(10px);
        }

        .error-message {
          margin-top: 16px;
          padding: 8px 12px;
          background: rgba(255, 165, 0, 0.2);
          border: 1px solid rgba(255, 165, 0, 0.4);
          border-radius: 12px;
          color: rgba(255, 255, 255, 0.9);
          font-size: 12px;
          text-align: center;
        }

        /* Info overlay */
        .info-overlay {
          position: absolute;
          bottom: 20px;
          left: 20px;
          right: 20px;
          z-index: 10;
        }

        .creator-info {
          color: white;
          text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);
        }

        .username {
          font-size: 16px;
          font-weight: 600;
          margin-bottom: 6px;
        }

        .caption {
          font-size: 14px;
          line-height: 1.4;
          margin-bottom: 8px;
          max-width: 350px;
        }

        .platform-info {
          font-size: 13px;
          display: inline-flex;
          align-items: center;
          gap: 6px;
          background: rgba(0, 0, 0, 0.3);
          padding: 4px 8px;
          border-radius: 12px;
          opacity: 0.9;
        }

        @media (max-width: 768px) {
          .welcome-title {
            font-size: 28px;
          }
          
          .welcome-text {
            font-size: 16px;
          }
          
          .hotdog-logo {
            font-size: 80px;
          }

          .info-overlay {
            bottom: 16px;
            left: 16px;
            right: 16px;
          }

          .username {
            font-size: 14px;
          }

          .caption {
            font-size: 13px;
          }

          .platform-info {
            font-size: 12px;
          }

          .post-text {
            font-size: 16px;
          }

          .hotdog-emoji {
            font-size: 60px;
          }
        }
      `}</style>
    </div>
  )
}