/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/content/route";
exports.ids = ["app/api/content/route"];
exports.modules = {

/***/ "(rsc)/./app/api/content/route.ts":
/*!**********************************!*\
  !*** ./app/api/content/route.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _lib_api_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/api-middleware */ \"(rsc)/./lib/api-middleware.ts\");\n/* harmony import */ var _lib_services_content__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/services/content */ \"(rsc)/./lib/services/content.ts\");\n/* harmony import */ var _lib_validation_content__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/validation/content */ \"(rsc)/./lib/validation/content.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_0__, _lib_api_middleware__WEBPACK_IMPORTED_MODULE_1__, _lib_services_content__WEBPACK_IMPORTED_MODULE_2__]);\n([_lib_db__WEBPACK_IMPORTED_MODULE_0__, _lib_api_middleware__WEBPACK_IMPORTED_MODULE_1__, _lib_services_content__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\nasync function getContentHandler(request) {\n    (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_1__.validateRequestMethod)(request, [\n        'GET'\n    ]);\n    const url = new URL(request.url);\n    const page = parseInt(url.searchParams.get('page') || '1');\n    const limit = parseInt(url.searchParams.get('limit') || '10');\n    const order = url.searchParams.get('order') || 'desc';\n    // Validate pagination parameters\n    if (page < 1) {\n        throw (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_1__.createApiError)('Page number must be greater than 0', 400, 'INVALID_PAGE');\n    }\n    if (limit < 1 || limit > 100) {\n        throw (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_1__.createApiError)('Limit must be between 1 and 100', 400, 'INVALID_LIMIT');\n    }\n    if (![\n        'asc',\n        'desc'\n    ].includes(order)) {\n        throw (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_1__.createApiError)('Order must be either \"asc\" or \"desc\"', 400, 'INVALID_ORDER');\n    }\n    const offset = (page - 1) * limit;\n    try {\n        // Get total count for pagination\n        const countResult = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      SELECT COUNT(*) as total \n      FROM posted_content_with_details\n    `);\n        const total = parseInt(countResult.rows[0]?.total || '0');\n        // Get paginated content\n        const contentResult = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      SELECT \n        id,\n        content_queue_id,\n        posted_at,\n        scheduled_time,\n        post_order,\n        content_text,\n        content_image_url,\n        content_video_url,\n        content_type,\n        source_platform,\n        original_url,\n        original_author,\n        scraped_at\n      FROM posted_content_with_details\n      ORDER BY posted_at ${order.toUpperCase()}\n      LIMIT $1 OFFSET $2\n    `, [\n            limit,\n            offset\n        ]);\n        const content = contentResult.rows;\n        // Calculate pagination metadata\n        const totalPages = Math.ceil(total / limit);\n        const hasNextPage = page < totalPages;\n        const hasPreviousPage = page > 1;\n        const response = {\n            content,\n            pagination: {\n                page,\n                limit,\n                total,\n                totalPages,\n                hasNextPage,\n                hasPreviousPage,\n                nextPage: hasNextPage ? page + 1 : null,\n                previousPage: hasPreviousPage ? page - 1 : null\n            }\n        };\n        const message = content.length > 0 ? `Found ${content.length} content items` : 'No content found';\n        return (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_1__.createSuccessResponse)(response, message);\n    } catch (error) {\n        if (error instanceof Error && error.message.includes('relation') && error.message.includes('does not exist')) {\n            // Database not initialized yet\n            const emptyResponse = {\n                content: [],\n                pagination: {\n                    page: 1,\n                    limit,\n                    total: 0,\n                    totalPages: 0,\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    nextPage: null,\n                    previousPage: null\n                }\n            };\n            return (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_1__.createSuccessResponse)(emptyResponse, 'Database not initialized - no content available');\n        }\n        throw error;\n    }\n}\nasync function postContentHandler(request) {\n    (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_1__.validateRequestMethod)(request, [\n        'POST'\n    ]);\n    const body = await (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_1__.validateJsonBody)(request);\n    // Validate the content data\n    const validation = (0,_lib_validation_content__WEBPACK_IMPORTED_MODULE_3__.validateContent)(body);\n    if (!validation.isValid) {\n        const errorMessages = validation.errors.map((e)=>`${e.field}: ${e.message}`).join(', ');\n        throw (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_1__.createApiError)(`Validation failed: ${errorMessages}`, 400, 'VALIDATION_ERROR');\n    }\n    try {\n        const newContent = await _lib_services_content__WEBPACK_IMPORTED_MODULE_2__.ContentService.createContent(body);\n        return (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_1__.createSuccessResponse)(newContent, 'Content created successfully', 201);\n    } catch (error) {\n        if (error instanceof Error && error.message.includes('Duplicate content')) {\n            throw (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_1__.createApiError)(error.message, 409, 'DUPLICATE_CONTENT');\n        }\n        throw error;\n    }\n}\nconst GET = (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_1__.withErrorHandling)(getContentHandler, '/api/content');\nconst POST = (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_1__.withErrorHandling)(postContentHandler, '/api/content');\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/content/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/api-middleware.ts":
/*!*******************************!*\
  !*** ./lib/api-middleware.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpError: () => (/* binding */ HttpError),\n/* harmony export */   addCorsHeaders: () => (/* binding */ addCorsHeaders),\n/* harmony export */   addSecurityHeaders: () => (/* binding */ addSecurityHeaders),\n/* harmony export */   createApiError: () => (/* binding */ createApiError),\n/* harmony export */   createSuccessResponse: () => (/* binding */ createSuccessResponse),\n/* harmony export */   handleApiError: () => (/* binding */ handleApiError),\n/* harmony export */   validateContentType: () => (/* binding */ validateContentType),\n/* harmony export */   validateJsonBody: () => (/* binding */ validateJsonBody),\n/* harmony export */   validateRequestMethod: () => (/* binding */ validateRequestMethod),\n/* harmony export */   withErrorHandling: () => (/* binding */ withErrorHandling)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_db__WEBPACK_IMPORTED_MODULE_1__]);\n_db__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nclass HttpError extends Error {\n    constructor(message, statusCode = 500, code){\n        super(message);\n        this.name = 'HttpError';\n        this.statusCode = statusCode;\n        this.code = code;\n    }\n}\nfunction createApiError(message, statusCode = 500, code) {\n    return new HttpError(message, statusCode, code);\n}\nasync function handleApiError(error, request, endpoint) {\n    let statusCode = 500;\n    let message = 'Internal Server Error';\n    let code = 'INTERNAL_ERROR';\n    if (error instanceof HttpError) {\n        statusCode = error.statusCode;\n        message = error.message;\n        code = error.code || 'HTTP_ERROR';\n    } else if (error instanceof Error) {\n        message = error.message;\n        code = 'APPLICATION_ERROR';\n    }\n    // Log error to database\n    try {\n        await (0,_db__WEBPACK_IMPORTED_MODULE_1__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR, `API Error in ${endpoint}: ${message}`, 'api', {\n            endpoint,\n            statusCode,\n            code,\n            method: request.method,\n            url: request.url,\n            userAgent: request.headers.get('user-agent'),\n            stack: error instanceof Error ? error.stack : undefined\n        });\n    } catch (logError) {\n        console.error('Failed to log error to database:', logError);\n    }\n    // Log to console for development\n    if (true) {\n        console.error(`API Error [${endpoint}]:`, error);\n    }\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        success: false,\n        error: message,\n        code,\n        timestamp: new Date().toISOString()\n    }, {\n        status: statusCode\n    });\n}\nfunction withErrorHandling(handler, endpoint) {\n    return async (request)=>{\n        try {\n            return await handler(request);\n        } catch (error) {\n            return await handleApiError(error, request, endpoint);\n        }\n    };\n}\nfunction validateRequestMethod(request, allowedMethods) {\n    if (!allowedMethods.includes(request.method)) {\n        throw createApiError(`Method ${request.method} not allowed`, 405, 'METHOD_NOT_ALLOWED');\n    }\n}\nfunction validateContentType(request, expectedType = 'application/json') {\n    const contentType = request.headers.get('content-type');\n    if (contentType && !contentType.includes(expectedType)) {\n        throw createApiError(`Invalid content type. Expected ${expectedType}`, 400, 'INVALID_CONTENT_TYPE');\n    }\n}\nasync function validateJsonBody(request) {\n    try {\n        const body = await request.json();\n        return body;\n    } catch  {\n        throw createApiError('Invalid JSON in request body', 400, 'INVALID_JSON');\n    }\n}\nfunction addCorsHeaders(response, origin) {\n    const allowedOrigins = [\n        'http://localhost:3000',\n        'https://hotdog-diaries.vercel.app',\n        process.env.CORS_ORIGIN\n    ].filter(Boolean);\n    const requestOrigin = origin || 'http://localhost:3000';\n    if (allowedOrigins.includes(requestOrigin)) {\n        response.headers.set('Access-Control-Allow-Origin', requestOrigin);\n    }\n    response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n    response.headers.set('Access-Control-Max-Age', '86400');\n    return response;\n}\nfunction addSecurityHeaders(response) {\n    response.headers.set('X-Content-Type-Options', 'nosniff');\n    response.headers.set('X-Frame-Options', 'DENY');\n    response.headers.set('X-XSS-Protection', '1; mode=block');\n    response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n    if (false) {}\n    return response;\n}\nfunction createSuccessResponse(data, message, status = 200) {\n    const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        success: true,\n        data,\n        message,\n        timestamp: new Date().toISOString()\n    }, {\n        status\n    });\n    return addSecurityHeaders(response);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/api-middleware.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db-helpers.ts":
/*!***************************!*\
  !*** ./lib/db-helpers.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdminUserHelper: () => (/* binding */ AdminUserHelper),\n/* harmony export */   ContentQueueHelper: () => (/* binding */ ContentQueueHelper),\n/* harmony export */   PostedContentHelper: () => (/* binding */ PostedContentHelper),\n/* harmony export */   SystemLogHelper: () => (/* binding */ SystemLogHelper),\n/* harmony export */   getSystemStats: () => (/* binding */ getSystemStats)\n/* harmony export */ });\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_db__WEBPACK_IMPORTED_MODULE_0__]);\n_db__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nclass ContentQueueHelper {\n    static async create(data) {\n        const contentHash = this.generateContentHash(data.content_text, data.content_image_url, data.content_video_url, data.original_url);\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      INSERT INTO content_queue (\n        content_text, content_image_url, content_video_url, content_type,\n        source_platform, original_url, original_author, scraped_at,\n        content_hash, is_approved, admin_notes\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\n      RETURNING *\n    `, [\n            data.content_text,\n            data.content_image_url,\n            data.content_video_url,\n            data.content_type,\n            data.source_platform,\n            data.original_url,\n            data.original_author,\n            data.scraped_at || new Date(),\n            contentHash,\n            data.is_approved || false,\n            data.admin_notes\n        ]);\n        return result.rows[0];\n    }\n    static async findById(id) {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query('SELECT * FROM content_queue WHERE id = $1', [\n            id\n        ]);\n        return result.rows[0] || null;\n    }\n    static async findByHash(hash) {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query('SELECT * FROM content_queue WHERE content_hash = $1', [\n            hash\n        ]);\n        return result.rows[0] || null;\n    }\n    static async findUnposted(limit = 10) {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      SELECT * FROM content_queue \n      WHERE is_posted = FALSE AND is_approved = TRUE\n      ORDER BY scraped_at ASC\n      LIMIT $1\n    `, [\n            limit\n        ]);\n        return result.rows;\n    }\n    static async markAsPosted(id) {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      UPDATE content_queue \n      SET is_posted = TRUE, posted_at = NOW()\n      WHERE id = $1\n      RETURNING *\n    `, [\n            id\n        ]);\n        if (result.rows.length === 0) {\n            throw new Error(`Content queue item with id ${id} not found`);\n        }\n        return result.rows[0];\n    }\n    static async approve(id, adminNotes) {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      UPDATE content_queue \n      SET is_approved = TRUE, admin_notes = $2\n      WHERE id = $1\n      RETURNING *\n    `, [\n            id,\n            adminNotes\n        ]);\n        if (result.rows.length === 0) {\n            throw new Error(`Content queue item with id ${id} not found`);\n        }\n        return result.rows[0];\n    }\n    static async reject(id, adminNotes) {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      UPDATE content_queue \n      SET is_approved = FALSE, admin_notes = $2\n      WHERE id = $1\n      RETURNING *\n    `, [\n            id,\n            adminNotes\n        ]);\n        if (result.rows.length === 0) {\n            throw new Error(`Content queue item with id ${id} not found`);\n        }\n        return result.rows[0];\n    }\n    static generateContentHash(contentText, imageUrl, videoUrl, originalUrl) {\n        const combined = [\n            contentText,\n            imageUrl,\n            videoUrl,\n            originalUrl\n        ].filter(Boolean).join('|');\n        return crypto__WEBPACK_IMPORTED_MODULE_2___default().createHash('sha256').update(combined).digest('hex');\n    }\n    static async isDuplicate(contentText, imageUrl, videoUrl, originalUrl) {\n        const hash = this.generateContentHash(contentText, imageUrl, videoUrl, originalUrl);\n        const existing = await this.findByHash(hash);\n        return !!existing;\n    }\n}\nclass PostedContentHelper {\n    static async create(data) {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      INSERT INTO posted_content (content_queue_id, posted_at, scheduled_time, post_order)\n      VALUES ($1, NOW(), $2, $3)\n      RETURNING *\n    `, [\n            data.content_queue_id,\n            data.scheduled_time,\n            data.post_order\n        ]);\n        return result.rows[0];\n    }\n    static async findById(id) {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query('SELECT * FROM posted_content WHERE id = $1', [\n            id\n        ]);\n        return result.rows[0] || null;\n    }\n    static async findWithContent(limit = 10, offset = 0) {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      SELECT * FROM posted_content_with_details\n      ORDER BY posted_at DESC\n      LIMIT $1 OFFSET $2\n    `, [\n            limit,\n            offset\n        ]);\n        return result.rows;\n    }\n    static async getPostsForToday() {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      SELECT * FROM posted_content \n      WHERE DATE(posted_at) = CURRENT_DATE\n      ORDER BY post_order ASC\n    `);\n        return result.rows;\n    }\n    static async getNextPostOrder() {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      SELECT COALESCE(MAX(post_order), 0) + 1 as next_order\n      FROM posted_content \n      WHERE DATE(posted_at) = CURRENT_DATE\n    `);\n        return result.rows[0]?.next_order || 1;\n    }\n}\nclass AdminUserHelper {\n    static async create(username, password) {\n        const existingUser = await this.findByUsername(username);\n        if (existingUser) {\n            throw new Error('Username already exists');\n        }\n        const passwordHash = await bcryptjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].hash(password, 10);\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      INSERT INTO admin_users (username, password_hash)\n      VALUES ($1, $2)\n      RETURNING *\n    `, [\n            username,\n            passwordHash\n        ]);\n        return result.rows[0];\n    }\n    static async findById(id) {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query('SELECT * FROM admin_users WHERE id = $1', [\n            id\n        ]);\n        return result.rows[0] || null;\n    }\n    static async findByUsername(username) {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query('SELECT * FROM admin_users WHERE username = $1', [\n            username\n        ]);\n        return result.rows[0] || null;\n    }\n    static async validatePassword(username, password) {\n        const user = await this.findByUsername(username);\n        if (!user) {\n            return null;\n        }\n        const isValid = await bcryptjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].compare(password, user.password_hash);\n        if (!isValid) {\n            return null;\n        }\n        // Update last login\n        await _db__WEBPACK_IMPORTED_MODULE_0__.db.query('UPDATE admin_users SET last_login = NOW() WHERE id = $1', [\n            user.id\n        ]);\n        return user;\n    }\n    static async updatePassword(id, newPassword) {\n        const passwordHash = await bcryptjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].hash(newPassword, 10);\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      UPDATE admin_users \n      SET password_hash = $2\n      WHERE id = $1\n      RETURNING *\n    `, [\n            id,\n            passwordHash\n        ]);\n        if (result.rows.length === 0) {\n            throw new Error(`Admin user with id ${id} not found`);\n        }\n        return result.rows[0];\n    }\n}\nclass SystemLogHelper {\n    static async create(level, message, component, metadata) {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      INSERT INTO system_logs (log_level, message, component, metadata)\n      VALUES ($1, $2, $3, $4)\n      RETURNING *\n    `, [\n            level,\n            message,\n            component,\n            metadata ? JSON.stringify(metadata) : null\n        ]);\n        return result.rows[0];\n    }\n    static async findByLevel(level, limit = 100) {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      SELECT * FROM system_logs \n      WHERE log_level = $1 \n      ORDER BY created_at DESC \n      LIMIT $2\n    `, [\n            level,\n            limit\n        ]);\n        return result.rows;\n    }\n    static async findByComponent(component, limit = 100) {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      SELECT * FROM system_logs \n      WHERE component = $1 \n      ORDER BY created_at DESC \n      LIMIT $2\n    `, [\n            component,\n            limit\n        ]);\n        return result.rows;\n    }\n    static async findRecent(limit = 50) {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      SELECT * FROM system_logs \n      ORDER BY created_at DESC \n      LIMIT $1\n    `, [\n            limit\n        ]);\n        return result.rows;\n    }\n    static async cleanup(olderThanDays = 30) {\n        const result = await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n      DELETE FROM system_logs \n      WHERE created_at < NOW() - INTERVAL '${olderThanDays} days'\n    `);\n        return result.rowCount || 0;\n    }\n}\nasync function getSystemStats() {\n    const results = await Promise.all([\n        _db__WEBPACK_IMPORTED_MODULE_0__.db.query('SELECT COUNT(*) as count FROM content_queue'),\n        _db__WEBPACK_IMPORTED_MODULE_0__.db.query('SELECT COUNT(*) as count FROM content_queue WHERE is_approved = TRUE'),\n        _db__WEBPACK_IMPORTED_MODULE_0__.db.query('SELECT COUNT(*) as count FROM content_queue WHERE is_posted = TRUE'),\n        _db__WEBPACK_IMPORTED_MODULE_0__.db.query('SELECT COUNT(*) as count FROM posted_content WHERE DATE(posted_at) = CURRENT_DATE'),\n        _db__WEBPACK_IMPORTED_MODULE_0__.db.query('SELECT COUNT(*) as count FROM content_queue WHERE is_approved = FALSE AND is_posted = FALSE')\n    ]);\n    return {\n        totalContent: parseInt(results[0].rows[0]?.count || '0'),\n        approvedContent: parseInt(results[1].rows[0]?.count || '0'),\n        postedContent: parseInt(results[2].rows[0]?.count || '0'),\n        todaysPosts: parseInt(results[3].rows[0]?.count || '0'),\n        pendingApproval: parseInt(results[4].rows[0]?.count || '0')\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db-helpers.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db-query-builder.ts":
/*!*********************************!*\
  !*** ./lib/db-query-builder.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeleteBuilder: () => (/* binding */ DeleteBuilder),\n/* harmony export */   InsertBuilder: () => (/* binding */ InsertBuilder),\n/* harmony export */   QueryBuilder: () => (/* binding */ QueryBuilder),\n/* harmony export */   UpdateBuilder: () => (/* binding */ UpdateBuilder),\n/* harmony export */   deleteFrom: () => (/* binding */ deleteFrom),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   update: () => (/* binding */ update)\n/* harmony export */ });\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./db */ \"(rsc)/./lib/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_db__WEBPACK_IMPORTED_MODULE_0__]);\n_db__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nclass QueryBuilder {\n    static table(tableName) {\n        const builder = new QueryBuilder();\n        builder.fromTable = tableName;\n        return builder;\n    }\n    select(fields) {\n        if (typeof fields === 'string') {\n            this.selectFields = [\n                fields\n            ];\n        } else {\n            this.selectFields = fields;\n        }\n        return this;\n    }\n    where(field, operator, value) {\n        this.whereConditions.push({\n            field,\n            operator,\n            value\n        });\n        return this;\n    }\n    whereIn(field, values) {\n        this.whereConditions.push({\n            field,\n            operator: 'IN',\n            values\n        });\n        return this;\n    }\n    whereNotIn(field, values) {\n        this.whereConditions.push({\n            field,\n            operator: 'NOT IN',\n            values\n        });\n        return this;\n    }\n    whereNull(field) {\n        this.whereConditions.push({\n            field,\n            operator: 'IS NULL'\n        });\n        return this;\n    }\n    whereNotNull(field) {\n        this.whereConditions.push({\n            field,\n            operator: 'IS NOT NULL'\n        });\n        return this;\n    }\n    orderBy(field, direction = 'ASC') {\n        this.orderByFields.push({\n            field,\n            direction\n        });\n        return this;\n    }\n    join(table, on, type = 'INNER') {\n        this.joinClauses.push({\n            type,\n            table,\n            on\n        });\n        return this;\n    }\n    leftJoin(table, on) {\n        return this.join(table, on, 'LEFT');\n    }\n    limit(count) {\n        this.limitCount = count;\n        return this;\n    }\n    offset(count) {\n        this.offsetCount = count;\n        return this;\n    }\n    build() {\n        this.parameters = [];\n        let paramIndex = 1;\n        // Build SELECT clause\n        const selectClause = `SELECT ${this.selectFields.join(', ')}`;\n        // Build FROM clause\n        let fromClause = `FROM ${this.fromTable}`;\n        // Build JOIN clauses\n        if (this.joinClauses.length > 0) {\n            fromClause += ' ' + this.joinClauses.map((join)=>`${join.type} JOIN ${join.table} ON ${join.on}`).join(' ');\n        }\n        // Build WHERE clause\n        let whereClause = '';\n        if (this.whereConditions.length > 0) {\n            const conditions = this.whereConditions.map((condition)=>{\n                switch(condition.operator){\n                    case 'IS NULL':\n                    case 'IS NOT NULL':\n                        return `${condition.field} ${condition.operator}`;\n                    case 'IN':\n                    case 'NOT IN':\n                        if (!condition.values || condition.values.length === 0) {\n                            throw new Error(`${condition.operator} requires non-empty values array`);\n                        }\n                        const placeholders = condition.values.map(()=>`$${paramIndex++}`).join(', ');\n                        this.parameters.push(...condition.values);\n                        return `${condition.field} ${condition.operator} (${placeholders})`;\n                    default:\n                        this.parameters.push(condition.value);\n                        return `${condition.field} ${condition.operator} $${paramIndex++}`;\n                }\n            });\n            whereClause = `WHERE ${conditions.join(' AND ')}`;\n        }\n        // Build ORDER BY clause\n        let orderByClause = '';\n        if (this.orderByFields.length > 0) {\n            const orderFields = this.orderByFields.map((order)=>`${order.field} ${order.direction}`).join(', ');\n            orderByClause = `ORDER BY ${orderFields}`;\n        }\n        // Build LIMIT clause\n        let limitClause = '';\n        if (this.limitCount !== undefined) {\n            limitClause = `LIMIT $${paramIndex++}`;\n            this.parameters.push(this.limitCount);\n        }\n        // Build OFFSET clause\n        let offsetClause = '';\n        if (this.offsetCount !== undefined) {\n            offsetClause = `OFFSET $${paramIndex++}`;\n            this.parameters.push(this.offsetCount);\n        }\n        // Combine all clauses\n        const query = [\n            selectClause,\n            fromClause,\n            whereClause,\n            orderByClause,\n            limitClause,\n            offsetClause\n        ].filter(Boolean).join(' ');\n        return {\n            query,\n            params: this.parameters\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.limit(1).execute();\n        return result.rows[0] || null;\n    }\n    async count() {\n        const originalSelect = this.selectFields;\n        this.selectFields = [\n            'COUNT(*) as count'\n        ];\n        const result = await this.execute();\n        this.selectFields = originalSelect;\n        return parseInt(result.rows[0]?.count || '0');\n    }\n    /**\n   * Perform an upsert operation (insert or update if exists)\n   */ async upsert(data, conflictTarget) {\n        // Use the InsertBuilder with conflict handling\n        const insertBuilder = InsertBuilder.into(this.fromTable).values(data);\n        if (conflictTarget) {\n            // For now, do an update on conflict\n            insertBuilder.onConflictDoUpdate(conflictTarget, data);\n        } else {\n            // Try to determine primary key or use 'id' as default\n            insertBuilder.onConflictDoUpdate('id', data);\n        }\n        return await insertBuilder.execute();\n    }\n    constructor(){\n        this.selectFields = [\n            '*'\n        ];\n        this.fromTable = '';\n        this.whereConditions = [];\n        this.orderByFields = [];\n        this.joinClauses = [];\n        this.parameters = [];\n    }\n}\nclass InsertBuilder {\n    static into(tableName) {\n        const builder = new InsertBuilder();\n        builder.tableName = tableName;\n        return builder;\n    }\n    values(data) {\n        if (Array.isArray(data)) {\n            this.insertData = data;\n        } else {\n            this.insertData = [\n                data\n            ];\n        }\n        return this;\n    }\n    returning(fields) {\n        if (typeof fields === 'string') {\n            this.returnFields = [\n                fields\n            ];\n        } else {\n            this.returnFields = fields;\n        }\n        return this;\n    }\n    onConflict(target, action, updateData) {\n        this.conflictTarget = target;\n        this.conflictAction = action;\n        this.updateData = updateData;\n        return this;\n    }\n    onConflictDoNothing(target) {\n        return this.onConflict(target, 'DO NOTHING');\n    }\n    onConflictDoUpdate(target, updateData) {\n        return this.onConflict(target, 'DO UPDATE', updateData);\n    }\n    build() {\n        if (this.insertData.length === 0) {\n            throw new Error('No data provided for INSERT operation');\n        }\n        // Get field names from the first record\n        const fields = Object.keys(this.insertData[0]);\n        const allValues = [];\n        // Build placeholders and collect all values\n        const valueRows = [];\n        let paramIndex = 1;\n        for (const record of this.insertData){\n            const rowPlaceholders = [];\n            for (const field of fields){\n                rowPlaceholders.push(`$${paramIndex}`);\n                allValues.push(record[field]);\n                paramIndex++;\n            }\n            valueRows.push(`(${rowPlaceholders.join(', ')})`);\n        }\n        let query = `INSERT INTO ${this.tableName} (${fields.join(', ')}) VALUES ${valueRows.join(', ')}`;\n        // Add conflict handling\n        if (this.conflictTarget && this.conflictAction) {\n            query += ` ON CONFLICT (${this.conflictTarget}) ${this.conflictAction}`;\n            if (this.conflictAction === 'DO UPDATE' && this.updateData) {\n                const updateFields = Object.keys(this.updateData);\n                const updateClause = updateFields.map((field)=>`${field} = EXCLUDED.${field}`).join(', ');\n                query += ` SET ${updateClause}`;\n            }\n        }\n        // Add RETURNING clause\n        if (this.returnFields.length > 0) {\n            query += ` RETURNING ${this.returnFields.join(', ')}`;\n        }\n        return {\n            query,\n            params: allValues\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.execute();\n        return result.rows[0] || null;\n    }\n    constructor(){\n        this.tableName = '';\n        this.insertData = [];\n        this.returnFields = [\n            '*'\n        ];\n    }\n}\nclass UpdateBuilder {\n    static table(tableName) {\n        const builder = new UpdateBuilder();\n        builder.tableName = tableName;\n        return builder;\n    }\n    set(data) {\n        this.updateData = {\n            ...this.updateData,\n            ...data\n        };\n        return this;\n    }\n    where(field, operator, value) {\n        this.whereConditions.push({\n            field,\n            operator,\n            value\n        });\n        return this;\n    }\n    returning(fields) {\n        if (typeof fields === 'string') {\n            this.returnFields = [\n                fields\n            ];\n        } else {\n            this.returnFields = fields;\n        }\n        return this;\n    }\n    build() {\n        this.parameters = [];\n        let paramIndex = 1;\n        // Build SET clause\n        const updateFields = Object.keys(this.updateData);\n        const setClause = updateFields.map((field)=>{\n            this.parameters.push(this.updateData[field]);\n            return `${field} = $${paramIndex++}`;\n        }).join(', ');\n        let query = `UPDATE ${this.tableName} SET ${setClause}`;\n        // Build WHERE clause\n        if (this.whereConditions.length > 0) {\n            const conditions = this.whereConditions.map((condition)=>{\n                if (condition.operator === 'IS NULL' || condition.operator === 'IS NOT NULL') {\n                    return `${condition.field} ${condition.operator}`;\n                }\n                this.parameters.push(condition.value);\n                return `${condition.field} ${condition.operator} $${paramIndex++}`;\n            });\n            query += ` WHERE ${conditions.join(' AND ')}`;\n        }\n        // Add RETURNING clause\n        if (this.returnFields.length > 0) {\n            query += ` RETURNING ${this.returnFields.join(', ')}`;\n        }\n        return {\n            query,\n            params: this.parameters\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.execute();\n        return result.rows[0] || null;\n    }\n    constructor(){\n        this.tableName = '';\n        this.updateData = {};\n        this.whereConditions = [];\n        this.returnFields = [\n            '*'\n        ];\n        this.parameters = [];\n    }\n}\nclass DeleteBuilder {\n    static from(tableName) {\n        const builder = new DeleteBuilder();\n        builder.tableName = tableName;\n        return builder;\n    }\n    where(field, operator, value) {\n        this.whereConditions.push({\n            field,\n            operator,\n            value\n        });\n        return this;\n    }\n    returning(fields) {\n        if (typeof fields === 'string') {\n            this.returnFields = [\n                fields\n            ];\n        } else {\n            this.returnFields = fields;\n        }\n        return this;\n    }\n    build() {\n        this.parameters = [];\n        let paramIndex = 1;\n        let query = `DELETE FROM ${this.tableName}`;\n        // Build WHERE clause\n        if (this.whereConditions.length > 0) {\n            const conditions = this.whereConditions.map((condition)=>{\n                if (condition.operator === 'IS NULL' || condition.operator === 'IS NOT NULL') {\n                    return `${condition.field} ${condition.operator}`;\n                }\n                this.parameters.push(condition.value);\n                return `${condition.field} ${condition.operator} $${paramIndex++}`;\n            });\n            query += ` WHERE ${conditions.join(' AND ')}`;\n        }\n        // Add RETURNING clause\n        if (this.returnFields.length > 0) {\n            query += ` RETURNING ${this.returnFields.join(', ')}`;\n        }\n        return {\n            query,\n            params: this.parameters\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.execute();\n        return result.rows[0] || null;\n    }\n    constructor(){\n        this.tableName = '';\n        this.whereConditions = [];\n        this.returnFields = [\n            '*'\n        ];\n        this.parameters = [];\n    }\n}\n// Export convenience functions\nconst query = QueryBuilder.table;\nconst insert = InsertBuilder.into;\nconst update = UpdateBuilder.table;\nconst deleteFrom = DeleteBuilder.from;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YUFBb0IsRUFBRTs7QUF5RGhDO0FBRUEsK0JBQStCO0FBQ3hCLE1BQU1pQixRQUFRbEQsYUFBYUMsS0FBSztBQUNoQyxNQUFNMEYsU0FBUzNCLGNBQWNDLElBQUk7QUFDakMsTUFBTTJCLFNBQVNOLGNBQWNyRixLQUFLO0FBQ2xDLE1BQU00RixhQUFhSixjQUFjQyxJQUFJIiwic291cmNlcyI6WyIvVXNlcnMvYWRhbXNoYXcvRGV2ZWxvcG1lbnQvd2Vic2l0ZXMvaG90ZG9nLWRpYXJpZXMvbGliL2RiLXF1ZXJ5LWJ1aWxkZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUXVlcnlSZXN1bHQsIFF1ZXJ5UmVzdWx0Um93IH0gZnJvbSAncGcnXG5pbXBvcnQgeyBkYiB9IGZyb20gJy4vZGInXG5cbmV4cG9ydCBpbnRlcmZhY2UgV2hlcmVDb25kaXRpb24ge1xuICBmaWVsZDogc3RyaW5nXG4gIG9wZXJhdG9yOiAnPScgfCAnIT0nIHwgJz4nIHwgJzwnIHwgJz49JyB8ICc8PScgfCAnTElLRScgfCAnSUxJS0UnIHwgJ0lOJyB8ICdOT1QgSU4nIHwgJ0lTIE5VTEwnIHwgJ0lTIE5PVCBOVUxMJ1xuICB2YWx1ZT86IGFueVxuICB2YWx1ZXM/OiBhbnlbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9yZGVyQnkge1xuICBmaWVsZDogc3RyaW5nXG4gIGRpcmVjdGlvbjogJ0FTQycgfCAnREVTQydcbn1cblxuZXhwb3J0IGludGVyZmFjZSBKb2luQ2xhdXNlIHtcbiAgdHlwZTogJ0lOTkVSJyB8ICdMRUZUJyB8ICdSSUdIVCcgfCAnRlVMTCdcbiAgdGFibGU6IHN0cmluZ1xuICBvbjogc3RyaW5nXG59XG5cbmV4cG9ydCBjbGFzcyBRdWVyeUJ1aWxkZXIge1xuICBwcml2YXRlIHNlbGVjdEZpZWxkczogc3RyaW5nW10gPSBbJyonXVxuICBwcml2YXRlIGZyb21UYWJsZTogc3RyaW5nID0gJydcbiAgcHJpdmF0ZSB3aGVyZUNvbmRpdGlvbnM6IFdoZXJlQ29uZGl0aW9uW10gPSBbXVxuICBwcml2YXRlIG9yZGVyQnlGaWVsZHM6IE9yZGVyQnlbXSA9IFtdXG4gIHByaXZhdGUgam9pbkNsYXVzZXM6IEpvaW5DbGF1c2VbXSA9IFtdXG4gIHByaXZhdGUgbGltaXRDb3VudD86IG51bWJlclxuICBwcml2YXRlIG9mZnNldENvdW50PzogbnVtYmVyXG4gIHByaXZhdGUgcGFyYW1ldGVyczogYW55W10gPSBbXVxuXG4gIHN0YXRpYyB0YWJsZSh0YWJsZU5hbWU6IHN0cmluZyk6IFF1ZXJ5QnVpbGRlciB7XG4gICAgY29uc3QgYnVpbGRlciA9IG5ldyBRdWVyeUJ1aWxkZXIoKVxuICAgIGJ1aWxkZXIuZnJvbVRhYmxlID0gdGFibGVOYW1lXG4gICAgcmV0dXJuIGJ1aWxkZXJcbiAgfVxuXG4gIHNlbGVjdChmaWVsZHM6IHN0cmluZyB8IHN0cmluZ1tdKTogUXVlcnlCdWlsZGVyIHtcbiAgICBpZiAodHlwZW9mIGZpZWxkcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuc2VsZWN0RmllbGRzID0gW2ZpZWxkc11cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3RGaWVsZHMgPSBmaWVsZHNcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHdoZXJlKGZpZWxkOiBzdHJpbmcsIG9wZXJhdG9yOiBXaGVyZUNvbmRpdGlvblsnb3BlcmF0b3InXSwgdmFsdWU/OiBhbnkpOiBRdWVyeUJ1aWxkZXIge1xuICAgIHRoaXMud2hlcmVDb25kaXRpb25zLnB1c2goeyBmaWVsZCwgb3BlcmF0b3IsIHZhbHVlIH0pXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHdoZXJlSW4oZmllbGQ6IHN0cmluZywgdmFsdWVzOiBhbnlbXSk6IFF1ZXJ5QnVpbGRlciB7XG4gICAgdGhpcy53aGVyZUNvbmRpdGlvbnMucHVzaCh7IGZpZWxkLCBvcGVyYXRvcjogJ0lOJywgdmFsdWVzIH0pXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHdoZXJlTm90SW4oZmllbGQ6IHN0cmluZywgdmFsdWVzOiBhbnlbXSk6IFF1ZXJ5QnVpbGRlciB7XG4gICAgdGhpcy53aGVyZUNvbmRpdGlvbnMucHVzaCh7IGZpZWxkLCBvcGVyYXRvcjogJ05PVCBJTicsIHZhbHVlcyB9KVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB3aGVyZU51bGwoZmllbGQ6IHN0cmluZyk6IFF1ZXJ5QnVpbGRlciB7XG4gICAgdGhpcy53aGVyZUNvbmRpdGlvbnMucHVzaCh7IGZpZWxkLCBvcGVyYXRvcjogJ0lTIE5VTEwnIH0pXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHdoZXJlTm90TnVsbChmaWVsZDogc3RyaW5nKTogUXVlcnlCdWlsZGVyIHtcbiAgICB0aGlzLndoZXJlQ29uZGl0aW9ucy5wdXNoKHsgZmllbGQsIG9wZXJhdG9yOiAnSVMgTk9UIE5VTEwnIH0pXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIG9yZGVyQnkoZmllbGQ6IHN0cmluZywgZGlyZWN0aW9uOiAnQVNDJyB8ICdERVNDJyA9ICdBU0MnKTogUXVlcnlCdWlsZGVyIHtcbiAgICB0aGlzLm9yZGVyQnlGaWVsZHMucHVzaCh7IGZpZWxkLCBkaXJlY3Rpb24gfSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgam9pbih0YWJsZTogc3RyaW5nLCBvbjogc3RyaW5nLCB0eXBlOiBKb2luQ2xhdXNlWyd0eXBlJ10gPSAnSU5ORVInKTogUXVlcnlCdWlsZGVyIHtcbiAgICB0aGlzLmpvaW5DbGF1c2VzLnB1c2goeyB0eXBlLCB0YWJsZSwgb24gfSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgbGVmdEpvaW4odGFibGU6IHN0cmluZywgb246IHN0cmluZyk6IFF1ZXJ5QnVpbGRlciB7XG4gICAgcmV0dXJuIHRoaXMuam9pbih0YWJsZSwgb24sICdMRUZUJylcbiAgfVxuXG4gIGxpbWl0KGNvdW50OiBudW1iZXIpOiBRdWVyeUJ1aWxkZXIge1xuICAgIHRoaXMubGltaXRDb3VudCA9IGNvdW50XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIG9mZnNldChjb3VudDogbnVtYmVyKTogUXVlcnlCdWlsZGVyIHtcbiAgICB0aGlzLm9mZnNldENvdW50ID0gY291bnRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgYnVpbGQoKTogeyBxdWVyeTogc3RyaW5nOyBwYXJhbXM6IGFueVtdIH0ge1xuICAgIHRoaXMucGFyYW1ldGVycyA9IFtdXG4gICAgbGV0IHBhcmFtSW5kZXggPSAxXG5cbiAgICAvLyBCdWlsZCBTRUxFQ1QgY2xhdXNlXG4gICAgY29uc3Qgc2VsZWN0Q2xhdXNlID0gYFNFTEVDVCAke3RoaXMuc2VsZWN0RmllbGRzLmpvaW4oJywgJyl9YFxuICAgIFxuICAgIC8vIEJ1aWxkIEZST00gY2xhdXNlXG4gICAgbGV0IGZyb21DbGF1c2UgPSBgRlJPTSAke3RoaXMuZnJvbVRhYmxlfWBcbiAgICBcbiAgICAvLyBCdWlsZCBKT0lOIGNsYXVzZXNcbiAgICBpZiAodGhpcy5qb2luQ2xhdXNlcy5sZW5ndGggPiAwKSB7XG4gICAgICBmcm9tQ2xhdXNlICs9ICcgJyArIHRoaXMuam9pbkNsYXVzZXMubWFwKGpvaW4gPT4gXG4gICAgICAgIGAke2pvaW4udHlwZX0gSk9JTiAke2pvaW4udGFibGV9IE9OICR7am9pbi5vbn1gXG4gICAgICApLmpvaW4oJyAnKVxuICAgIH1cblxuICAgIC8vIEJ1aWxkIFdIRVJFIGNsYXVzZVxuICAgIGxldCB3aGVyZUNsYXVzZSA9ICcnXG4gICAgaWYgKHRoaXMud2hlcmVDb25kaXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGNvbmRpdGlvbnMgPSB0aGlzLndoZXJlQ29uZGl0aW9ucy5tYXAoY29uZGl0aW9uID0+IHtcbiAgICAgICAgc3dpdGNoIChjb25kaXRpb24ub3BlcmF0b3IpIHtcbiAgICAgICAgICBjYXNlICdJUyBOVUxMJzpcbiAgICAgICAgICBjYXNlICdJUyBOT1QgTlVMTCc6XG4gICAgICAgICAgICByZXR1cm4gYCR7Y29uZGl0aW9uLmZpZWxkfSAke2NvbmRpdGlvbi5vcGVyYXRvcn1gXG4gICAgICAgICAgXG4gICAgICAgICAgY2FzZSAnSU4nOlxuICAgICAgICAgIGNhc2UgJ05PVCBJTic6XG4gICAgICAgICAgICBpZiAoIWNvbmRpdGlvbi52YWx1ZXMgfHwgY29uZGl0aW9uLnZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2NvbmRpdGlvbi5vcGVyYXRvcn0gcmVxdWlyZXMgbm9uLWVtcHR5IHZhbHVlcyBhcnJheWApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlcnMgPSBjb25kaXRpb24udmFsdWVzLm1hcCgoKSA9PiBgJCR7cGFyYW1JbmRleCsrfWApLmpvaW4oJywgJylcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5wdXNoKC4uLmNvbmRpdGlvbi52YWx1ZXMpXG4gICAgICAgICAgICByZXR1cm4gYCR7Y29uZGl0aW9uLmZpZWxkfSAke2NvbmRpdGlvbi5vcGVyYXRvcn0gKCR7cGxhY2Vob2xkZXJzfSlgXG4gICAgICAgICAgXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5wdXNoKGNvbmRpdGlvbi52YWx1ZSlcbiAgICAgICAgICAgIHJldHVybiBgJHtjb25kaXRpb24uZmllbGR9ICR7Y29uZGl0aW9uLm9wZXJhdG9yfSAkJHtwYXJhbUluZGV4Kyt9YFxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgd2hlcmVDbGF1c2UgPSBgV0hFUkUgJHtjb25kaXRpb25zLmpvaW4oJyBBTkQgJyl9YFxuICAgIH1cblxuICAgIC8vIEJ1aWxkIE9SREVSIEJZIGNsYXVzZVxuICAgIGxldCBvcmRlckJ5Q2xhdXNlID0gJydcbiAgICBpZiAodGhpcy5vcmRlckJ5RmllbGRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IG9yZGVyRmllbGRzID0gdGhpcy5vcmRlckJ5RmllbGRzLm1hcChvcmRlciA9PiBcbiAgICAgICAgYCR7b3JkZXIuZmllbGR9ICR7b3JkZXIuZGlyZWN0aW9ufWBcbiAgICAgICkuam9pbignLCAnKVxuICAgICAgb3JkZXJCeUNsYXVzZSA9IGBPUkRFUiBCWSAke29yZGVyRmllbGRzfWBcbiAgICB9XG5cbiAgICAvLyBCdWlsZCBMSU1JVCBjbGF1c2VcbiAgICBsZXQgbGltaXRDbGF1c2UgPSAnJ1xuICAgIGlmICh0aGlzLmxpbWl0Q291bnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGltaXRDbGF1c2UgPSBgTElNSVQgJCR7cGFyYW1JbmRleCsrfWBcbiAgICAgIHRoaXMucGFyYW1ldGVycy5wdXNoKHRoaXMubGltaXRDb3VudClcbiAgICB9XG5cbiAgICAvLyBCdWlsZCBPRkZTRVQgY2xhdXNlXG4gICAgbGV0IG9mZnNldENsYXVzZSA9ICcnXG4gICAgaWYgKHRoaXMub2Zmc2V0Q291bnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2Zmc2V0Q2xhdXNlID0gYE9GRlNFVCAkJHtwYXJhbUluZGV4Kyt9YFxuICAgICAgdGhpcy5wYXJhbWV0ZXJzLnB1c2godGhpcy5vZmZzZXRDb3VudClcbiAgICB9XG5cbiAgICAvLyBDb21iaW5lIGFsbCBjbGF1c2VzXG4gICAgY29uc3QgcXVlcnkgPSBbXG4gICAgICBzZWxlY3RDbGF1c2UsXG4gICAgICBmcm9tQ2xhdXNlLFxuICAgICAgd2hlcmVDbGF1c2UsXG4gICAgICBvcmRlckJ5Q2xhdXNlLFxuICAgICAgbGltaXRDbGF1c2UsXG4gICAgICBvZmZzZXRDbGF1c2VcbiAgICBdLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJylcblxuICAgIHJldHVybiB7IHF1ZXJ5LCBwYXJhbXM6IHRoaXMucGFyYW1ldGVycyB9XG4gIH1cblxuICBhc3luYyBleGVjdXRlPFQgZXh0ZW5kcyBRdWVyeVJlc3VsdFJvdyA9IGFueT4oKTogUHJvbWlzZTxRdWVyeVJlc3VsdDxUPj4ge1xuICAgIGNvbnN0IHsgcXVlcnksIHBhcmFtcyB9ID0gdGhpcy5idWlsZCgpXG4gICAgcmV0dXJuIGF3YWl0IGRiLnF1ZXJ5PFQ+KHF1ZXJ5LCBwYXJhbXMpXG4gIH1cblxuICBhc3luYyBmaXJzdDxUIGV4dGVuZHMgUXVlcnlSZXN1bHRSb3cgPSBhbnk+KCk6IFByb21pc2U8VCB8IG51bGw+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmxpbWl0KDEpLmV4ZWN1dGU8VD4oKVxuICAgIHJldHVybiByZXN1bHQucm93c1swXSB8fCBudWxsXG4gIH1cblxuICBhc3luYyBjb3VudCgpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGNvbnN0IG9yaWdpbmFsU2VsZWN0ID0gdGhpcy5zZWxlY3RGaWVsZHNcbiAgICB0aGlzLnNlbGVjdEZpZWxkcyA9IFsnQ09VTlQoKikgYXMgY291bnQnXVxuICAgIFxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZXhlY3V0ZTx7IGNvdW50OiBzdHJpbmcgfT4oKVxuICAgIHRoaXMuc2VsZWN0RmllbGRzID0gb3JpZ2luYWxTZWxlY3RcbiAgICBcbiAgICByZXR1cm4gcGFyc2VJbnQocmVzdWx0LnJvd3NbMF0/LmNvdW50IHx8ICcwJylcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGFuIHVwc2VydCBvcGVyYXRpb24gKGluc2VydCBvciB1cGRhdGUgaWYgZXhpc3RzKVxuICAgKi9cbiAgYXN5bmMgdXBzZXJ0KGRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4sIGNvbmZsaWN0VGFyZ2V0Pzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAvLyBVc2UgdGhlIEluc2VydEJ1aWxkZXIgd2l0aCBjb25mbGljdCBoYW5kbGluZ1xuICAgIGNvbnN0IGluc2VydEJ1aWxkZXIgPSBJbnNlcnRCdWlsZGVyLmludG8odGhpcy5mcm9tVGFibGUpXG4gICAgICAudmFsdWVzKGRhdGEpXG4gICAgXG4gICAgaWYgKGNvbmZsaWN0VGFyZ2V0KSB7XG4gICAgICAvLyBGb3Igbm93LCBkbyBhbiB1cGRhdGUgb24gY29uZmxpY3RcbiAgICAgIGluc2VydEJ1aWxkZXIub25Db25mbGljdERvVXBkYXRlKGNvbmZsaWN0VGFyZ2V0LCBkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUcnkgdG8gZGV0ZXJtaW5lIHByaW1hcnkga2V5IG9yIHVzZSAnaWQnIGFzIGRlZmF1bHRcbiAgICAgIGluc2VydEJ1aWxkZXIub25Db25mbGljdERvVXBkYXRlKCdpZCcsIGRhdGEpXG4gICAgfVxuICAgIFxuICAgIHJldHVybiBhd2FpdCBpbnNlcnRCdWlsZGVyLmV4ZWN1dGUoKVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnNlcnRCdWlsZGVyIHtcbiAgcHJpdmF0ZSB0YWJsZU5hbWU6IHN0cmluZyA9ICcnXG4gIHByaXZhdGUgaW5zZXJ0RGF0YTogUmVjb3JkPHN0cmluZywgYW55PltdID0gW11cbiAgcHJpdmF0ZSByZXR1cm5GaWVsZHM6IHN0cmluZ1tdID0gWycqJ11cbiAgcHJpdmF0ZSBjb25mbGljdEFjdGlvbj86ICdETyBOT1RISU5HJyB8ICdETyBVUERBVEUnXG4gIHByaXZhdGUgY29uZmxpY3RUYXJnZXQ/OiBzdHJpbmdcbiAgcHJpdmF0ZSB1cGRhdGVEYXRhPzogUmVjb3JkPHN0cmluZywgYW55PlxuXG4gIHN0YXRpYyBpbnRvKHRhYmxlTmFtZTogc3RyaW5nKTogSW5zZXJ0QnVpbGRlciB7XG4gICAgY29uc3QgYnVpbGRlciA9IG5ldyBJbnNlcnRCdWlsZGVyKClcbiAgICBidWlsZGVyLnRhYmxlTmFtZSA9IHRhYmxlTmFtZVxuICAgIHJldHVybiBidWlsZGVyXG4gIH1cblxuICB2YWx1ZXMoZGF0YTogUmVjb3JkPHN0cmluZywgYW55PiB8IFJlY29yZDxzdHJpbmcsIGFueT5bXSk6IEluc2VydEJ1aWxkZXIge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICB0aGlzLmluc2VydERhdGEgPSBkYXRhXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW5zZXJ0RGF0YSA9IFtkYXRhXVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgcmV0dXJuaW5nKGZpZWxkczogc3RyaW5nIHwgc3RyaW5nW10pOiBJbnNlcnRCdWlsZGVyIHtcbiAgICBpZiAodHlwZW9mIGZpZWxkcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMucmV0dXJuRmllbGRzID0gW2ZpZWxkc11cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZXR1cm5GaWVsZHMgPSBmaWVsZHNcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIG9uQ29uZmxpY3QodGFyZ2V0OiBzdHJpbmcsIGFjdGlvbjogJ0RPIE5PVEhJTkcnIHwgJ0RPIFVQREFURScsIHVwZGF0ZURhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogSW5zZXJ0QnVpbGRlciB7XG4gICAgdGhpcy5jb25mbGljdFRhcmdldCA9IHRhcmdldFxuICAgIHRoaXMuY29uZmxpY3RBY3Rpb24gPSBhY3Rpb25cbiAgICB0aGlzLnVwZGF0ZURhdGEgPSB1cGRhdGVEYXRhXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIG9uQ29uZmxpY3REb05vdGhpbmcodGFyZ2V0OiBzdHJpbmcpOiBJbnNlcnRCdWlsZGVyIHtcbiAgICByZXR1cm4gdGhpcy5vbkNvbmZsaWN0KHRhcmdldCwgJ0RPIE5PVEhJTkcnKVxuICB9XG5cbiAgb25Db25mbGljdERvVXBkYXRlKHRhcmdldDogc3RyaW5nLCB1cGRhdGVEYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogSW5zZXJ0QnVpbGRlciB7XG4gICAgcmV0dXJuIHRoaXMub25Db25mbGljdCh0YXJnZXQsICdETyBVUERBVEUnLCB1cGRhdGVEYXRhKVxuICB9XG5cbiAgYnVpbGQoKTogeyBxdWVyeTogc3RyaW5nOyBwYXJhbXM6IGFueVtdIH0ge1xuICAgIGlmICh0aGlzLmluc2VydERhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGRhdGEgcHJvdmlkZWQgZm9yIElOU0VSVCBvcGVyYXRpb24nKVxuICAgIH1cblxuICAgIC8vIEdldCBmaWVsZCBuYW1lcyBmcm9tIHRoZSBmaXJzdCByZWNvcmRcbiAgICBjb25zdCBmaWVsZHMgPSBPYmplY3Qua2V5cyh0aGlzLmluc2VydERhdGFbMF0pXG4gICAgY29uc3QgYWxsVmFsdWVzOiBhbnlbXSA9IFtdXG4gICAgXG4gICAgLy8gQnVpbGQgcGxhY2Vob2xkZXJzIGFuZCBjb2xsZWN0IGFsbCB2YWx1ZXNcbiAgICBjb25zdCB2YWx1ZVJvd3M6IHN0cmluZ1tdID0gW11cbiAgICBsZXQgcGFyYW1JbmRleCA9IDFcbiAgICBcbiAgICBmb3IgKGNvbnN0IHJlY29yZCBvZiB0aGlzLmluc2VydERhdGEpIHtcbiAgICAgIGNvbnN0IHJvd1BsYWNlaG9sZGVyczogc3RyaW5nW10gPSBbXVxuICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBmaWVsZHMpIHtcbiAgICAgICAgcm93UGxhY2Vob2xkZXJzLnB1c2goYCQke3BhcmFtSW5kZXh9YClcbiAgICAgICAgYWxsVmFsdWVzLnB1c2gocmVjb3JkW2ZpZWxkXSlcbiAgICAgICAgcGFyYW1JbmRleCsrXG4gICAgICB9XG4gICAgICB2YWx1ZVJvd3MucHVzaChgKCR7cm93UGxhY2Vob2xkZXJzLmpvaW4oJywgJyl9KWApXG4gICAgfVxuXG4gICAgbGV0IHF1ZXJ5ID0gYElOU0VSVCBJTlRPICR7dGhpcy50YWJsZU5hbWV9ICgke2ZpZWxkcy5qb2luKCcsICcpfSkgVkFMVUVTICR7dmFsdWVSb3dzLmpvaW4oJywgJyl9YFxuXG4gICAgLy8gQWRkIGNvbmZsaWN0IGhhbmRsaW5nXG4gICAgaWYgKHRoaXMuY29uZmxpY3RUYXJnZXQgJiYgdGhpcy5jb25mbGljdEFjdGlvbikge1xuICAgICAgcXVlcnkgKz0gYCBPTiBDT05GTElDVCAoJHt0aGlzLmNvbmZsaWN0VGFyZ2V0fSkgJHt0aGlzLmNvbmZsaWN0QWN0aW9ufWBcbiAgICAgIFxuICAgICAgaWYgKHRoaXMuY29uZmxpY3RBY3Rpb24gPT09ICdETyBVUERBVEUnICYmIHRoaXMudXBkYXRlRGF0YSkge1xuICAgICAgICBjb25zdCB1cGRhdGVGaWVsZHMgPSBPYmplY3Qua2V5cyh0aGlzLnVwZGF0ZURhdGEpXG4gICAgICAgIGNvbnN0IHVwZGF0ZUNsYXVzZSA9IHVwZGF0ZUZpZWxkcy5tYXAoZmllbGQgPT4gYCR7ZmllbGR9ID0gRVhDTFVERUQuJHtmaWVsZH1gKS5qb2luKCcsICcpXG4gICAgICAgIHF1ZXJ5ICs9IGAgU0VUICR7dXBkYXRlQ2xhdXNlfWBcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgUkVUVVJOSU5HIGNsYXVzZVxuICAgIGlmICh0aGlzLnJldHVybkZpZWxkcy5sZW5ndGggPiAwKSB7XG4gICAgICBxdWVyeSArPSBgIFJFVFVSTklORyAke3RoaXMucmV0dXJuRmllbGRzLmpvaW4oJywgJyl9YFxuICAgIH1cblxuICAgIHJldHVybiB7IHF1ZXJ5LCBwYXJhbXM6IGFsbFZhbHVlcyB9XG4gIH1cblxuICBhc3luYyBleGVjdXRlPFQgZXh0ZW5kcyBRdWVyeVJlc3VsdFJvdyA9IGFueT4oKTogUHJvbWlzZTxRdWVyeVJlc3VsdDxUPj4ge1xuICAgIGNvbnN0IHsgcXVlcnksIHBhcmFtcyB9ID0gdGhpcy5idWlsZCgpXG4gICAgcmV0dXJuIGF3YWl0IGRiLnF1ZXJ5PFQ+KHF1ZXJ5LCBwYXJhbXMpXG4gIH1cblxuICBhc3luYyBmaXJzdDxUIGV4dGVuZHMgUXVlcnlSZXN1bHRSb3cgPSBhbnk+KCk6IFByb21pc2U8VCB8IG51bGw+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmV4ZWN1dGU8VD4oKVxuICAgIHJldHVybiByZXN1bHQucm93c1swXSB8fCBudWxsXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVwZGF0ZUJ1aWxkZXIge1xuICBwcml2YXRlIHRhYmxlTmFtZTogc3RyaW5nID0gJydcbiAgcHJpdmF0ZSB1cGRhdGVEYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge31cbiAgcHJpdmF0ZSB3aGVyZUNvbmRpdGlvbnM6IFdoZXJlQ29uZGl0aW9uW10gPSBbXVxuICBwcml2YXRlIHJldHVybkZpZWxkczogc3RyaW5nW10gPSBbJyonXVxuICBwcml2YXRlIHBhcmFtZXRlcnM6IGFueVtdID0gW11cblxuICBzdGF0aWMgdGFibGUodGFibGVOYW1lOiBzdHJpbmcpOiBVcGRhdGVCdWlsZGVyIHtcbiAgICBjb25zdCBidWlsZGVyID0gbmV3IFVwZGF0ZUJ1aWxkZXIoKVxuICAgIGJ1aWxkZXIudGFibGVOYW1lID0gdGFibGVOYW1lXG4gICAgcmV0dXJuIGJ1aWxkZXJcbiAgfVxuXG4gIHNldChkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogVXBkYXRlQnVpbGRlciB7XG4gICAgdGhpcy51cGRhdGVEYXRhID0geyAuLi50aGlzLnVwZGF0ZURhdGEsIC4uLmRhdGEgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB3aGVyZShmaWVsZDogc3RyaW5nLCBvcGVyYXRvcjogV2hlcmVDb25kaXRpb25bJ29wZXJhdG9yJ10sIHZhbHVlPzogYW55KTogVXBkYXRlQnVpbGRlciB7XG4gICAgdGhpcy53aGVyZUNvbmRpdGlvbnMucHVzaCh7IGZpZWxkLCBvcGVyYXRvciwgdmFsdWUgfSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgcmV0dXJuaW5nKGZpZWxkczogc3RyaW5nIHwgc3RyaW5nW10pOiBVcGRhdGVCdWlsZGVyIHtcbiAgICBpZiAodHlwZW9mIGZpZWxkcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMucmV0dXJuRmllbGRzID0gW2ZpZWxkc11cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZXR1cm5GaWVsZHMgPSBmaWVsZHNcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIGJ1aWxkKCk6IHsgcXVlcnk6IHN0cmluZzsgcGFyYW1zOiBhbnlbXSB9IHtcbiAgICB0aGlzLnBhcmFtZXRlcnMgPSBbXVxuICAgIGxldCBwYXJhbUluZGV4ID0gMVxuXG4gICAgLy8gQnVpbGQgU0VUIGNsYXVzZVxuICAgIGNvbnN0IHVwZGF0ZUZpZWxkcyA9IE9iamVjdC5rZXlzKHRoaXMudXBkYXRlRGF0YSlcbiAgICBjb25zdCBzZXRDbGF1c2UgPSB1cGRhdGVGaWVsZHMubWFwKGZpZWxkID0+IHtcbiAgICAgIHRoaXMucGFyYW1ldGVycy5wdXNoKHRoaXMudXBkYXRlRGF0YVtmaWVsZF0pXG4gICAgICByZXR1cm4gYCR7ZmllbGR9ID0gJCR7cGFyYW1JbmRleCsrfWBcbiAgICB9KS5qb2luKCcsICcpXG5cbiAgICBsZXQgcXVlcnkgPSBgVVBEQVRFICR7dGhpcy50YWJsZU5hbWV9IFNFVCAke3NldENsYXVzZX1gXG5cbiAgICAvLyBCdWlsZCBXSEVSRSBjbGF1c2VcbiAgICBpZiAodGhpcy53aGVyZUNvbmRpdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgY29uZGl0aW9ucyA9IHRoaXMud2hlcmVDb25kaXRpb25zLm1hcChjb25kaXRpb24gPT4ge1xuICAgICAgICBpZiAoY29uZGl0aW9uLm9wZXJhdG9yID09PSAnSVMgTlVMTCcgfHwgY29uZGl0aW9uLm9wZXJhdG9yID09PSAnSVMgTk9UIE5VTEwnKSB7XG4gICAgICAgICAgcmV0dXJuIGAke2NvbmRpdGlvbi5maWVsZH0gJHtjb25kaXRpb24ub3BlcmF0b3J9YFxuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5wdXNoKGNvbmRpdGlvbi52YWx1ZSlcbiAgICAgICAgcmV0dXJuIGAke2NvbmRpdGlvbi5maWVsZH0gJHtjb25kaXRpb24ub3BlcmF0b3J9ICQke3BhcmFtSW5kZXgrK31gXG4gICAgICB9KVxuICAgICAgcXVlcnkgKz0gYCBXSEVSRSAke2NvbmRpdGlvbnMuam9pbignIEFORCAnKX1gXG4gICAgfVxuXG4gICAgLy8gQWRkIFJFVFVSTklORyBjbGF1c2VcbiAgICBpZiAodGhpcy5yZXR1cm5GaWVsZHMubGVuZ3RoID4gMCkge1xuICAgICAgcXVlcnkgKz0gYCBSRVRVUk5JTkcgJHt0aGlzLnJldHVybkZpZWxkcy5qb2luKCcsICcpfWBcbiAgICB9XG5cbiAgICByZXR1cm4geyBxdWVyeSwgcGFyYW1zOiB0aGlzLnBhcmFtZXRlcnMgfVxuICB9XG5cbiAgYXN5bmMgZXhlY3V0ZTxUIGV4dGVuZHMgUXVlcnlSZXN1bHRSb3cgPSBhbnk+KCk6IFByb21pc2U8UXVlcnlSZXN1bHQ8VD4+IHtcbiAgICBjb25zdCB7IHF1ZXJ5LCBwYXJhbXMgfSA9IHRoaXMuYnVpbGQoKVxuICAgIHJldHVybiBhd2FpdCBkYi5xdWVyeTxUPihxdWVyeSwgcGFyYW1zKVxuICB9XG5cbiAgYXN5bmMgZmlyc3Q8VCBleHRlbmRzIFF1ZXJ5UmVzdWx0Um93ID0gYW55PigpOiBQcm9taXNlPFQgfCBudWxsPiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5leGVjdXRlPFQ+KClcbiAgICByZXR1cm4gcmVzdWx0LnJvd3NbMF0gfHwgbnVsbFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEZWxldGVCdWlsZGVyIHtcbiAgcHJpdmF0ZSB0YWJsZU5hbWU6IHN0cmluZyA9ICcnXG4gIHByaXZhdGUgd2hlcmVDb25kaXRpb25zOiBXaGVyZUNvbmRpdGlvbltdID0gW11cbiAgcHJpdmF0ZSByZXR1cm5GaWVsZHM6IHN0cmluZ1tdID0gWycqJ11cbiAgcHJpdmF0ZSBwYXJhbWV0ZXJzOiBhbnlbXSA9IFtdXG5cbiAgc3RhdGljIGZyb20odGFibGVOYW1lOiBzdHJpbmcpOiBEZWxldGVCdWlsZGVyIHtcbiAgICBjb25zdCBidWlsZGVyID0gbmV3IERlbGV0ZUJ1aWxkZXIoKVxuICAgIGJ1aWxkZXIudGFibGVOYW1lID0gdGFibGVOYW1lXG4gICAgcmV0dXJuIGJ1aWxkZXJcbiAgfVxuXG4gIHdoZXJlKGZpZWxkOiBzdHJpbmcsIG9wZXJhdG9yOiBXaGVyZUNvbmRpdGlvblsnb3BlcmF0b3InXSwgdmFsdWU/OiBhbnkpOiBEZWxldGVCdWlsZGVyIHtcbiAgICB0aGlzLndoZXJlQ29uZGl0aW9ucy5wdXNoKHsgZmllbGQsIG9wZXJhdG9yLCB2YWx1ZSB9KVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICByZXR1cm5pbmcoZmllbGRzOiBzdHJpbmcgfCBzdHJpbmdbXSk6IERlbGV0ZUJ1aWxkZXIge1xuICAgIGlmICh0eXBlb2YgZmllbGRzID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5yZXR1cm5GaWVsZHMgPSBbZmllbGRzXVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJldHVybkZpZWxkcyA9IGZpZWxkc1xuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgYnVpbGQoKTogeyBxdWVyeTogc3RyaW5nOyBwYXJhbXM6IGFueVtdIH0ge1xuICAgIHRoaXMucGFyYW1ldGVycyA9IFtdXG4gICAgbGV0IHBhcmFtSW5kZXggPSAxXG5cbiAgICBsZXQgcXVlcnkgPSBgREVMRVRFIEZST00gJHt0aGlzLnRhYmxlTmFtZX1gXG5cbiAgICAvLyBCdWlsZCBXSEVSRSBjbGF1c2VcbiAgICBpZiAodGhpcy53aGVyZUNvbmRpdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgY29uZGl0aW9ucyA9IHRoaXMud2hlcmVDb25kaXRpb25zLm1hcChjb25kaXRpb24gPT4ge1xuICAgICAgICBpZiAoY29uZGl0aW9uLm9wZXJhdG9yID09PSAnSVMgTlVMTCcgfHwgY29uZGl0aW9uLm9wZXJhdG9yID09PSAnSVMgTk9UIE5VTEwnKSB7XG4gICAgICAgICAgcmV0dXJuIGAke2NvbmRpdGlvbi5maWVsZH0gJHtjb25kaXRpb24ub3BlcmF0b3J9YFxuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5wdXNoKGNvbmRpdGlvbi52YWx1ZSlcbiAgICAgICAgcmV0dXJuIGAke2NvbmRpdGlvbi5maWVsZH0gJHtjb25kaXRpb24ub3BlcmF0b3J9ICQke3BhcmFtSW5kZXgrK31gXG4gICAgICB9KVxuICAgICAgcXVlcnkgKz0gYCBXSEVSRSAke2NvbmRpdGlvbnMuam9pbignIEFORCAnKX1gXG4gICAgfVxuXG4gICAgLy8gQWRkIFJFVFVSTklORyBjbGF1c2VcbiAgICBpZiAodGhpcy5yZXR1cm5GaWVsZHMubGVuZ3RoID4gMCkge1xuICAgICAgcXVlcnkgKz0gYCBSRVRVUk5JTkcgJHt0aGlzLnJldHVybkZpZWxkcy5qb2luKCcsICcpfWBcbiAgICB9XG5cbiAgICByZXR1cm4geyBxdWVyeSwgcGFyYW1zOiB0aGlzLnBhcmFtZXRlcnMgfVxuICB9XG5cbiAgYXN5bmMgZXhlY3V0ZTxUIGV4dGVuZHMgUXVlcnlSZXN1bHRSb3cgPSBhbnk+KCk6IFByb21pc2U8UXVlcnlSZXN1bHQ8VD4+IHtcbiAgICBjb25zdCB7IHF1ZXJ5LCBwYXJhbXMgfSA9IHRoaXMuYnVpbGQoKVxuICAgIHJldHVybiBhd2FpdCBkYi5xdWVyeTxUPihxdWVyeSwgcGFyYW1zKVxuICB9XG5cbiAgYXN5bmMgZmlyc3Q8VCBleHRlbmRzIFF1ZXJ5UmVzdWx0Um93ID0gYW55PigpOiBQcm9taXNlPFQgfCBudWxsPiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5leGVjdXRlPFQ+KClcbiAgICByZXR1cm4gcmVzdWx0LnJvd3NbMF0gfHwgbnVsbFxuICB9XG59XG5cbi8vIEV4cG9ydCBjb252ZW5pZW5jZSBmdW5jdGlvbnNcbmV4cG9ydCBjb25zdCBxdWVyeSA9IFF1ZXJ5QnVpbGRlci50YWJsZVxuZXhwb3J0IGNvbnN0IGluc2VydCA9IEluc2VydEJ1aWxkZXIuaW50b1xuZXhwb3J0IGNvbnN0IHVwZGF0ZSA9IFVwZGF0ZUJ1aWxkZXIudGFibGVcbmV4cG9ydCBjb25zdCBkZWxldGVGcm9tID0gRGVsZXRlQnVpbGRlci5mcm9tIl0sIm5hbWVzIjpbImRiIiwiUXVlcnlCdWlsZGVyIiwidGFibGUiLCJ0YWJsZU5hbWUiLCJidWlsZGVyIiwiZnJvbVRhYmxlIiwic2VsZWN0IiwiZmllbGRzIiwic2VsZWN0RmllbGRzIiwid2hlcmUiLCJmaWVsZCIsIm9wZXJhdG9yIiwidmFsdWUiLCJ3aGVyZUNvbmRpdGlvbnMiLCJwdXNoIiwid2hlcmVJbiIsInZhbHVlcyIsIndoZXJlTm90SW4iLCJ3aGVyZU51bGwiLCJ3aGVyZU5vdE51bGwiLCJvcmRlckJ5IiwiZGlyZWN0aW9uIiwib3JkZXJCeUZpZWxkcyIsImpvaW4iLCJvbiIsInR5cGUiLCJqb2luQ2xhdXNlcyIsImxlZnRKb2luIiwibGltaXQiLCJjb3VudCIsImxpbWl0Q291bnQiLCJvZmZzZXQiLCJvZmZzZXRDb3VudCIsImJ1aWxkIiwicGFyYW1ldGVycyIsInBhcmFtSW5kZXgiLCJzZWxlY3RDbGF1c2UiLCJmcm9tQ2xhdXNlIiwibGVuZ3RoIiwibWFwIiwid2hlcmVDbGF1c2UiLCJjb25kaXRpb25zIiwiY29uZGl0aW9uIiwiRXJyb3IiLCJwbGFjZWhvbGRlcnMiLCJvcmRlckJ5Q2xhdXNlIiwib3JkZXJGaWVsZHMiLCJvcmRlciIsImxpbWl0Q2xhdXNlIiwidW5kZWZpbmVkIiwib2Zmc2V0Q2xhdXNlIiwicXVlcnkiLCJmaWx0ZXIiLCJCb29sZWFuIiwicGFyYW1zIiwiZXhlY3V0ZSIsImZpcnN0IiwicmVzdWx0Iiwicm93cyIsIm9yaWdpbmFsU2VsZWN0IiwicGFyc2VJbnQiLCJ1cHNlcnQiLCJkYXRhIiwiY29uZmxpY3RUYXJnZXQiLCJpbnNlcnRCdWlsZGVyIiwiSW5zZXJ0QnVpbGRlciIsImludG8iLCJvbkNvbmZsaWN0RG9VcGRhdGUiLCJBcnJheSIsImlzQXJyYXkiLCJpbnNlcnREYXRhIiwicmV0dXJuaW5nIiwicmV0dXJuRmllbGRzIiwib25Db25mbGljdCIsInRhcmdldCIsImFjdGlvbiIsInVwZGF0ZURhdGEiLCJjb25mbGljdEFjdGlvbiIsIm9uQ29uZmxpY3REb05vdGhpbmciLCJPYmplY3QiLCJrZXlzIiwiYWxsVmFsdWVzIiwidmFsdWVSb3dzIiwicmVjb3JkIiwicm93UGxhY2Vob2xkZXJzIiwidXBkYXRlRmllbGRzIiwidXBkYXRlQ2xhdXNlIiwiVXBkYXRlQnVpbGRlciIsInNldCIsInNldENsYXVzZSIsIkRlbGV0ZUJ1aWxkZXIiLCJmcm9tIiwiaW5zZXJ0IiwidXBkYXRlIiwiZGVsZXRlRnJvbSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/db-query-builder.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeDatabase: () => (/* binding */ closeDatabase),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   initializeDatabase: () => (/* binding */ initializeDatabase),\n/* harmony export */   logToDatabase: () => (/* binding */ logToDatabase),\n/* harmony export */   sql: () => (/* reexport safe */ _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__.sql)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/postgres */ \"(rsc)/./node_modules/@vercel/postgres/dist/index-node.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nclass DatabaseConnection {\n    constructor(){\n        this.pool = null;\n        this.isVercel = false;\n        this.isVercel = !!process.env.POSTGRES_URL;\n    }\n    getConfig() {\n        if (this.isVercel) {\n            return {\n                host: process.env.POSTGRES_HOST,\n                port: 5432,\n                database: process.env.POSTGRES_DATABASE,\n                user: process.env.POSTGRES_USER,\n                password: process.env.POSTGRES_PASSWORD,\n                ssl: true,\n                max: 20,\n                idleTimeoutMillis: 30000,\n                connectionTimeoutMillis: 2000\n            };\n        }\n        return {\n            host: process.env.DATABASE_HOST || 'localhost',\n            port: parseInt(process.env.DATABASE_PORT || '5432'),\n            database: process.env.DATABASE_NAME || 'hotdog_diaries_dev',\n            user: process.env.DATABASE_USER || 'postgres',\n            password: process.env.DATABASE_PASSWORD || 'password',\n            ssl: false,\n            max: 10,\n            idleTimeoutMillis: 30000,\n            connectionTimeoutMillis: 2000\n        };\n    }\n    async connect() {\n        if (this.pool) {\n            return;\n        }\n        const config = this.getConfig();\n        this.pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool(config);\n        this.pool.on('error', (err)=>{\n            console.error('Unexpected database error on idle client', err);\n        });\n        this.pool.on('connect', ()=>{\n            console.log('Database connection established');\n        });\n        this.pool.on('remove', ()=>{\n            console.log('Database connection removed');\n        });\n        try {\n            const client = await this.pool.connect();\n            await client.query('SELECT NOW()');\n            client.release();\n            console.log('Database connection successful');\n        } catch (error) {\n            console.error('Database connection failed:', error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        if (this.pool) {\n            await this.pool.end();\n            this.pool = null;\n            console.log('Database connection closed');\n        }\n    }\n    async query(text, params) {\n        if (this.isVercel) {\n            return await _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__.sql.query(text, params || []);\n        }\n        if (!this.pool) {\n            await this.connect();\n        }\n        const start = Date.now();\n        try {\n            const result = await this.pool.query(text, params);\n            const duration = Date.now() - start;\n            console.log('Query executed', {\n                text,\n                duration,\n                rows: result.rowCount\n            });\n            return result;\n        } catch (error) {\n            const duration = Date.now() - start;\n            console.error('Query error', {\n                text,\n                duration,\n                error\n            });\n            throw error;\n        }\n    }\n    async getClient() {\n        if (this.isVercel) {\n            throw new Error('Client connections not supported in Vercel environment');\n        }\n        if (!this.pool) {\n            throw new Error('Database not connected');\n        }\n        return await this.pool.connect();\n    }\n    async healthCheck() {\n        try {\n            const start = Date.now();\n            await this.query('SELECT 1 as health_check');\n            const latency = Date.now() - start;\n            return {\n                connected: true,\n                latency\n            };\n        } catch (error) {\n            return {\n                connected: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    async transaction(callback) {\n        if (this.isVercel) {\n            throw new Error('Transactions not supported in Vercel environment with @vercel/postgres');\n        }\n        const client = await this.getClient();\n        try {\n            await client.query('BEGIN');\n            const result = await callback(client);\n            await client.query('COMMIT');\n            return result;\n        } catch (error) {\n            await client.query('ROLLBACK');\n            throw error;\n        } finally{\n            client.release();\n        }\n    }\n}\nconst db = new DatabaseConnection();\nasync function initializeDatabase() {\n    try {\n        await db.connect();\n        console.log('Database initialized successfully');\n    } catch (error) {\n        console.error('Failed to initialize database:', error);\n        throw error;\n    }\n}\nasync function closeDatabase() {\n    try {\n        await db.disconnect();\n        console.log('Database closed successfully');\n    } catch (error) {\n        console.error('Failed to close database:', error);\n        throw error;\n    }\n}\nasync function logToDatabase(level, message, component, metadata) {\n    try {\n        // Convert LogLevel enum to database-compatible string\n        let dbLevel;\n        switch(level){\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.DEBUG:\n                dbLevel = 'debug';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.INFO:\n                dbLevel = 'info';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.WARN:\n                dbLevel = 'warning';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR:\n                dbLevel = 'error';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.FATAL:\n                dbLevel = 'error'; // Map FATAL to error since it's not in constraint\n                break;\n            default:\n                dbLevel = 'info';\n        }\n        await db.query(`INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n       VALUES ($1, $2, $3, $4, NOW())`, [\n            dbLevel,\n            message,\n            component,\n            metadata ? JSON.stringify(metadata) : null\n        ]);\n    } catch (error) {\n        console.error('Failed to log to database:', error);\n    }\n}\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/content.ts":
/*!*********************************!*\
  !*** ./lib/services/content.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentService: () => (/* binding */ ContentService)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\n/* harmony import */ var _lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/db-query-builder */ \"(rsc)/./lib/db-query-builder.ts\");\n/* harmony import */ var _lib_utils_content_hash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/utils/content-hash */ \"(rsc)/./lib/utils/content-hash.ts\");\n/* harmony import */ var _lib_validation_content__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/validation/content */ \"(rsc)/./lib/validation/content.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _lib_db_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/db-helpers */ \"(rsc)/./lib/db-helpers.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__, _lib_db__WEBPACK_IMPORTED_MODULE_4__, _lib_db_helpers__WEBPACK_IMPORTED_MODULE_5__]);\n([_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__, _lib_db__WEBPACK_IMPORTED_MODULE_4__, _lib_db_helpers__WEBPACK_IMPORTED_MODULE_5__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\nclass ContentService {\n    /**\n   * Create new content and add to queue\n   */ static async createContent(data) {\n        // Validate input data\n        const validation = (0,_lib_validation_content__WEBPACK_IMPORTED_MODULE_3__.validateContent)(data);\n        if (!validation.isValid) {\n            const errorMessage = validation.errors.map((e)=>`${e.field}: ${e.message}`).join(', ');\n            throw new Error(`Validation failed: ${errorMessage}`);\n        }\n        // Generate content hash for duplicate detection\n        const contentHash = (0,_lib_utils_content_hash__WEBPACK_IMPORTED_MODULE_2__.generateContentHash)({\n            content_text: data.content_text,\n            content_image_url: data.content_image_url,\n            content_video_url: data.content_video_url,\n            original_url: data.original_url\n        });\n        // Check for duplicate content\n        const existingContent = await this.findByHash(contentHash);\n        if (existingContent) {\n            throw new Error(`Duplicate content detected. Existing content ID: ${existingContent.id}`);\n        }\n        try {\n            // Insert new content\n            const newContent = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.insert)('content_queue').values({\n                content_text: data.content_text,\n                content_image_url: data.content_image_url,\n                content_video_url: data.content_video_url,\n                content_type: data.content_type,\n                source_platform: data.source_platform,\n                original_url: data.original_url,\n                original_author: data.original_author,\n                scraped_at: new Date(),\n                content_hash: contentHash,\n                is_posted: false,\n                is_approved: data.is_approved ?? false,\n                admin_notes: data.admin_notes,\n                created_at: new Date(),\n                updated_at: new Date()\n            }).first();\n            if (!newContent) {\n                throw new Error('Failed to create content');\n            }\n            // Log content creation\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_4__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.INFO, `Content created: ${newContent.id}`, 'content-service', {\n                contentId: newContent.id,\n                contentType: newContent.content_type,\n                sourcePlatform: newContent.source_platform,\n                isApproved: newContent.is_approved\n            });\n            return newContent;\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_4__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.ERROR, `Failed to create content: ${error instanceof Error ? error.message : 'Unknown error'}`, 'content-service', {\n                data,\n                error: error instanceof Error ? error.stack : error\n            });\n            throw error;\n        }\n    }\n    /**\n   * Get queued (unposted) content with pagination and filters\n   */ static async getQueuedContent(pagination, filters = {}) {\n        const { page, limit, orderBy = 'scraped_at', orderDirection = 'DESC' } = pagination;\n        const offset = (page - 1) * limit;\n        let queryBuilder = (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('content_queue').select([\n            '*'\n        ]).where('is_posted', '=', false);\n        // Apply filters\n        if (filters.content_type) {\n            queryBuilder = queryBuilder.where('content_type', '=', filters.content_type);\n        }\n        if (filters.source_platform) {\n            queryBuilder = queryBuilder.where('source_platform', '=', filters.source_platform);\n        }\n        if (filters.is_approved !== undefined) {\n            queryBuilder = queryBuilder.where('is_approved', '=', filters.is_approved);\n        }\n        if (filters.author) {\n            queryBuilder = queryBuilder.where('original_author', 'ILIKE', `%${filters.author}%`);\n        }\n        // Get total count for pagination\n        const totalCount = await queryBuilder.count();\n        // Get paginated results\n        const items = await queryBuilder.orderBy(orderBy, orderDirection).limit(limit).offset(offset).execute();\n        const totalPages = Math.ceil(totalCount / limit);\n        return {\n            items: items.rows,\n            pagination: {\n                page,\n                limit,\n                total: totalCount,\n                totalPages,\n                hasNextPage: page < totalPages,\n                hasPreviousPage: page > 1\n            }\n        };\n    }\n    /**\n   * Get posted content with pagination and filters\n   */ static async getPostedContent(pagination, filters = {}) {\n        const { page, limit, orderBy = 'posted_at', orderDirection = 'DESC' } = pagination;\n        const offset = (page - 1) * limit;\n        let queryBuilder = (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('posted_content_with_details').select([\n            '*'\n        ]);\n        // Apply filters\n        if (filters.content_type) {\n            queryBuilder = queryBuilder.where('content_type', '=', filters.content_type);\n        }\n        if (filters.source_platform) {\n            queryBuilder = queryBuilder.where('source_platform', '=', filters.source_platform);\n        }\n        if (filters.author) {\n            queryBuilder = queryBuilder.where('original_author', 'ILIKE', `%${filters.author}%`);\n        }\n        // Get total count for pagination\n        const totalCount = await queryBuilder.count();\n        // Get paginated results\n        const items = await queryBuilder.orderBy(orderBy, orderDirection).limit(limit).offset(offset).execute();\n        const totalPages = Math.ceil(totalCount / limit);\n        return {\n            items: items.rows,\n            pagination: {\n                page,\n                limit,\n                total: totalCount,\n                totalPages,\n                hasNextPage: page < totalPages,\n                hasPreviousPage: page > 1\n            }\n        };\n    }\n    /**\n   * Mark content as posted and create posted_content record\n   */ static async markAsPosted(contentId, scheduledTime) {\n        try {\n            // Verify content exists and is not already posted\n            const content = await this.findById(contentId);\n            if (!content) {\n                throw new Error(`Content with ID ${contentId} not found`);\n            }\n            if (content.is_posted) {\n                throw new Error(`Content with ID ${contentId} is already posted`);\n            }\n            // Get next post order for today\n            const postOrder = await _lib_db_helpers__WEBPACK_IMPORTED_MODULE_5__.PostedContentHelper.getNextPostOrder();\n            // Use transaction to ensure consistency\n            const updatedContent = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.update)('content_queue').set({\n                is_posted: true,\n                posted_at: new Date(),\n                updated_at: new Date()\n            }).where('id', '=', contentId).first();\n            if (!updatedContent) {\n                throw new Error('Failed to update content as posted');\n            }\n            // Create posted content record\n            const postedContent = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.insert)('posted_content').values({\n                content_queue_id: contentId,\n                posted_at: new Date(),\n                scheduled_time: scheduledTime,\n                post_order: postOrder,\n                created_at: new Date(),\n                updated_at: new Date()\n            }).first();\n            if (!postedContent) {\n                throw new Error('Failed to create posted content record');\n            }\n            // Log posting\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_4__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.INFO, `Content marked as posted: ${contentId}`, 'content-service', {\n                contentId,\n                postOrder,\n                scheduledTime\n            });\n            return {\n                contentQueue: updatedContent,\n                postedContent\n            };\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_4__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.ERROR, `Failed to mark content as posted: ${error instanceof Error ? error.message : 'Unknown error'}`, 'content-service', {\n                contentId,\n                error: error instanceof Error ? error.stack : error\n            });\n            throw error;\n        }\n    }\n    /**\n   * Delete content from queue\n   */ static async deleteContent(contentId) {\n        try {\n            // Check if content exists\n            const content = await this.findById(contentId);\n            if (!content) {\n                throw new Error(`Content with ID ${contentId} not found`);\n            }\n            // Check if content is already posted\n            if (content.is_posted) {\n                throw new Error(`Cannot delete posted content with ID ${contentId}`);\n            }\n            // Delete the content\n            const deletedContent = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.deleteFrom)('content_queue').where('id', '=', contentId).first();\n            if (!deletedContent) {\n                throw new Error('Failed to delete content');\n            }\n            // Log deletion\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_4__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.INFO, `Content deleted: ${contentId}`, 'content-service', {\n                contentId,\n                contentType: deletedContent.content_type,\n                sourcePlatform: deletedContent.source_platform\n            });\n            return deletedContent;\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_4__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.ERROR, `Failed to delete content: ${error instanceof Error ? error.message : 'Unknown error'}`, 'content-service', {\n                contentId,\n                error: error instanceof Error ? error.stack : error\n            });\n            throw error;\n        }\n    }\n    /**\n   * Update content in queue\n   */ static async updateContent(contentId, updates) {\n        try {\n            // Check if content exists\n            const content = await this.findById(contentId);\n            if (!content) {\n                throw new Error(`Content with ID ${contentId} not found`);\n            }\n            // Check if content is already posted\n            if (content.is_posted) {\n                throw new Error(`Cannot update posted content with ID ${contentId}`);\n            }\n            // Regenerate hash if content fields changed\n            const updateData = {\n                ...updates,\n                updated_at: new Date()\n            };\n            if (updates.content_text !== undefined || updates.content_image_url !== undefined || updates.content_video_url !== undefined || updates.original_url !== undefined) {\n                const newHash = (0,_lib_utils_content_hash__WEBPACK_IMPORTED_MODULE_2__.generateContentHash)({\n                    content_text: updates.content_text ?? content.content_text,\n                    content_image_url: updates.content_image_url ?? content.content_image_url,\n                    content_video_url: updates.content_video_url ?? content.content_video_url,\n                    original_url: updates.original_url ?? content.original_url\n                });\n                // Check for duplicate with new hash\n                const existingContent = await this.findByHash(newHash);\n                if (existingContent && existingContent.id !== contentId) {\n                    throw new Error(`Duplicate content detected. Existing content ID: ${existingContent.id}`);\n                }\n                updateData.content_hash = newHash;\n            }\n            // Update the content\n            const updatedContent = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.update)('content_queue').set(updateData).where('id', '=', contentId).first();\n            if (!updatedContent) {\n                throw new Error('Failed to update content');\n            }\n            // Log update\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_4__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.INFO, `Content updated: ${contentId}`, 'content-service', {\n                contentId,\n                updates: Object.keys(updates)\n            });\n            return updatedContent;\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_4__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.ERROR, `Failed to update content: ${error instanceof Error ? error.message : 'Unknown error'}`, 'content-service', {\n                contentId,\n                updates,\n                error: error instanceof Error ? error.stack : error\n            });\n            throw error;\n        }\n    }\n    /**\n   * Find content by ID\n   */ static async findById(id) {\n        return await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('content_queue').where('id', '=', id).first();\n    }\n    /**\n   * Find content by hash (for duplicate detection)\n   */ static async findByHash(hash) {\n        return await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('content_queue').where('content_hash', '=', hash).first();\n    }\n    /**\n   * Get content statistics\n   */ static async getStats() {\n        const [total, queued, approved, posted, today] = await Promise.all([\n            (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('content_queue').count(),\n            (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('content_queue').where('is_posted', '=', false).count(),\n            (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('content_queue').where('is_approved', '=', true).count(),\n            (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('content_queue').where('is_posted', '=', true).count(),\n            (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('posted_content').where('posted_at', '>=', new Date(new Date().setHours(0, 0, 0, 0))).count()\n        ]);\n        return {\n            totalContent: total,\n            queuedContent: queued,\n            approvedContent: approved,\n            postedContent: posted,\n            todaysPosts: today\n        };\n    }\n    /**\n   * Approve content for posting\n   */ static async approveContent(contentId, adminNotes) {\n        return await this.updateContent(contentId, {\n            is_approved: true,\n            admin_notes: adminNotes\n        });\n    }\n    /**\n   * Reject content (mark as not approved)\n   */ static async rejectContent(contentId, adminNotes) {\n        return await this.updateContent(contentId, {\n            is_approved: false,\n            admin_notes: adminNotes\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/content.ts\n");

/***/ }),

/***/ "(rsc)/./lib/utils/content-hash.ts":
/*!***********************************!*\
  !*** ./lib/utils/content-hash.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentHasher: () => (/* binding */ ContentHasher),\n/* harmony export */   checkContentSimilarity: () => (/* binding */ checkContentSimilarity),\n/* harmony export */   generateContentHash: () => (/* binding */ generateContentHash)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nclass ContentHasher {\n    /**\n   * Generate a SHA-256 hash for content to detect duplicates\n   */ static generateHash(content) {\n        // Normalize content by removing whitespace and converting to lowercase\n        const normalizedText = content.content_text ? this.normalizeText(content.content_text) : '';\n        const normalizedImageUrl = content.content_image_url ? this.normalizeUrl(content.content_image_url) : '';\n        const normalizedVideoUrl = content.content_video_url ? this.normalizeUrl(content.content_video_url) : '';\n        const normalizedOriginalUrl = this.normalizeUrl(content.original_url);\n        // Combine all content fields for hashing\n        const combinedContent = [\n            normalizedText,\n            normalizedImageUrl,\n            normalizedVideoUrl,\n            normalizedOriginalUrl\n        ].filter(Boolean).join('|');\n        return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('sha256').update(combinedContent, 'utf8').digest('hex');\n    }\n    /**\n   * Generate a hash based only on the original URL for loose duplicate detection\n   */ static generateUrlHash(originalUrl) {\n        const normalizedUrl = this.normalizeUrl(originalUrl);\n        return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('sha256').update(normalizedUrl, 'utf8').digest('hex');\n    }\n    /**\n   * Normalize text content for consistent hashing\n   */ static normalizeText(text) {\n        return text.toLowerCase().replace(/\\s+/g, ' ') // Replace multiple whitespace with single space\n        .replace(/[^\\w\\s]/g, '') // Remove punctuation\n        .trim();\n    }\n    /**\n   * Normalize URLs for consistent hashing\n   */ static normalizeUrl(url) {\n        try {\n            const urlObj = new URL(url);\n            // Remove common tracking parameters\n            const trackingParams = [\n                'utm_source',\n                'utm_medium',\n                'utm_campaign',\n                'utm_term',\n                'utm_content',\n                'fbclid',\n                'gclid',\n                'ref',\n                'source',\n                's',\n                't',\n                'igshid'\n            ];\n            trackingParams.forEach((param)=>{\n                urlObj.searchParams.delete(param);\n            });\n            // Sort search parameters for consistency\n            urlObj.searchParams.sort();\n            // Remove fragment (hash)\n            urlObj.hash = '';\n            // Normalize path (remove trailing slashes)\n            urlObj.pathname = urlObj.pathname.replace(/\\/+$/, '') || '/';\n            return urlObj.toString().toLowerCase();\n        } catch  {\n            // If URL parsing fails, just normalize the string\n            return url.toLowerCase().trim();\n        }\n    }\n    /**\n   * Check if two content items are likely duplicates based on similarity\n   */ static areSimilar(content1, content2) {\n        // Check if URLs are exactly the same (after normalization)\n        const url1 = this.normalizeUrl(content1.original_url);\n        const url2 = this.normalizeUrl(content2.original_url);\n        if (url1 === url2) {\n            return true;\n        }\n        // Check if image/video URLs are the same\n        if (content1.content_image_url && content2.content_image_url) {\n            const img1 = this.normalizeUrl(content1.content_image_url);\n            const img2 = this.normalizeUrl(content2.content_image_url);\n            if (img1 === img2) {\n                return true;\n            }\n        }\n        if (content1.content_video_url && content2.content_video_url) {\n            const vid1 = this.normalizeUrl(content1.content_video_url);\n            const vid2 = this.normalizeUrl(content2.content_video_url);\n            if (vid1 === vid2) {\n                return true;\n            }\n        }\n        // Check text similarity if both have text content\n        if (content1.content_text && content2.content_text) {\n            const text1 = this.normalizeText(content1.content_text);\n            const text2 = this.normalizeText(content2.content_text);\n            // Consider similar if normalized text is identical or very similar\n            if (text1 === text2) {\n                return true;\n            }\n            // Check for substantial overlap (>80% similarity)\n            const similarity = this.calculateTextSimilarity(text1, text2);\n            if (similarity > 0.8) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n   * Calculate text similarity using Jaccard similarity\n   */ static calculateTextSimilarity(text1, text2) {\n        const words1 = new Set(text1.split(' ').filter((word)=>word.length > 2));\n        const words2 = new Set(text2.split(' ').filter((word)=>word.length > 2));\n        const intersection = new Set([\n            ...words1\n        ].filter((word)=>words2.has(word)));\n        const union = new Set([\n            ...words1,\n            ...words2\n        ]);\n        return union.size === 0 ? 0 : intersection.size / union.size;\n    }\n    /**\n   * Generate multiple hashes for different duplicate detection strategies\n   */ static generateMultipleHashes(content) {\n        const contentHash = this.generateHash(content);\n        const urlHash = this.generateUrlHash(content.original_url);\n        let textHash;\n        if (content.content_text) {\n            textHash = crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('sha256').update(this.normalizeText(content.content_text), 'utf8').digest('hex');\n        }\n        let mediaHash;\n        const mediaUrl = content.content_image_url || content.content_video_url;\n        if (mediaUrl) {\n            mediaHash = crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('sha256').update(this.normalizeUrl(mediaUrl), 'utf8').digest('hex');\n        }\n        return {\n            contentHash,\n            urlHash,\n            textHash,\n            mediaHash\n        };\n    }\n}\nfunction generateContentHash(content) {\n    return ContentHasher.generateHash(content);\n}\nfunction checkContentSimilarity(content1, content2) {\n    return ContentHasher.areSimilar(content1, content2);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils/content-hash.ts\n");

/***/ }),

/***/ "(rsc)/./lib/validation/content.ts":
/*!***********************************!*\
  !*** ./lib/validation/content.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentValidator: () => (/* binding */ ContentValidator),\n/* harmony export */   validateContent: () => (/* binding */ validateContent),\n/* harmony export */   validateContentUpdate: () => (/* binding */ validateContentUpdate)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\n\nclass ContentValidator {\n    static validate(data) {\n        const errors = [];\n        // Validate content type\n        if (!Object.values(_types__WEBPACK_IMPORTED_MODULE_0__.ContentType).includes(data.content_type)) {\n            errors.push({\n                field: 'content_type',\n                message: `Invalid content type. Must be one of: ${Object.values(_types__WEBPACK_IMPORTED_MODULE_0__.ContentType).join(', ')}`\n            });\n        }\n        // Validate source platform\n        if (!Object.values(_types__WEBPACK_IMPORTED_MODULE_0__.SourcePlatform).includes(data.source_platform)) {\n            errors.push({\n                field: 'source_platform',\n                message: `Invalid source platform. Must be one of: ${Object.values(_types__WEBPACK_IMPORTED_MODULE_0__.SourcePlatform).join(', ')}`\n            });\n        }\n        // Validate original URL\n        if (!data.original_url || !this.isValidUrl(data.original_url)) {\n            errors.push({\n                field: 'original_url',\n                message: 'Valid original URL is required'\n            });\n        }\n        // Validate that at least one content field is provided\n        const hasContent = data.content_text || data.content_image_url || data.content_video_url;\n        if (!hasContent) {\n            errors.push({\n                field: 'content',\n                message: 'At least one of content_text, content_image_url, or content_video_url is required'\n            });\n        }\n        // Validate content type matches provided content\n        this.validateContentTypeMatches(data, errors);\n        // Validate URLs if provided\n        if (data.content_image_url && !this.isValidImageUrl(data.content_image_url)) {\n            errors.push({\n                field: 'content_image_url',\n                message: 'Invalid image URL format'\n            });\n        }\n        if (data.content_video_url && !this.isValidVideoUrl(data.content_video_url)) {\n            errors.push({\n                field: 'content_video_url',\n                message: 'Invalid video URL format'\n            });\n        }\n        // Validate text content length\n        if (data.content_text && data.content_text.length > 5000) {\n            errors.push({\n                field: 'content_text',\n                message: 'Content text must be 5000 characters or less'\n            });\n        }\n        // Validate original author length\n        if (data.original_author && data.original_author.length > 255) {\n            errors.push({\n                field: 'original_author',\n                message: 'Original author must be 255 characters or less'\n            });\n        }\n        return errors;\n    }\n    static validateUpdate(data) {\n        const errors = [];\n        // Validate content type if provided\n        if (data.content_type && !Object.values(_types__WEBPACK_IMPORTED_MODULE_0__.ContentType).includes(data.content_type)) {\n            errors.push({\n                field: 'content_type',\n                message: `Invalid content type. Must be one of: ${Object.values(_types__WEBPACK_IMPORTED_MODULE_0__.ContentType).join(', ')}`\n            });\n        }\n        // Validate URLs if provided\n        if (data.content_image_url && !this.isValidImageUrl(data.content_image_url)) {\n            errors.push({\n                field: 'content_image_url',\n                message: 'Invalid image URL format'\n            });\n        }\n        if (data.content_video_url && !this.isValidVideoUrl(data.content_video_url)) {\n            errors.push({\n                field: 'content_video_url',\n                message: 'Invalid video URL format'\n            });\n        }\n        // Validate text content length\n        if (data.content_text && data.content_text.length > 5000) {\n            errors.push({\n                field: 'content_text',\n                message: 'Content text must be 5000 characters or less'\n            });\n        }\n        return errors;\n    }\n    static validateContentTypeMatches(data, errors) {\n        const { content_type, content_text, content_image_url, content_video_url } = data;\n        switch(content_type){\n            case _types__WEBPACK_IMPORTED_MODULE_0__.ContentType.TEXT:\n                if (!content_text) {\n                    errors.push({\n                        field: 'content_text',\n                        message: 'content_text is required for text content type'\n                    });\n                }\n                if (content_image_url || content_video_url) {\n                    errors.push({\n                        field: 'content_type',\n                        message: 'Text content type should not include image or video URLs'\n                    });\n                }\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_0__.ContentType.IMAGE:\n                if (!content_image_url) {\n                    errors.push({\n                        field: 'content_image_url',\n                        message: 'content_image_url is required for image content type'\n                    });\n                }\n                if (content_video_url) {\n                    errors.push({\n                        field: 'content_type',\n                        message: 'Image content type should not include video URL'\n                    });\n                }\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_0__.ContentType.VIDEO:\n                if (!content_video_url) {\n                    errors.push({\n                        field: 'content_video_url',\n                        message: 'content_video_url is required for video content type'\n                    });\n                }\n                if (content_image_url) {\n                    errors.push({\n                        field: 'content_type',\n                        message: 'Video content type should not include image URL'\n                    });\n                }\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_0__.ContentType.MIXED:\n                break;\n        }\n    }\n    static isValidUrl(url) {\n        try {\n            const urlObj = new URL(url);\n            return urlObj.protocol === 'http:' || urlObj.protocol === 'https:';\n        } catch  {\n            return false;\n        }\n    }\n    static isValidImageUrl(url) {\n        if (!this.isValidUrl(url)) return false;\n        const imageExtensions = [\n            '.jpg',\n            '.jpeg',\n            '.png',\n            '.gif',\n            '.webp',\n            '.svg'\n        ];\n        const urlLower = url.toLowerCase();\n        // Check if URL ends with image extension or contains image patterns\n        return imageExtensions.some((ext)=>urlLower.includes(ext)) || urlLower.includes('image') || urlLower.includes('photo') || urlLower.includes('picture') || this.isImageHostingService(url);\n    }\n    static isValidVideoUrl(url) {\n        if (!this.isValidUrl(url)) return false;\n        const videoExtensions = [\n            '.mp4',\n            '.webm',\n            '.ogg',\n            '.mov',\n            '.avi'\n        ];\n        const urlLower = url.toLowerCase();\n        // Check if URL ends with video extension or is from known video platforms\n        return videoExtensions.some((ext)=>urlLower.includes(ext)) || this.isVideoHostingService(url);\n    }\n    static isImageHostingService(url) {\n        const imageHosts = [\n            'imgur.com',\n            'i.redd.it',\n            'pbs.twimg.com',\n            'instagram.com',\n            'cdn.discordapp.com',\n            'media.giphy.com'\n        ];\n        return imageHosts.some((host)=>url.includes(host));\n    }\n    static isVideoHostingService(url) {\n        const videoHosts = [\n            'youtube.com',\n            'youtu.be',\n            'vimeo.com',\n            'tiktok.com',\n            'instagram.com',\n            'twitter.com',\n            'v.redd.it',\n            'gfycat.com',\n            'streamable.com'\n        ];\n        return videoHosts.some((host)=>url.includes(host));\n    }\n}\nfunction validateContent(data) {\n    const errors = ContentValidator.validate(data);\n    return {\n        isValid: errors.length === 0,\n        errors\n    };\n}\nfunction validateContentUpdate(data) {\n    const errors = ContentValidator.validateUpdate(data);\n    return {\n        isValid: errors.length === 0,\n        errors\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/validation/content.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fcontent%2Froute&page=%2Fapi%2Fcontent%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcontent%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fcontent%2Froute&page=%2Fapi%2Fcontent%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcontent%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_adamshaw_Development_websites_hotdog_diaries_app_api_content_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/content/route.ts */ \"(rsc)/./app/api/content/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Users_adamshaw_Development_websites_hotdog_diaries_app_api_content_route_ts__WEBPACK_IMPORTED_MODULE_16__]);\n_Users_adamshaw_Development_websites_hotdog_diaries_app_api_content_route_ts__WEBPACK_IMPORTED_MODULE_16__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/content/route\",\n        pathname: \"/api/content\",\n        filename: \"route\",\n        bundlePath: \"app/api/content/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"/Users/adamshaw/Development/websites/hotdog-diaries/app/api/content/route.ts\",\n    nextConfigOutput,\n    userland: _Users_adamshaw_Development_websites_hotdog_diaries_app_api_content_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/content/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fcontent%2Froute&page=%2Fapi%2Fcontent%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcontent%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./types/index.ts":
/*!************************!*\
  !*** ./types/index.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentType: () => (/* binding */ ContentType),\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   SourcePlatform: () => (/* binding */ SourcePlatform)\n/* harmony export */ });\n// Enums\nvar ContentType = /*#__PURE__*/ function(ContentType) {\n    ContentType[\"TEXT\"] = \"text\";\n    ContentType[\"IMAGE\"] = \"image\";\n    ContentType[\"VIDEO\"] = \"video\";\n    ContentType[\"MIXED\"] = \"mixed\";\n    return ContentType;\n}({});\nvar SourcePlatform = /*#__PURE__*/ function(SourcePlatform) {\n    SourcePlatform[\"REDDIT\"] = \"reddit\";\n    SourcePlatform[\"YOUTUBE\"] = \"youtube\";\n    SourcePlatform[\"FLICKR\"] = \"flickr\";\n    SourcePlatform[\"UNSPLASH\"] = \"unsplash\";\n    SourcePlatform[\"NEWS\"] = \"news\";\n    SourcePlatform[\"MASTODON\"] = \"mastodon\";\n    return SourcePlatform;\n}({});\nvar LogLevel = /*#__PURE__*/ function(LogLevel) {\n    LogLevel[\"DEBUG\"] = \"debug\";\n    LogLevel[\"INFO\"] = \"info\";\n    LogLevel[\"WARN\"] = \"warn\";\n    LogLevel[\"ERROR\"] = \"error\";\n    LogLevel[\"FATAL\"] = \"fatal\";\n    return LogLevel;\n}({});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi90eXBlcy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUEwRkEsUUFBUTtBQUNELHlDQUFLQTs7Ozs7V0FBQUE7TUFLWDtBQUVNLDRDQUFLQzs7Ozs7OztXQUFBQTtNQU9YO0FBRU0sc0NBQUtDOzs7Ozs7V0FBQUE7TUFNWCIsInNvdXJjZXMiOlsiL1VzZXJzL2FkYW1zaGF3L0RldmVsb3BtZW50L3dlYnNpdGVzL2hvdGRvZy1kaWFyaWVzL3R5cGVzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoQ2hlY2tSZXNwb25zZSB7XG4gIHN0YXR1czogJ2hlYWx0aHknIHwgJ3VuaGVhbHRoeSdcbiAgdGltZXN0YW1wOiBzdHJpbmdcbiAgc2VydmljZTogc3RyaW5nXG4gIHZlcnNpb24/OiBzdHJpbmdcbiAgdXB0aW1lPzogbnVtYmVyXG4gIGVudmlyb25tZW50Pzogc3RyaW5nXG4gIGNoZWNrcz86IHtcbiAgICBkYXRhYmFzZT86IHN0cmluZ1xuICAgIHNvY2lhbE1lZGlhU2Nhbm5lcj86IHN0cmluZ1xuICAgIGNvbnRlbnRTY2hlZHVsZXI/OiBzdHJpbmdcbiAgfVxuICBlcnJvcj86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhvdGRvZ1Bvc3Qge1xuICBpZDogc3RyaW5nXG4gIGNvbnRlbnQ6IHN0cmluZ1xuICBpbWFnZVVybD86IHN0cmluZ1xuICBzb3VyY2U6ICdyZWRkaXQnIHwgJ3lvdXR1YmUnIHwgJ2ZsaWNrcicgfCAndW5zcGxhc2gnIHwgJ25ld3MnIHwgJ21hc3RvZG9uJ1xuICBzb3VyY2VVcmw6IHN0cmluZ1xuICB0aW1lc3RhbXA6IHN0cmluZ1xuICBlbmdhZ2VtZW50OiB7XG4gICAgbGlrZXM6IG51bWJlclxuICAgIHNoYXJlczogbnVtYmVyXG4gICAgY29tbWVudHM6IG51bWJlclxuICB9XG4gIHByb2Nlc3NlZDogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdkl0ZW0ge1xuICBocmVmOiBzdHJpbmdcbiAgbGFiZWw6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwaVJlc3BvbnNlPFQgPSBhbnk+IHtcbiAgc3VjY2VzczogYm9vbGVhblxuICBkYXRhPzogVFxuICBlcnJvcj86IHN0cmluZ1xuICBtZXNzYWdlPzogc3RyaW5nXG59XG5cbi8vIERhdGFiYXNlIEVudGl0eSBUeXBlc1xuZXhwb3J0IGludGVyZmFjZSBDb250ZW50UXVldWUge1xuICBpZDogbnVtYmVyXG4gIGNvbnRlbnRfdGV4dD86IHN0cmluZ1xuICBjb250ZW50X2ltYWdlX3VybD86IHN0cmluZ1xuICBjb250ZW50X3ZpZGVvX3VybD86IHN0cmluZ1xuICBjb250ZW50X3R5cGU6IENvbnRlbnRUeXBlXG4gIHNvdXJjZV9wbGF0Zm9ybTogU291cmNlUGxhdGZvcm1cbiAgb3JpZ2luYWxfdXJsOiBzdHJpbmdcbiAgb3JpZ2luYWxfYXV0aG9yPzogc3RyaW5nXG4gIHNjcmFwZWRfYXQ6IERhdGVcbiAgY29udGVudF9oYXNoOiBzdHJpbmdcbiAgaXNfcG9zdGVkOiBib29sZWFuXG4gIHBvc3RlZF9hdD86IERhdGVcbiAgaXNfYXBwcm92ZWQ6IGJvb2xlYW5cbiAgYWRtaW5fbm90ZXM/OiBzdHJpbmdcbiAgY3JlYXRlZF9hdDogRGF0ZVxuICB1cGRhdGVkX2F0OiBEYXRlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zdGVkQ29udGVudCB7XG4gIGlkOiBudW1iZXJcbiAgY29udGVudF9xdWV1ZV9pZDogbnVtYmVyXG4gIHBvc3RlZF9hdDogRGF0ZVxuICBzY2hlZHVsZWRfdGltZT86IERhdGVcbiAgcG9zdF9vcmRlcjogbnVtYmVyXG4gIGNyZWF0ZWRfYXQ6IERhdGVcbiAgdXBkYXRlZF9hdDogRGF0ZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN5c3RlbUxvZyB7XG4gIGlkOiBudW1iZXJcbiAgbG9nX2xldmVsOiBMb2dMZXZlbFxuICBtZXNzYWdlOiBzdHJpbmdcbiAgY29tcG9uZW50OiBzdHJpbmdcbiAgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gIGNyZWF0ZWRfYXQ6IERhdGVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBZG1pblVzZXIge1xuICBpZDogbnVtYmVyXG4gIHVzZXJuYW1lOiBzdHJpbmdcbiAgcGFzc3dvcmRfaGFzaDogc3RyaW5nXG4gIGxhc3RfbG9naW4/OiBEYXRlXG4gIGNyZWF0ZWRfYXQ6IERhdGVcbiAgdXBkYXRlZF9hdDogRGF0ZVxufVxuXG4vLyBFbnVtc1xuZXhwb3J0IGVudW0gQ29udGVudFR5cGUge1xuICBURVhUID0gJ3RleHQnLFxuICBJTUFHRSA9ICdpbWFnZScsXG4gIFZJREVPID0gJ3ZpZGVvJyxcbiAgTUlYRUQgPSAnbWl4ZWQnXG59XG5cbmV4cG9ydCBlbnVtIFNvdXJjZVBsYXRmb3JtIHtcbiAgUkVERElUID0gJ3JlZGRpdCcsXG4gIFlPVVRVQkUgPSAneW91dHViZScsXG4gIEZMSUNLUiA9ICdmbGlja3InLFxuICBVTlNQTEFTSCA9ICd1bnNwbGFzaCcsXG4gIE5FV1MgPSAnbmV3cycsXG4gIE1BU1RPRE9OID0gJ21hc3RvZG9uJ1xufVxuXG5leHBvcnQgZW51bSBMb2dMZXZlbCB7XG4gIERFQlVHID0gJ2RlYnVnJyxcbiAgSU5GTyA9ICdpbmZvJyxcbiAgV0FSTiA9ICd3YXJuJyxcbiAgRVJST1IgPSAnZXJyb3InLFxuICBGQVRBTCA9ICdmYXRhbCdcbn1cblxuLy8gQVBJIFJlcXVlc3QvUmVzcG9uc2UgVHlwZXNcbmV4cG9ydCBpbnRlcmZhY2UgQ29udGVudEFwaVJlc3BvbnNlIHtcbiAgc3VjY2VzczogYm9vbGVhblxuICBkYXRhOiB7XG4gICAgY29udGVudDogUG9zdGVkQ29udGVudFtdXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgcGFnZTogbnVtYmVyXG4gICAgICBsaW1pdDogbnVtYmVyXG4gICAgICB0b3RhbDogbnVtYmVyXG4gICAgICB0b3RhbFBhZ2VzOiBudW1iZXJcbiAgICB9XG4gIH1cbiAgbWVzc2FnZT86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFiYXNlSGVhbHRoQ2hlY2sge1xuICBjb25uZWN0ZWQ6IGJvb2xlYW5cbiAgbGF0ZW5jeT86IG51bWJlclxuICBlcnJvcj86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVuaGFuY2VkSGVhbHRoUmVzcG9uc2UgZXh0ZW5kcyBIZWFsdGhDaGVja1Jlc3BvbnNlIHtcbiAgY2hlY2tzOiB7XG4gICAgZGF0YWJhc2U6IERhdGFiYXNlSGVhbHRoQ2hlY2tcbiAgICBzb2NpYWxNZWRpYVNjYW5uZXI/OiBzdHJpbmdcbiAgICBjb250ZW50U2NoZWR1bGVyPzogc3RyaW5nXG4gIH1cbn0iXSwibmFtZXMiOlsiQ29udGVudFR5cGUiLCJTb3VyY2VQbGF0Zm9ybSIsIkxvZ0xldmVsIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./types/index.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = import("pg");;

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/ws","vendor-chunks/@vercel","vendor-chunks/node-gyp-build","vendor-chunks/bufferutil","vendor-chunks/bcryptjs","vendor-chunks/@neondatabase"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fcontent%2Froute&page=%2Fapi%2Fcontent%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcontent%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();