/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/admin/mastodon/test/route";
exports.ids = ["app/api/admin/mastodon/test/route"];
exports.modules = {

/***/ "(rsc)/./app/api/admin/mastodon/test/route.ts":
/*!**********************************************!*\
  !*** ./app/api/admin/mastodon/test/route.ts ***!
  \**********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_services_mastodon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/services/mastodon */ \"(rsc)/./lib/services/mastodon.ts\");\n/* harmony import */ var _lib_services_mastodon_scanning__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/services/mastodon-scanning */ \"(rsc)/./lib/services/mastodon-scanning.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_services_mastodon__WEBPACK_IMPORTED_MODULE_1__, _lib_services_mastodon_scanning__WEBPACK_IMPORTED_MODULE_2__]);\n([_lib_services_mastodon__WEBPACK_IMPORTED_MODULE_1__, _lib_services_mastodon_scanning__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nasync function GET(request) {\n    try {\n        const [scanningStats, instanceStats, recentScans, contentToday, totalContent] = await Promise.all([\n            _lib_services_mastodon_scanning__WEBPACK_IMPORTED_MODULE_2__.mastodonScanningService.getScanningStats(),\n            _lib_services_mastodon__WEBPACK_IMPORTED_MODULE_1__.mastodonService.getInstanceStats(),\n            _lib_services_mastodon_scanning__WEBPACK_IMPORTED_MODULE_2__.mastodonScanningService.getRecentScanResults(5),\n            _lib_services_mastodon_scanning__WEBPACK_IMPORTED_MODULE_2__.mastodonScanningService.getContentAddedToday(),\n            _lib_services_mastodon_scanning__WEBPACK_IMPORTED_MODULE_2__.mastodonScanningService.getTotalContentCount()\n        ]);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: {\n                scanningStats,\n                instanceStats,\n                recentScans,\n                contentToday,\n                totalContent,\n                platform: 'mastodon'\n            }\n        });\n    } catch (error) {\n        console.error('Mastodon test error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error',\n            stack: error instanceof Error ? error.stack : undefined\n        }, {\n            status: 500\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2FkbWluL21hc3RvZG9uL3Rlc3Qvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF1RDtBQUNFO0FBQ2lCO0FBRW5FLGVBQWVHLElBQUlDLE9BQW9CO0lBQzVDLElBQUk7UUFDRixNQUFNLENBQUNDLGVBQWVDLGVBQWVDLGFBQWFDLGNBQWNDLGFBQWEsR0FBRyxNQUFNQyxRQUFRQyxHQUFHLENBQUM7WUFDaEdULG9GQUF1QkEsQ0FBQ1UsZ0JBQWdCO1lBQ3hDWCxtRUFBZUEsQ0FBQ1ksZ0JBQWdCO1lBQ2hDWCxvRkFBdUJBLENBQUNZLG9CQUFvQixDQUFDO1lBQzdDWixvRkFBdUJBLENBQUNhLG9CQUFvQjtZQUM1Q2Isb0ZBQXVCQSxDQUFDYyxvQkFBb0I7U0FDN0M7UUFFRCxPQUFPaEIscURBQVlBLENBQUNpQixJQUFJLENBQUM7WUFDdkJDLFNBQVM7WUFDVEMsTUFBTTtnQkFDSmQ7Z0JBQ0FDO2dCQUNBQztnQkFDQUM7Z0JBQ0FDO2dCQUNBVyxVQUFVO1lBQ1o7UUFDRjtJQUNGLEVBQUUsT0FBT0MsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsd0JBQXdCQTtRQUN0QyxPQUFPckIscURBQVlBLENBQUNpQixJQUFJLENBQUM7WUFDdkJDLFNBQVM7WUFDVEcsT0FBT0EsaUJBQWlCRSxRQUFRRixNQUFNRyxPQUFPLEdBQUc7WUFDaERDLE9BQU9KLGlCQUFpQkUsUUFBUUYsTUFBTUksS0FBSyxHQUFHQztRQUNoRCxHQUFHO1lBQUVDLFFBQVE7UUFBSTtJQUNuQjtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvYWRhbXNoYXcvRGV2ZWxvcG1lbnQvd2Vic2l0ZXMvaG90ZG9nLWRpYXJpZXMvYXBwL2FwaS9hZG1pbi9tYXN0b2Rvbi90ZXN0L3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcidcbmltcG9ydCB7IG1hc3RvZG9uU2VydmljZSB9IGZyb20gJ0AvbGliL3NlcnZpY2VzL21hc3RvZG9uJ1xuaW1wb3J0IHsgbWFzdG9kb25TY2FubmluZ1NlcnZpY2UgfSBmcm9tICdAL2xpYi9zZXJ2aWNlcy9tYXN0b2Rvbi1zY2FubmluZydcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCk6IFByb21pc2U8TmV4dFJlc3BvbnNlPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgW3NjYW5uaW5nU3RhdHMsIGluc3RhbmNlU3RhdHMsIHJlY2VudFNjYW5zLCBjb250ZW50VG9kYXksIHRvdGFsQ29udGVudF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICBtYXN0b2RvblNjYW5uaW5nU2VydmljZS5nZXRTY2FubmluZ1N0YXRzKCksXG4gICAgICBtYXN0b2RvblNlcnZpY2UuZ2V0SW5zdGFuY2VTdGF0cygpLFxuICAgICAgbWFzdG9kb25TY2FubmluZ1NlcnZpY2UuZ2V0UmVjZW50U2NhblJlc3VsdHMoNSksXG4gICAgICBtYXN0b2RvblNjYW5uaW5nU2VydmljZS5nZXRDb250ZW50QWRkZWRUb2RheSgpLFxuICAgICAgbWFzdG9kb25TY2FubmluZ1NlcnZpY2UuZ2V0VG90YWxDb250ZW50Q291bnQoKVxuICAgIF0pXG4gICAgXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHNjYW5uaW5nU3RhdHMsXG4gICAgICAgIGluc3RhbmNlU3RhdHMsXG4gICAgICAgIHJlY2VudFNjYW5zLFxuICAgICAgICBjb250ZW50VG9kYXksXG4gICAgICAgIHRvdGFsQ29udGVudCxcbiAgICAgICAgcGxhdGZvcm06ICdtYXN0b2RvbidcbiAgICAgIH1cbiAgICB9KVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ01hc3RvZG9uIHRlc3QgZXJyb3I6JywgZXJyb3IpXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxuICAgICAgc3RhY2s6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5zdGFjayA6IHVuZGVmaW5lZFxuICAgIH0sIHsgc3RhdHVzOiA1MDAgfSlcbiAgfVxufSJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJtYXN0b2RvblNlcnZpY2UiLCJtYXN0b2RvblNjYW5uaW5nU2VydmljZSIsIkdFVCIsInJlcXVlc3QiLCJzY2FubmluZ1N0YXRzIiwiaW5zdGFuY2VTdGF0cyIsInJlY2VudFNjYW5zIiwiY29udGVudFRvZGF5IiwidG90YWxDb250ZW50IiwiUHJvbWlzZSIsImFsbCIsImdldFNjYW5uaW5nU3RhdHMiLCJnZXRJbnN0YW5jZVN0YXRzIiwiZ2V0UmVjZW50U2NhblJlc3VsdHMiLCJnZXRDb250ZW50QWRkZWRUb2RheSIsImdldFRvdGFsQ29udGVudENvdW50IiwianNvbiIsInN1Y2Nlc3MiLCJkYXRhIiwicGxhdGZvcm0iLCJlcnJvciIsImNvbnNvbGUiLCJFcnJvciIsIm1lc3NhZ2UiLCJzdGFjayIsInVuZGVmaW5lZCIsInN0YXR1cyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/admin/mastodon/test/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeDatabase: () => (/* binding */ closeDatabase),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   initializeDatabase: () => (/* binding */ initializeDatabase),\n/* harmony export */   logToDatabase: () => (/* binding */ logToDatabase),\n/* harmony export */   sql: () => (/* reexport safe */ _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__.sql)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/postgres */ \"(rsc)/./node_modules/@vercel/postgres/dist/index-node.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nclass DatabaseConnection {\n    constructor(){\n        this.pool = null;\n        this.isVercel = false;\n        this.isVercel = !!process.env.POSTGRES_URL;\n    }\n    getConfig() {\n        if (this.isVercel) {\n            return {\n                host: process.env.POSTGRES_HOST,\n                port: 5432,\n                database: process.env.POSTGRES_DATABASE,\n                user: process.env.POSTGRES_USER,\n                password: process.env.POSTGRES_PASSWORD,\n                ssl: true,\n                max: 20,\n                idleTimeoutMillis: 30000,\n                connectionTimeoutMillis: 2000\n            };\n        }\n        return {\n            host: process.env.DATABASE_HOST || 'localhost',\n            port: parseInt(process.env.DATABASE_PORT || '5432'),\n            database: process.env.DATABASE_NAME || 'hotdog_diaries_dev',\n            user: process.env.DATABASE_USER || 'postgres',\n            password: process.env.DATABASE_PASSWORD || 'password',\n            ssl: false,\n            max: 10,\n            idleTimeoutMillis: 30000,\n            connectionTimeoutMillis: 2000\n        };\n    }\n    async connect() {\n        if (this.pool) {\n            return;\n        }\n        const config = this.getConfig();\n        this.pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool(config);\n        this.pool.on('error', (err)=>{\n            console.error('Unexpected database error on idle client', err);\n        });\n        this.pool.on('connect', ()=>{\n            console.log('Database connection established');\n        });\n        this.pool.on('remove', ()=>{\n            console.log('Database connection removed');\n        });\n        try {\n            const client = await this.pool.connect();\n            await client.query('SELECT NOW()');\n            client.release();\n            console.log('Database connection successful');\n        } catch (error) {\n            console.error('Database connection failed:', error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        if (this.pool) {\n            await this.pool.end();\n            this.pool = null;\n            console.log('Database connection closed');\n        }\n    }\n    async query(text, params) {\n        if (this.isVercel) {\n            return await _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__.sql.query(text, params || []);\n        }\n        if (!this.pool) {\n            await this.connect();\n        }\n        const start = Date.now();\n        try {\n            const result = await this.pool.query(text, params);\n            const duration = Date.now() - start;\n            console.log('Query executed', {\n                text,\n                duration,\n                rows: result.rowCount\n            });\n            return result;\n        } catch (error) {\n            const duration = Date.now() - start;\n            console.error('Query error', {\n                text,\n                duration,\n                error\n            });\n            throw error;\n        }\n    }\n    async getClient() {\n        if (this.isVercel) {\n            throw new Error('Client connections not supported in Vercel environment');\n        }\n        if (!this.pool) {\n            throw new Error('Database not connected');\n        }\n        return await this.pool.connect();\n    }\n    async healthCheck() {\n        try {\n            const start = Date.now();\n            await this.query('SELECT 1 as health_check');\n            const latency = Date.now() - start;\n            return {\n                connected: true,\n                latency\n            };\n        } catch (error) {\n            return {\n                connected: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    async transaction(callback) {\n        if (this.isVercel) {\n            throw new Error('Transactions not supported in Vercel environment with @vercel/postgres');\n        }\n        const client = await this.getClient();\n        try {\n            await client.query('BEGIN');\n            const result = await callback(client);\n            await client.query('COMMIT');\n            return result;\n        } catch (error) {\n            await client.query('ROLLBACK');\n            throw error;\n        } finally{\n            client.release();\n        }\n    }\n}\nconst db = new DatabaseConnection();\nasync function initializeDatabase() {\n    try {\n        await db.connect();\n        console.log('Database initialized successfully');\n    } catch (error) {\n        console.error('Failed to initialize database:', error);\n        throw error;\n    }\n}\nasync function closeDatabase() {\n    try {\n        await db.disconnect();\n        console.log('Database closed successfully');\n    } catch (error) {\n        console.error('Failed to close database:', error);\n        throw error;\n    }\n}\nasync function logToDatabase(level, message, component, metadata) {\n    try {\n        // Convert LogLevel enum to database-compatible string\n        let dbLevel;\n        switch(level){\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.DEBUG:\n                dbLevel = 'debug';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.INFO:\n                dbLevel = 'info';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.WARN:\n                dbLevel = 'warning';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR:\n                dbLevel = 'error';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.FATAL:\n                dbLevel = 'error'; // Map FATAL to error since it's not in constraint\n                break;\n            default:\n                dbLevel = 'info';\n        }\n        await db.query(`INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n       VALUES ($1, $2, $3, $4, NOW())`, [\n            dbLevel,\n            message,\n            component,\n            metadata ? JSON.stringify(metadata) : null\n        ]);\n    } catch (error) {\n        console.error('Failed to log to database:', error);\n    }\n}\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDNEI7WUFBU1Y7WUFBU1E7WUFBV0MsV0FBV08sS0FBS0MsU0FBUyxDQUFDUixZQUFZO1NBQUs7SUFFN0UsRUFBRSxPQUFPOUIsT0FBTztRQUNkRCxRQUFRQyxLQUFLLENBQUMsOEJBQThCQTtJQUM5QztBQUNGO0FBRXNDIiwic291cmNlcyI6WyIvVXNlcnMvYWRhbXNoYXcvRGV2ZWxvcG1lbnQvd2Vic2l0ZXMvaG90ZG9nLWRpYXJpZXMvbGliL2RiLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvb2wsIFBvb2xDbGllbnQsIFF1ZXJ5UmVzdWx0IH0gZnJvbSAncGcnXG5pbXBvcnQgeyBzcWwgfSBmcm9tICdAdmVyY2VsL3Bvc3RncmVzJ1xuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tICdAL3R5cGVzJ1xuXG5pbnRlcmZhY2UgRGF0YWJhc2VDb25maWcge1xuICBob3N0OiBzdHJpbmdcbiAgcG9ydDogbnVtYmVyXG4gIGRhdGFiYXNlOiBzdHJpbmdcbiAgdXNlcjogc3RyaW5nXG4gIHBhc3N3b3JkOiBzdHJpbmdcbiAgc3NsPzogYm9vbGVhblxuICBtYXg/OiBudW1iZXJcbiAgaWRsZVRpbWVvdXRNaWxsaXM/OiBudW1iZXJcbiAgY29ubmVjdGlvblRpbWVvdXRNaWxsaXM/OiBudW1iZXJcbn1cblxuY2xhc3MgRGF0YWJhc2VDb25uZWN0aW9uIHtcbiAgcHJpdmF0ZSBwb29sOiBQb29sIHwgbnVsbCA9IG51bGxcbiAgcHJpdmF0ZSBpc1ZlcmNlbDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pc1ZlcmNlbCA9ICEhcHJvY2Vzcy5lbnYuUE9TVEdSRVNfVVJMXG4gIH1cblxuICBwcml2YXRlIGdldENvbmZpZygpOiBEYXRhYmFzZUNvbmZpZyB7XG4gICAgaWYgKHRoaXMuaXNWZXJjZWwpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhvc3Q6IHByb2Nlc3MuZW52LlBPU1RHUkVTX0hPU1QhLFxuICAgICAgICBwb3J0OiA1NDMyLFxuICAgICAgICBkYXRhYmFzZTogcHJvY2Vzcy5lbnYuUE9TVEdSRVNfREFUQUJBU0UhLFxuICAgICAgICB1c2VyOiBwcm9jZXNzLmVudi5QT1NUR1JFU19VU0VSISxcbiAgICAgICAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52LlBPU1RHUkVTX1BBU1NXT1JEISxcbiAgICAgICAgc3NsOiB0cnVlLFxuICAgICAgICBtYXg6IDIwLFxuICAgICAgICBpZGxlVGltZW91dE1pbGxpczogMzAwMDAsXG4gICAgICAgIGNvbm5lY3Rpb25UaW1lb3V0TWlsbGlzOiAyMDAwLFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBob3N0OiBwcm9jZXNzLmVudi5EQVRBQkFTRV9IT1NUIHx8ICdsb2NhbGhvc3QnLFxuICAgICAgcG9ydDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuREFUQUJBU0VfUE9SVCB8fCAnNTQzMicpLFxuICAgICAgZGF0YWJhc2U6IHByb2Nlc3MuZW52LkRBVEFCQVNFX05BTUUgfHwgJ2hvdGRvZ19kaWFyaWVzX2RldicsXG4gICAgICB1c2VyOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VU0VSIHx8ICdwb3N0Z3JlcycsXG4gICAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuREFUQUJBU0VfUEFTU1dPUkQgfHwgJ3Bhc3N3b3JkJyxcbiAgICAgIHNzbDogZmFsc2UsXG4gICAgICBtYXg6IDEwLFxuICAgICAgaWRsZVRpbWVvdXRNaWxsaXM6IDMwMDAwLFxuICAgICAgY29ubmVjdGlvblRpbWVvdXRNaWxsaXM6IDIwMDAsXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY29ubmVjdCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5wb29sKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpXG4gICAgdGhpcy5wb29sID0gbmV3IFBvb2woY29uZmlnKVxuXG4gICAgdGhpcy5wb29sLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuZXhwZWN0ZWQgZGF0YWJhc2UgZXJyb3Igb24gaWRsZSBjbGllbnQnLCBlcnIpXG4gICAgfSlcblxuICAgIHRoaXMucG9vbC5vbignY29ubmVjdCcsICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdEYXRhYmFzZSBjb25uZWN0aW9uIGVzdGFibGlzaGVkJylcbiAgICB9KVxuXG4gICAgdGhpcy5wb29sLm9uKCdyZW1vdmUnLCAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnRGF0YWJhc2UgY29ubmVjdGlvbiByZW1vdmVkJylcbiAgICB9KVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IHRoaXMucG9vbC5jb25uZWN0KClcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnU0VMRUNUIE5PVygpJylcbiAgICAgIGNsaWVudC5yZWxlYXNlKClcbiAgICAgIGNvbnNvbGUubG9nKCdEYXRhYmFzZSBjb25uZWN0aW9uIHN1Y2Nlc3NmdWwnKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSBjb25uZWN0aW9uIGZhaWxlZDonLCBlcnJvcilcbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGlzY29ubmVjdCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5wb29sKSB7XG4gICAgICBhd2FpdCB0aGlzLnBvb2wuZW5kKClcbiAgICAgIHRoaXMucG9vbCA9IG51bGxcbiAgICAgIGNvbnNvbGUubG9nKCdEYXRhYmFzZSBjb25uZWN0aW9uIGNsb3NlZCcpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcXVlcnk8VCA9IGFueT4odGV4dDogc3RyaW5nLCBwYXJhbXM/OiBhbnlbXSk6IFByb21pc2U8UXVlcnlSZXN1bHQ8VD4+IHtcbiAgICBpZiAodGhpcy5pc1ZlcmNlbCkge1xuICAgICAgcmV0dXJuIGF3YWl0IHNxbC5xdWVyeSh0ZXh0LCBwYXJhbXMgfHwgW10pIGFzIFF1ZXJ5UmVzdWx0PFQ+XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnBvb2wpIHtcbiAgICAgIGF3YWl0IHRoaXMuY29ubmVjdCgpXG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucG9vbC5xdWVyeTxUPih0ZXh0LCBwYXJhbXMpXG4gICAgICBjb25zdCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBzdGFydFxuICAgICAgY29uc29sZS5sb2coJ1F1ZXJ5IGV4ZWN1dGVkJywgeyB0ZXh0LCBkdXJhdGlvbiwgcm93czogcmVzdWx0LnJvd0NvdW50IH0pXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIHN0YXJ0XG4gICAgICBjb25zb2xlLmVycm9yKCdRdWVyeSBlcnJvcicsIHsgdGV4dCwgZHVyYXRpb24sIGVycm9yIH0pXG4gICAgICB0aHJvdyBlcnJvclxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldENsaWVudCgpOiBQcm9taXNlPFBvb2xDbGllbnQ+IHtcbiAgICBpZiAodGhpcy5pc1ZlcmNlbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQgY29ubmVjdGlvbnMgbm90IHN1cHBvcnRlZCBpbiBWZXJjZWwgZW52aXJvbm1lbnQnKVxuICAgIH1cblxuICAgIGlmICghdGhpcy5wb29sKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIG5vdCBjb25uZWN0ZWQnKVxuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCB0aGlzLnBvb2wuY29ubmVjdCgpXG4gIH1cblxuICBhc3luYyBoZWFsdGhDaGVjaygpOiBQcm9taXNlPHsgY29ubmVjdGVkOiBib29sZWFuOyBsYXRlbmN5PzogbnVtYmVyOyBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKVxuICAgICAgYXdhaXQgdGhpcy5xdWVyeSgnU0VMRUNUIDEgYXMgaGVhbHRoX2NoZWNrJylcbiAgICAgIGNvbnN0IGxhdGVuY3kgPSBEYXRlLm5vdygpIC0gc3RhcnRcbiAgICAgIHJldHVybiB7IGNvbm5lY3RlZDogdHJ1ZSwgbGF0ZW5jeSB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbm5lY3RlZDogZmFsc2UsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHRyYW5zYWN0aW9uPFQ+KGNhbGxiYWNrOiAoY2xpZW50OiBQb29sQ2xpZW50KSA9PiBQcm9taXNlPFQ+KTogUHJvbWlzZTxUPiB7XG4gICAgaWYgKHRoaXMuaXNWZXJjZWwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNhY3Rpb25zIG5vdCBzdXBwb3J0ZWQgaW4gVmVyY2VsIGVudmlyb25tZW50IHdpdGggQHZlcmNlbC9wb3N0Z3JlcycpXG4gICAgfVxuXG4gICAgY29uc3QgY2xpZW50ID0gYXdhaXQgdGhpcy5nZXRDbGllbnQoKVxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBjbGllbnQucXVlcnkoJ0JFR0lOJylcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhbGxiYWNrKGNsaWVudClcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQ09NTUlUJylcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KCdST0xMQkFDSycpXG4gICAgICB0aHJvdyBlcnJvclxuICAgIH0gZmluYWxseSB7XG4gICAgICBjbGllbnQucmVsZWFzZSgpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBkYiA9IG5ldyBEYXRhYmFzZUNvbm5lY3Rpb24oKVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZURhdGFiYXNlKCk6IFByb21pc2U8dm9pZD4ge1xuICB0cnkge1xuICAgIGF3YWl0IGRiLmNvbm5lY3QoKVxuICAgIGNvbnNvbGUubG9nKCdEYXRhYmFzZSBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHknKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBpbml0aWFsaXplIGRhdGFiYXNlOicsIGVycm9yKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsb3NlRGF0YWJhc2UoKTogUHJvbWlzZTx2b2lkPiB7XG4gIHRyeSB7XG4gICAgYXdhaXQgZGIuZGlzY29ubmVjdCgpXG4gICAgY29uc29sZS5sb2coJ0RhdGFiYXNlIGNsb3NlZCBzdWNjZXNzZnVsbHknKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBjbG9zZSBkYXRhYmFzZTonLCBlcnJvcilcbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2dUb0RhdGFiYXNlKFxuICBsZXZlbDogTG9nTGV2ZWwsXG4gIG1lc3NhZ2U6IHN0cmluZyxcbiAgY29tcG9uZW50OiBzdHJpbmcsXG4gIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55PlxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIHRyeSB7XG4gICAgLy8gQ29udmVydCBMb2dMZXZlbCBlbnVtIHRvIGRhdGFiYXNlLWNvbXBhdGlibGUgc3RyaW5nXG4gICAgbGV0IGRiTGV2ZWw6IHN0cmluZ1xuICAgIHN3aXRjaCAobGV2ZWwpIHtcbiAgICAgIGNhc2UgTG9nTGV2ZWwuREVCVUc6XG4gICAgICAgIGRiTGV2ZWwgPSAnZGVidWcnXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIExvZ0xldmVsLklORk86XG4gICAgICAgIGRiTGV2ZWwgPSAnaW5mbydcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgTG9nTGV2ZWwuV0FSTjpcbiAgICAgICAgZGJMZXZlbCA9ICd3YXJuaW5nJ1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSBMb2dMZXZlbC5FUlJPUjpcbiAgICAgICAgZGJMZXZlbCA9ICdlcnJvcidcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgTG9nTGV2ZWwuRkFUQUw6XG4gICAgICAgIGRiTGV2ZWwgPSAnZXJyb3InIC8vIE1hcCBGQVRBTCB0byBlcnJvciBzaW5jZSBpdCdzIG5vdCBpbiBjb25zdHJhaW50XG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBkYkxldmVsID0gJ2luZm8nXG4gICAgfVxuXG4gICAgYXdhaXQgZGIucXVlcnkoXG4gICAgICBgSU5TRVJUIElOVE8gc3lzdGVtX2xvZ3MgKGxvZ19sZXZlbCwgbWVzc2FnZSwgY29tcG9uZW50LCBtZXRhZGF0YSwgY3JlYXRlZF9hdClcbiAgICAgICBWQUxVRVMgKCQxLCAkMiwgJDMsICQ0LCBOT1coKSlgLFxuICAgICAgW2RiTGV2ZWwsIG1lc3NhZ2UsIGNvbXBvbmVudCwgbWV0YWRhdGEgPyBKU09OLnN0cmluZ2lmeShtZXRhZGF0YSkgOiBudWxsXVxuICAgIClcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gbG9nIHRvIGRhdGFiYXNlOicsIGVycm9yKVxuICB9XG59XG5cbmV4cG9ydCB7IHNxbCB9IGZyb20gJ0B2ZXJjZWwvcG9zdGdyZXMnIl0sIm5hbWVzIjpbIlBvb2wiLCJzcWwiLCJMb2dMZXZlbCIsIkRhdGFiYXNlQ29ubmVjdGlvbiIsInBvb2wiLCJpc1ZlcmNlbCIsInByb2Nlc3MiLCJlbnYiLCJQT1NUR1JFU19VUkwiLCJnZXRDb25maWciLCJob3N0IiwiUE9TVEdSRVNfSE9TVCIsInBvcnQiLCJkYXRhYmFzZSIsIlBPU1RHUkVTX0RBVEFCQVNFIiwidXNlciIsIlBPU1RHUkVTX1VTRVIiLCJwYXNzd29yZCIsIlBPU1RHUkVTX1BBU1NXT1JEIiwic3NsIiwibWF4IiwiaWRsZVRpbWVvdXRNaWxsaXMiLCJjb25uZWN0aW9uVGltZW91dE1pbGxpcyIsIkRBVEFCQVNFX0hPU1QiLCJwYXJzZUludCIsIkRBVEFCQVNFX1BPUlQiLCJEQVRBQkFTRV9OQU1FIiwiREFUQUJBU0VfVVNFUiIsIkRBVEFCQVNFX1BBU1NXT1JEIiwiY29ubmVjdCIsImNvbmZpZyIsIm9uIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwibG9nIiwiY2xpZW50IiwicXVlcnkiLCJyZWxlYXNlIiwiZGlzY29ubmVjdCIsImVuZCIsInRleHQiLCJwYXJhbXMiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJyZXN1bHQiLCJkdXJhdGlvbiIsInJvd3MiLCJyb3dDb3VudCIsImdldENsaWVudCIsIkVycm9yIiwiaGVhbHRoQ2hlY2siLCJsYXRlbmN5IiwiY29ubmVjdGVkIiwibWVzc2FnZSIsInRyYW5zYWN0aW9uIiwiY2FsbGJhY2siLCJkYiIsImluaXRpYWxpemVEYXRhYmFzZSIsImNsb3NlRGF0YWJhc2UiLCJsb2dUb0RhdGFiYXNlIiwibGV2ZWwiLCJjb21wb25lbnQiLCJtZXRhZGF0YSIsImRiTGV2ZWwiLCJERUJVRyIsIklORk8iLCJXQVJOIiwiRVJST1IiLCJGQVRBTCIsIkpTT04iLCJzdHJpbmdpZnkiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/mastodon-scanning.ts":
/*!*******************************************!*\
  !*** ./lib/services/mastodon-scanning.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MastodonScanningService: () => (/* binding */ MastodonScanningService),\n/* harmony export */   mastodonScanningService: () => (/* binding */ mastodonScanningService)\n/* harmony export */ });\n/* harmony import */ var _mastodon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mastodon */ \"(rsc)/./lib/services/mastodon.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_mastodon__WEBPACK_IMPORTED_MODULE_0__, _lib_db__WEBPACK_IMPORTED_MODULE_2__]);\n([_mastodon__WEBPACK_IMPORTED_MODULE_0__, _lib_db__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nclass MastodonScanningService {\n    async startAutomaticScanning() {\n        if (this.scanInterval) {\n            clearInterval(this.scanInterval);\n        }\n        const config = await _mastodon__WEBPACK_IMPORTED_MODULE_0__.mastodonService.getConfig();\n        const intervalMs = config.scanIntervalMinutes * 60 * 1000;\n        console.log(`Starting Mastodon automatic scanning every ${config.scanIntervalMinutes} minutes`);\n        // Run initial scan\n        this.performScan();\n        // Schedule recurring scans\n        this.scanInterval = setInterval(()=>{\n            this.performScan();\n        }, intervalMs);\n    }\n    async stopAutomaticScanning() {\n        if (this.scanInterval) {\n            clearInterval(this.scanInterval);\n            this.scanInterval = undefined;\n            console.log('Stopped Mastodon automatic scanning');\n        }\n    }\n    async performScan() {\n        if (this.isScanning) {\n            throw new Error('Scan already in progress');\n        }\n        const scanId = `mastodon_${Date.now()}`;\n        const startTime = Date.now();\n        const scanResult = {\n            scanId,\n            timestamp: new Date(),\n            postsFound: 0,\n            postsProcessed: 0,\n            postsAdded: 0,\n            instancesScanned: [],\n            errors: [],\n            scanDurationMs: 0\n        };\n        try {\n            this.isScanning = true;\n            console.log(`Starting Mastodon scan: ${scanId}`);\n            // Get posts from Mastodon\n            const posts = await _mastodon__WEBPACK_IMPORTED_MODULE_0__.mastodonService.scanForHotdogContent();\n            scanResult.postsFound = posts.length;\n            if (posts.length === 0) {\n                console.log('No hotdog content found on Mastodon');\n                return scanResult;\n            }\n            // Process each post\n            for (const post of posts){\n                try {\n                    await this.processPost(post);\n                    scanResult.postsProcessed++;\n                } catch (error) {\n                    console.error(`Failed to process Mastodon post ${post.id}:`, error);\n                    scanResult.errors.push({\n                        instance: post.instance,\n                        error: error instanceof Error ? error.message : 'Unknown error',\n                        timestamp: new Date()\n                    });\n                }\n            }\n            // Get unique instances that were scanned\n            scanResult.instancesScanned = [\n                ...new Set(posts.map((post)=>post.instance))\n            ];\n            this.lastScanTime = new Date();\n            console.log(`Mastodon scan completed: ${scanResult.postsProcessed}/${scanResult.postsFound} posts processed`);\n        } catch (error) {\n            console.error('Mastodon scan failed:', error);\n            scanResult.errors.push({\n                instance: 'system',\n                error: error instanceof Error ? error.message : 'Unknown system error',\n                timestamp: new Date()\n            });\n        } finally{\n            this.isScanning = false;\n            scanResult.scanDurationMs = Date.now() - startTime;\n            // Store scan results\n            await this.storeScanResult(scanResult);\n        }\n        return scanResult;\n    }\n    async processPost(post) {\n        try {\n            // Check if we already have this post\n            const existingPostResult = await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query('SELECT id FROM content_queue WHERE original_url = $1', [\n                post.url\n            ]);\n            if (existingPostResult.rows.length > 0) {\n                console.log(`Mastodon post already exists: ${post.url}`);\n                return;\n            }\n            // Transform to our format\n            const hotdogPost = _mastodon__WEBPACK_IMPORTED_MODULE_0__.mastodonService.transformToHotdogPost(post);\n            // Insert into content queue\n            const insertResult = await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(`\n        INSERT INTO content_queue (\n          content_text,\n          content_type,\n          source_platform,\n          original_url,\n          original_author,\n          content_image_url,\n          content_video_url,\n          scraped_at,\n          mastodon_data\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n        RETURNING id\n      `, [\n                hotdogPost.content_text,\n                hotdogPost.content_type,\n                hotdogPost.source_platform,\n                hotdogPost.original_url,\n                hotdogPost.original_author,\n                hotdogPost.content_image_url,\n                hotdogPost.content_video_url,\n                hotdogPost.scraped_at,\n                JSON.stringify(hotdogPost.mastodon_data)\n            ]);\n            const contentId = insertResult.rows[0].id;\n            console.log(`Added Mastodon post to queue: ${contentId} from ${post.instance}`);\n        } catch (error) {\n            console.error('Failed to process Mastodon post:', error);\n            throw error;\n        }\n    }\n    async storeScanResult(result) {\n        try {\n            await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(`\n        INSERT INTO mastodon_scan_results (\n          scan_id,\n          timestamp,\n          posts_found,\n          posts_processed,\n          posts_added,\n          instances_scanned,\n          errors,\n          scan_duration_ms\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n      `, [\n                result.scanId,\n                result.timestamp,\n                result.postsFound,\n                result.postsProcessed,\n                result.postsAdded,\n                JSON.stringify(result.instancesScanned),\n                JSON.stringify(result.errors),\n                result.scanDurationMs\n            ]);\n        } catch (error) {\n            console.error('Failed to store Mastodon scan result:', error);\n        }\n    }\n    async getRecentScanResults(limit = 10) {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(`\n        SELECT \n          scan_id,\n          timestamp,\n          posts_found,\n          posts_processed,\n          posts_added,\n          instances_scanned,\n          errors,\n          scan_duration_ms\n        FROM mastodon_scan_results \n        ORDER BY timestamp DESC \n        LIMIT $1\n      `, [\n                limit\n            ]);\n            return result.rows.map((row)=>({\n                    scanId: row.scan_id,\n                    timestamp: row.timestamp,\n                    postsFound: row.posts_found,\n                    postsProcessed: row.posts_processed,\n                    postsAdded: row.posts_added,\n                    instancesScanned: JSON.parse(row.instances_scanned),\n                    errors: JSON.parse(row.errors),\n                    scanDurationMs: row.scan_duration_ms\n                }));\n        } catch (error) {\n            console.error('Failed to get Mastodon scan results:', error);\n            return [];\n        }\n    }\n    async getScanningStats() {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(`\n        SELECT \n          COUNT(*) as total_scans,\n          SUM(posts_found) as total_posts_found,\n          SUM(posts_processed) as total_posts_processed,\n          SUM(posts_added) as total_posts_added,\n          AVG(scan_duration_ms) as avg_scan_duration\n        FROM mastodon_scan_results\n      `);\n            const stats = result.rows[0];\n            const successfulScans = await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(`\n        SELECT COUNT(*) as successful_scans\n        FROM mastodon_scan_results\n        WHERE posts_processed > 0\n      `);\n            return {\n                totalScans: parseInt(stats.total_scans) || 0,\n                totalPostsFound: parseInt(stats.total_posts_found) || 0,\n                totalPostsProcessed: parseInt(stats.total_posts_processed) || 0,\n                totalPostsAdded: parseInt(stats.total_posts_added) || 0,\n                averageScanDuration: parseFloat(stats.avg_scan_duration) || 0,\n                lastScanTime: this.lastScanTime,\n                isScanning: this.isScanning,\n                successRate: stats.total_scans > 0 ? parseInt(successfulScans.rows[0].successful_scans) / parseInt(stats.total_scans) : 0\n            };\n        } catch (error) {\n            console.error('Failed to get Mastodon scanning stats:', error);\n            return {\n                totalScans: 0,\n                totalPostsFound: 0,\n                totalPostsProcessed: 0,\n                totalPostsAdded: 0,\n                averageScanDuration: 0,\n                lastScanTime: this.lastScanTime,\n                isScanning: this.isScanning,\n                successRate: 0\n            };\n        }\n    }\n    async getContentAddedToday() {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(`\n        SELECT COUNT(*) as count\n        FROM content_queue\n        WHERE source_platform = $1\n        AND scraped_at >= CURRENT_DATE\n      `, [\n                _types__WEBPACK_IMPORTED_MODULE_1__.SourcePlatform.MASTODON\n            ]);\n            return parseInt(result.rows[0].count) || 0;\n        } catch (error) {\n            console.error('Failed to get Mastodon content added today:', error);\n            return 0;\n        }\n    }\n    async getTotalContentCount() {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(`\n        SELECT COUNT(*) as count\n        FROM content_queue\n        WHERE source_platform = $1\n      `, [\n                _types__WEBPACK_IMPORTED_MODULE_1__.SourcePlatform.MASTODON\n            ]);\n            return parseInt(result.rows[0].count) || 0;\n        } catch (error) {\n            console.error('Failed to get total Mastodon content count:', error);\n            return 0;\n        }\n    }\n    isCurrentlyScanning() {\n        return this.isScanning;\n    }\n    getLastScanTime() {\n        return this.lastScanTime;\n    }\n    async testScan() {\n        console.log('Running Mastodon test scan...');\n        // Temporarily set a small limit for testing\n        const config = await _mastodon__WEBPACK_IMPORTED_MODULE_0__.mastodonService.getConfig();\n        const originalMax = config.maxPostsPerScan;\n        await _mastodon__WEBPACK_IMPORTED_MODULE_0__.mastodonService.updateConfig({\n            maxPostsPerScan: 5\n        });\n        try {\n            const result = await this.performScan();\n            console.log('Test scan completed:', result);\n            return result;\n        } finally{\n            // Restore original config\n            await _mastodon__WEBPACK_IMPORTED_MODULE_0__.mastodonService.updateConfig({\n                maxPostsPerScan: originalMax\n            });\n        }\n    }\n    constructor(){\n        this.isScanning = false;\n    }\n}\nconst mastodonScanningService = new MastodonScanningService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/mastodon-scanning.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/mastodon.ts":
/*!**********************************!*\
  !*** ./lib/services/mastodon.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MastodonService: () => (/* binding */ MastodonService),\n/* harmony export */   mastodonService: () => (/* binding */ mastodonService)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_1__]);\n_lib_db__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nclass MastodonService {\n    constructor(){\n        this.defaultInstances = [\n            {\n                domain: 'mastodon.social',\n                name: 'Mastodon Social',\n                isActive: true,\n                rateLimitPerMinute: 60,\n                errorCount: 0,\n                successCount: 0\n            },\n            {\n                domain: 'mas.to',\n                name: 'Mas.to',\n                isActive: true,\n                rateLimitPerMinute: 60,\n                errorCount: 0,\n                successCount: 0\n            },\n            {\n                domain: 'foodie.fm',\n                name: 'Foodie FM',\n                isActive: true,\n                rateLimitPerMinute: 30,\n                errorCount: 0,\n                successCount: 0\n            }\n        ];\n        this.defaultSearchTerms = [\n            'hotdog',\n            'hot dog',\n            'frankfurter',\n            'wiener',\n            'sausage sandwich'\n        ];\n        this.defaultHashtags = [\n            'hotdog',\n            'hotdogs',\n            'frankfurter',\n            'streetfood',\n            'food',\n            'cooking',\n            'foodie'\n        ];\n        this.config = {\n            instances: this.defaultInstances,\n            searchTerms: this.defaultSearchTerms,\n            hashtagsToTrack: this.defaultHashtags,\n            enabledInstances: [\n                'mastodon.social',\n                'mas.to'\n            ],\n            scanIntervalMinutes: 30,\n            maxPostsPerScan: 50,\n            minEngagementThreshold: 1\n        };\n    }\n    async getConfig() {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.query(`\n        SELECT \n          instances,\n          search_terms,\n          hashtags_to_track,\n          enabled_instances,\n          scan_interval_minutes,\n          max_posts_per_scan,\n          min_engagement_threshold\n        FROM mastodon_scan_config \n        ORDER BY updated_at DESC \n        LIMIT 1\n      `);\n            if (result.rows.length === 0) {\n                // Return default config if no database config exists\n                return this.config;\n            }\n            const row = result.rows[0];\n            return {\n                instances: row.instances,\n                searchTerms: row.search_terms,\n                hashtagsToTrack: row.hashtags_to_track,\n                enabledInstances: row.enabled_instances,\n                scanIntervalMinutes: row.scan_interval_minutes,\n                maxPostsPerScan: row.max_posts_per_scan,\n                minEngagementThreshold: row.min_engagement_threshold\n            };\n        } catch (error) {\n            console.error('Failed to load Mastodon config from database:', error);\n            // Fallback to default config\n            return this.config;\n        }\n    }\n    async updateConfig(newConfig) {\n        try {\n            // Get current config first\n            const currentConfig = await this.getConfig();\n            const updatedConfig = {\n                ...currentConfig,\n                ...newConfig\n            };\n            // Update database\n            await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.query(`\n        UPDATE mastodon_scan_config SET\n          instances = $1,\n          search_terms = $2,\n          hashtags_to_track = $3,\n          enabled_instances = $4,\n          scan_interval_minutes = $5,\n          max_posts_per_scan = $6,\n          min_engagement_threshold = $7,\n          updated_at = CURRENT_TIMESTAMP\n        WHERE id = (\n          SELECT id FROM mastodon_scan_config \n          ORDER BY updated_at DESC \n          LIMIT 1\n        )\n      `, [\n                JSON.stringify(updatedConfig.instances),\n                JSON.stringify(updatedConfig.searchTerms),\n                JSON.stringify(updatedConfig.hashtagsToTrack),\n                JSON.stringify(updatedConfig.enabledInstances),\n                updatedConfig.scanIntervalMinutes,\n                updatedConfig.maxPostsPerScan,\n                updatedConfig.minEngagementThreshold\n            ]);\n            // Update in-memory config as well\n            this.config = updatedConfig;\n        } catch (error) {\n            console.error('Failed to update Mastodon config:', error);\n            throw error;\n        }\n    }\n    async testInstanceConnection(domain) {\n        try {\n            const response = await fetch(`https://${domain}/api/v1/instance`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'User-Agent': 'HotdogDiaries/1.0'\n                }\n            });\n            return response.ok;\n        } catch (error) {\n            console.error(`Failed to connect to ${domain}:`, error);\n            return false;\n        }\n    }\n    async searchPosts(instance, query, limit = 20) {\n        try {\n            const searchUrl = `https://${instance}/api/v2/search`;\n            const params = new URLSearchParams({\n                q: query,\n                type: 'statuses',\n                limit: limit.toString(),\n                resolve: 'false'\n            });\n            const response = await fetch(`${searchUrl}?${params}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'User-Agent': 'HotdogDiaries/1.0'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`Search failed: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            return this.transformPosts(data.statuses || [], instance);\n        } catch (error) {\n            console.error(`Search failed on ${instance}:`, error);\n            return [];\n        }\n    }\n    async getPublicTimeline(instance, limit = 20) {\n        try {\n            const timelineUrl = `https://${instance}/api/v1/timelines/public`;\n            const params = new URLSearchParams({\n                limit: limit.toString(),\n                local: 'true'\n            });\n            const response = await fetch(`${timelineUrl}?${params}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'User-Agent': 'HotdogDiaries/1.0'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`Timeline fetch failed: ${response.status} ${response.statusText}`);\n            }\n            const posts = await response.json();\n            return this.transformPosts(posts, instance);\n        } catch (error) {\n            console.error(`Timeline fetch failed on ${instance}:`, error);\n            return [];\n        }\n    }\n    async searchHashtag(instance, hashtag, limit = 20) {\n        try {\n            const hashtagUrl = `https://${instance}/api/v1/timelines/tag/${hashtag}`;\n            const params = new URLSearchParams({\n                limit: limit.toString()\n            });\n            const response = await fetch(`${hashtagUrl}?${params}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'User-Agent': 'HotdogDiaries/1.0'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`Hashtag search failed: ${response.status} ${response.statusText}`);\n            }\n            const posts = await response.json();\n            return this.transformPosts(posts, instance);\n        } catch (error) {\n            console.error(`Hashtag search failed on ${instance}:`, error);\n            return [];\n        }\n    }\n    transformPosts(rawPosts, instance) {\n        return rawPosts.filter((post)=>post && post.content && post.account).map((post)=>({\n                id: post.id,\n                content: this.stripHtml(post.content),\n                createdAt: new Date(post.created_at),\n                author: {\n                    username: post.account.username,\n                    displayName: post.account.display_name || post.account.username,\n                    profileUrl: post.account.url\n                },\n                mediaAttachments: (post.media_attachments || []).map((media)=>({\n                        type: media.type,\n                        url: media.url,\n                        previewUrl: media.preview_url,\n                        description: media.description\n                    })),\n                stats: {\n                    favouritesCount: post.favourites_count || 0,\n                    reblogsCount: post.reblogs_count || 0,\n                    repliesCount: post.replies_count || 0\n                },\n                tags: (post.tags || []).map((tag)=>tag.name),\n                url: post.url,\n                instance\n            }));\n    }\n    stripHtml(html) {\n        return html.replace(/<[^>]*>/g, '').replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"').replace(/&#39;/g, \"'\").trim();\n    }\n    async scanForHotdogContent() {\n        const allPosts = [];\n        const enabledInstances = this.config.instances.filter((instance)=>this.config.enabledInstances.includes(instance.domain));\n        for (const instance of enabledInstances){\n            try {\n                // Search for each search term\n                for (const term of this.config.searchTerms){\n                    const posts = await this.searchPosts(instance.domain, term, Math.floor(this.config.maxPostsPerScan / this.config.searchTerms.length));\n                    allPosts.push(...posts);\n                }\n                // Search for each hashtag\n                for (const hashtag of this.config.hashtagsToTrack){\n                    const posts = await this.searchHashtag(instance.domain, hashtag, 10);\n                    allPosts.push(...posts);\n                }\n                // Update success count\n                const instanceConfig = this.config.instances.find((i)=>i.domain === instance.domain);\n                if (instanceConfig) {\n                    instanceConfig.successCount++;\n                    instanceConfig.lastScanTime = new Date();\n                }\n                // Rate limiting - wait between instances\n                await new Promise((resolve)=>setTimeout(resolve, 2000));\n            } catch (error) {\n                console.error(`Scan failed for ${instance.domain}:`, error);\n                // Update error count\n                const instanceConfig = this.config.instances.find((i)=>i.domain === instance.domain);\n                if (instanceConfig) {\n                    instanceConfig.errorCount++;\n                }\n            }\n        }\n        // Filter for quality content\n        return this.filterQualityContent(allPosts);\n    }\n    filterQualityContent(posts) {\n        const uniquePosts = new Map();\n        for (const post of posts){\n            // Skip if content doesn't actually contain hotdog references\n            const contentLower = post.content.toLowerCase();\n            const hasHotdogContent = this.config.searchTerms.some((term)=>contentLower.includes(term.toLowerCase()));\n            if (!hasHotdogContent) continue;\n            // Skip if engagement is too low\n            const totalEngagement = post.stats.favouritesCount + post.stats.reblogsCount + post.stats.repliesCount;\n            if (totalEngagement < this.config.minEngagementThreshold) continue;\n            // Skip if content is too short\n            if (post.content.length < 10) continue;\n            // Use URL as unique key to avoid duplicates\n            uniquePosts.set(post.url, post);\n        }\n        return Array.from(uniquePosts.values()).sort((a, b)=>{\n            const aEngagement = a.stats.favouritesCount + a.stats.reblogsCount;\n            const bEngagement = b.stats.favouritesCount + b.stats.reblogsCount;\n            return bEngagement - aEngagement;\n        }).slice(0, this.config.maxPostsPerScan);\n    }\n    getContentType(post) {\n        if (post.mediaAttachments.length > 0) {\n            const hasImages = post.mediaAttachments.some((media)=>media.type === 'image');\n            const hasVideos = post.mediaAttachments.some((media)=>media.type === 'video');\n            if (hasImages && hasVideos) return _types__WEBPACK_IMPORTED_MODULE_0__.ContentType.MIXED;\n            if (hasVideos) return _types__WEBPACK_IMPORTED_MODULE_0__.ContentType.VIDEO;\n            if (hasImages) return _types__WEBPACK_IMPORTED_MODULE_0__.ContentType.IMAGE;\n        }\n        return _types__WEBPACK_IMPORTED_MODULE_0__.ContentType.TEXT;\n    }\n    transformToHotdogPost(post) {\n        return {\n            content_text: post.content,\n            content_type: this.getContentType(post),\n            source_platform: _types__WEBPACK_IMPORTED_MODULE_0__.SourcePlatform.MASTODON,\n            original_url: post.url,\n            original_author: `${post.author.displayName} (@${post.author.username})`,\n            content_image_url: post.mediaAttachments.find((media)=>media.type === 'image')?.url,\n            content_video_url: post.mediaAttachments.find((media)=>media.type === 'video')?.url,\n            scraped_at: new Date(),\n            mastodon_data: {\n                instance: post.instance,\n                postId: post.id,\n                author: post.author,\n                stats: post.stats,\n                tags: post.tags,\n                mediaAttachments: post.mediaAttachments\n            }\n        };\n    }\n    async getInstanceStats() {\n        try {\n            const config = await this.getConfig();\n            return config.instances.map((instance)=>({\n                    domain: instance.domain,\n                    name: instance.name,\n                    isActive: instance.isActive,\n                    lastScanTime: instance.lastScanTime,\n                    errorCount: instance.errorCount,\n                    successCount: instance.successCount,\n                    successRate: instance.successCount + instance.errorCount > 0 ? instance.successCount / (instance.successCount + instance.errorCount) : 0\n                }));\n        } catch (error) {\n            console.error('Failed to get instance stats:', error);\n            return [];\n        }\n    }\n}\nconst mastodonService = new MastodonService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/mastodon.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fmastodon%2Ftest%2Froute&page=%2Fapi%2Fadmin%2Fmastodon%2Ftest%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fmastodon%2Ftest%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fmastodon%2Ftest%2Froute&page=%2Fapi%2Fadmin%2Fmastodon%2Ftest%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fmastodon%2Ftest%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_mastodon_test_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/admin/mastodon/test/route.ts */ \"(rsc)/./app/api/admin/mastodon/test/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_mastodon_test_route_ts__WEBPACK_IMPORTED_MODULE_16__]);\n_Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_mastodon_test_route_ts__WEBPACK_IMPORTED_MODULE_16__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/admin/mastodon/test/route\",\n        pathname: \"/api/admin/mastodon/test\",\n        filename: \"route\",\n        bundlePath: \"app/api/admin/mastodon/test/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"/Users/adamshaw/Development/websites/hotdog-diaries/app/api/admin/mastodon/test/route.ts\",\n    nextConfigOutput,\n    userland: _Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_mastodon_test_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/admin/mastodon/test/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fmastodon%2Ftest%2Froute&page=%2Fapi%2Fadmin%2Fmastodon%2Ftest%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fmastodon%2Ftest%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./types/index.ts":
/*!************************!*\
  !*** ./types/index.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentType: () => (/* binding */ ContentType),\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   SourcePlatform: () => (/* binding */ SourcePlatform)\n/* harmony export */ });\n// Enums\nvar ContentType = /*#__PURE__*/ function(ContentType) {\n    ContentType[\"TEXT\"] = \"text\";\n    ContentType[\"IMAGE\"] = \"image\";\n    ContentType[\"VIDEO\"] = \"video\";\n    ContentType[\"MIXED\"] = \"mixed\";\n    return ContentType;\n}({});\nvar SourcePlatform = /*#__PURE__*/ function(SourcePlatform) {\n    SourcePlatform[\"REDDIT\"] = \"reddit\";\n    SourcePlatform[\"YOUTUBE\"] = \"youtube\";\n    SourcePlatform[\"FLICKR\"] = \"flickr\";\n    SourcePlatform[\"UNSPLASH\"] = \"unsplash\";\n    SourcePlatform[\"NEWS\"] = \"news\";\n    SourcePlatform[\"MASTODON\"] = \"mastodon\";\n    return SourcePlatform;\n}({});\nvar LogLevel = /*#__PURE__*/ function(LogLevel) {\n    LogLevel[\"DEBUG\"] = \"debug\";\n    LogLevel[\"INFO\"] = \"info\";\n    LogLevel[\"WARN\"] = \"warn\";\n    LogLevel[\"ERROR\"] = \"error\";\n    LogLevel[\"FATAL\"] = \"fatal\";\n    return LogLevel;\n}({});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi90eXBlcy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUEwRkEsUUFBUTtBQUNELHlDQUFLQTs7Ozs7V0FBQUE7TUFLWDtBQUVNLDRDQUFLQzs7Ozs7OztXQUFBQTtNQU9YO0FBRU0sc0NBQUtDOzs7Ozs7V0FBQUE7TUFNWCIsInNvdXJjZXMiOlsiL1VzZXJzL2FkYW1zaGF3L0RldmVsb3BtZW50L3dlYnNpdGVzL2hvdGRvZy1kaWFyaWVzL3R5cGVzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoQ2hlY2tSZXNwb25zZSB7XG4gIHN0YXR1czogJ2hlYWx0aHknIHwgJ3VuaGVhbHRoeSdcbiAgdGltZXN0YW1wOiBzdHJpbmdcbiAgc2VydmljZTogc3RyaW5nXG4gIHZlcnNpb24/OiBzdHJpbmdcbiAgdXB0aW1lPzogbnVtYmVyXG4gIGVudmlyb25tZW50Pzogc3RyaW5nXG4gIGNoZWNrcz86IHtcbiAgICBkYXRhYmFzZT86IHN0cmluZ1xuICAgIHNvY2lhbE1lZGlhU2Nhbm5lcj86IHN0cmluZ1xuICAgIGNvbnRlbnRTY2hlZHVsZXI/OiBzdHJpbmdcbiAgfVxuICBlcnJvcj86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhvdGRvZ1Bvc3Qge1xuICBpZDogc3RyaW5nXG4gIGNvbnRlbnQ6IHN0cmluZ1xuICBpbWFnZVVybD86IHN0cmluZ1xuICBzb3VyY2U6ICdyZWRkaXQnIHwgJ3lvdXR1YmUnIHwgJ2ZsaWNrcicgfCAndW5zcGxhc2gnIHwgJ25ld3MnIHwgJ21hc3RvZG9uJ1xuICBzb3VyY2VVcmw6IHN0cmluZ1xuICB0aW1lc3RhbXA6IHN0cmluZ1xuICBlbmdhZ2VtZW50OiB7XG4gICAgbGlrZXM6IG51bWJlclxuICAgIHNoYXJlczogbnVtYmVyXG4gICAgY29tbWVudHM6IG51bWJlclxuICB9XG4gIHByb2Nlc3NlZDogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdkl0ZW0ge1xuICBocmVmOiBzdHJpbmdcbiAgbGFiZWw6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwaVJlc3BvbnNlPFQgPSBhbnk+IHtcbiAgc3VjY2VzczogYm9vbGVhblxuICBkYXRhPzogVFxuICBlcnJvcj86IHN0cmluZ1xuICBtZXNzYWdlPzogc3RyaW5nXG59XG5cbi8vIERhdGFiYXNlIEVudGl0eSBUeXBlc1xuZXhwb3J0IGludGVyZmFjZSBDb250ZW50UXVldWUge1xuICBpZDogbnVtYmVyXG4gIGNvbnRlbnRfdGV4dD86IHN0cmluZ1xuICBjb250ZW50X2ltYWdlX3VybD86IHN0cmluZ1xuICBjb250ZW50X3ZpZGVvX3VybD86IHN0cmluZ1xuICBjb250ZW50X3R5cGU6IENvbnRlbnRUeXBlXG4gIHNvdXJjZV9wbGF0Zm9ybTogU291cmNlUGxhdGZvcm1cbiAgb3JpZ2luYWxfdXJsOiBzdHJpbmdcbiAgb3JpZ2luYWxfYXV0aG9yPzogc3RyaW5nXG4gIHNjcmFwZWRfYXQ6IERhdGVcbiAgY29udGVudF9oYXNoOiBzdHJpbmdcbiAgaXNfcG9zdGVkOiBib29sZWFuXG4gIHBvc3RlZF9hdD86IERhdGVcbiAgaXNfYXBwcm92ZWQ6IGJvb2xlYW5cbiAgYWRtaW5fbm90ZXM/OiBzdHJpbmdcbiAgY3JlYXRlZF9hdDogRGF0ZVxuICB1cGRhdGVkX2F0OiBEYXRlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zdGVkQ29udGVudCB7XG4gIGlkOiBudW1iZXJcbiAgY29udGVudF9xdWV1ZV9pZDogbnVtYmVyXG4gIHBvc3RlZF9hdDogRGF0ZVxuICBzY2hlZHVsZWRfdGltZT86IERhdGVcbiAgcG9zdF9vcmRlcjogbnVtYmVyXG4gIGNyZWF0ZWRfYXQ6IERhdGVcbiAgdXBkYXRlZF9hdDogRGF0ZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN5c3RlbUxvZyB7XG4gIGlkOiBudW1iZXJcbiAgbG9nX2xldmVsOiBMb2dMZXZlbFxuICBtZXNzYWdlOiBzdHJpbmdcbiAgY29tcG9uZW50OiBzdHJpbmdcbiAgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gIGNyZWF0ZWRfYXQ6IERhdGVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBZG1pblVzZXIge1xuICBpZDogbnVtYmVyXG4gIHVzZXJuYW1lOiBzdHJpbmdcbiAgcGFzc3dvcmRfaGFzaDogc3RyaW5nXG4gIGxhc3RfbG9naW4/OiBEYXRlXG4gIGNyZWF0ZWRfYXQ6IERhdGVcbiAgdXBkYXRlZF9hdDogRGF0ZVxufVxuXG4vLyBFbnVtc1xuZXhwb3J0IGVudW0gQ29udGVudFR5cGUge1xuICBURVhUID0gJ3RleHQnLFxuICBJTUFHRSA9ICdpbWFnZScsXG4gIFZJREVPID0gJ3ZpZGVvJyxcbiAgTUlYRUQgPSAnbWl4ZWQnXG59XG5cbmV4cG9ydCBlbnVtIFNvdXJjZVBsYXRmb3JtIHtcbiAgUkVERElUID0gJ3JlZGRpdCcsXG4gIFlPVVRVQkUgPSAneW91dHViZScsXG4gIEZMSUNLUiA9ICdmbGlja3InLFxuICBVTlNQTEFTSCA9ICd1bnNwbGFzaCcsXG4gIE5FV1MgPSAnbmV3cycsXG4gIE1BU1RPRE9OID0gJ21hc3RvZG9uJ1xufVxuXG5leHBvcnQgZW51bSBMb2dMZXZlbCB7XG4gIERFQlVHID0gJ2RlYnVnJyxcbiAgSU5GTyA9ICdpbmZvJyxcbiAgV0FSTiA9ICd3YXJuJyxcbiAgRVJST1IgPSAnZXJyb3InLFxuICBGQVRBTCA9ICdmYXRhbCdcbn1cblxuLy8gQVBJIFJlcXVlc3QvUmVzcG9uc2UgVHlwZXNcbmV4cG9ydCBpbnRlcmZhY2UgQ29udGVudEFwaVJlc3BvbnNlIHtcbiAgc3VjY2VzczogYm9vbGVhblxuICBkYXRhOiB7XG4gICAgY29udGVudDogUG9zdGVkQ29udGVudFtdXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgcGFnZTogbnVtYmVyXG4gICAgICBsaW1pdDogbnVtYmVyXG4gICAgICB0b3RhbDogbnVtYmVyXG4gICAgICB0b3RhbFBhZ2VzOiBudW1iZXJcbiAgICB9XG4gIH1cbiAgbWVzc2FnZT86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFiYXNlSGVhbHRoQ2hlY2sge1xuICBjb25uZWN0ZWQ6IGJvb2xlYW5cbiAgbGF0ZW5jeT86IG51bWJlclxuICBlcnJvcj86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVuaGFuY2VkSGVhbHRoUmVzcG9uc2UgZXh0ZW5kcyBIZWFsdGhDaGVja1Jlc3BvbnNlIHtcbiAgY2hlY2tzOiB7XG4gICAgZGF0YWJhc2U6IERhdGFiYXNlSGVhbHRoQ2hlY2tcbiAgICBzb2NpYWxNZWRpYVNjYW5uZXI/OiBzdHJpbmdcbiAgICBjb250ZW50U2NoZWR1bGVyPzogc3RyaW5nXG4gIH1cbn0iXSwibmFtZXMiOlsiQ29udGVudFR5cGUiLCJTb3VyY2VQbGF0Zm9ybSIsIkxvZ0xldmVsIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./types/index.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = import("pg");;

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@neondatabase","vendor-chunks/ws","vendor-chunks/@vercel","vendor-chunks/node-gyp-build","vendor-chunks/bufferutil"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fmastodon%2Ftest%2Froute&page=%2Fapi%2Fadmin%2Fmastodon%2Ftest%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fmastodon%2Ftest%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();