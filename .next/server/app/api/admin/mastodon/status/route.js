/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/admin/mastodon/status/route";
exports.ids = ["app/api/admin/mastodon/status/route"];
exports.modules = {

/***/ "(rsc)/./app/api/admin/mastodon/status/route.ts":
/*!************************************************!*\
  !*** ./app/api/admin/mastodon/status/route.ts ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var _lib_api_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/api-middleware */ \"(rsc)/./lib/api-middleware.ts\");\n/* harmony import */ var _lib_services_mastodon_monitoring__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/services/mastodon-monitoring */ \"(rsc)/./lib/services/mastodon-monitoring.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_api_middleware__WEBPACK_IMPORTED_MODULE_0__, _lib_services_mastodon_monitoring__WEBPACK_IMPORTED_MODULE_1__]);\n([_lib_api_middleware__WEBPACK_IMPORTED_MODULE_0__, _lib_services_mastodon_monitoring__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\nasync function getMastodonStatusHandler(request) {\n    (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_0__.validateRequestMethod)(request, [\n        'GET'\n    ]);\n    try {\n        const systemHealth = await _lib_services_mastodon_monitoring__WEBPACK_IMPORTED_MODULE_1__.mastodonMonitoringService.getSystemHealth();\n        const healthSummary = await _lib_services_mastodon_monitoring__WEBPACK_IMPORTED_MODULE_1__.mastodonMonitoringService.getHealthSummary();\n        const statusData = {\n            ...systemHealth,\n            summary: healthSummary\n        };\n        return (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_0__.createSuccessResponse)(statusData, 'Mastodon status retrieved successfully');\n    } catch (error) {\n        console.error('Failed to get Mastodon status:', error);\n        throw (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_0__.createApiError)('Failed to retrieve Mastodon status', 500, 'MASTODON_STATUS_ERROR');\n    }\n}\nasync function GET(request) {\n    try {\n        return await getMastodonStatusHandler(request);\n    } catch (error) {\n        return await (0,_lib_api_middleware__WEBPACK_IMPORTED_MODULE_0__.handleApiError)(error, request, '/api/admin/mastodon/status');\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2FkbWluL21hc3RvZG9uL3N0YXR1cy9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFNNkI7QUFDaUQ7QUFFOUUsZUFBZUsseUJBQXlCQyxPQUFvQjtJQUMxRE4sMEVBQXFCQSxDQUFDTSxTQUFTO1FBQUM7S0FBTTtJQUV0QyxJQUFJO1FBQ0YsTUFBTUMsZUFBZSxNQUFNSCx3RkFBeUJBLENBQUNJLGVBQWU7UUFDcEUsTUFBTUMsZ0JBQWdCLE1BQU1MLHdGQUF5QkEsQ0FBQ00sZ0JBQWdCO1FBRXRFLE1BQU1DLGFBQWE7WUFDakIsR0FBR0osWUFBWTtZQUNmSyxTQUFTSDtRQUNYO1FBRUEsT0FBT1IsMEVBQXFCQSxDQUFDVSxZQUFZO0lBRTNDLEVBQUUsT0FBT0UsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsa0NBQWtDQTtRQUNoRCxNQUFNWCxtRUFBY0EsQ0FBQyxzQ0FBc0MsS0FBSztJQUNsRTtBQUNGO0FBRU8sZUFBZWEsSUFBSVQsT0FBb0I7SUFDNUMsSUFBSTtRQUNGLE9BQU8sTUFBTUQseUJBQXlCQztJQUN4QyxFQUFFLE9BQU9PLE9BQU87UUFDZCxPQUFPLE1BQU1WLG1FQUFjQSxDQUFDVSxPQUFPUCxTQUFTO0lBQzlDO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZGFtc2hhdy9EZXZlbG9wbWVudC93ZWJzaXRlcy9ob3Rkb2ctZGlhcmllcy9hcHAvYXBpL2FkbWluL21hc3RvZG9uL3N0YXR1cy9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInXG5pbXBvcnQgeyBcbiAgdmFsaWRhdGVSZXF1ZXN0TWV0aG9kLFxuICBjcmVhdGVTdWNjZXNzUmVzcG9uc2UsXG4gIGNyZWF0ZUFwaUVycm9yLFxuICBoYW5kbGVBcGlFcnJvclxufSBmcm9tICdAL2xpYi9hcGktbWlkZGxld2FyZSdcbmltcG9ydCB7IG1hc3RvZG9uTW9uaXRvcmluZ1NlcnZpY2UgfSBmcm9tICdAL2xpYi9zZXJ2aWNlcy9tYXN0b2Rvbi1tb25pdG9yaW5nJ1xuXG5hc3luYyBmdW5jdGlvbiBnZXRNYXN0b2RvblN0YXR1c0hhbmRsZXIocmVxdWVzdDogTmV4dFJlcXVlc3QpOiBQcm9taXNlPE5leHRSZXNwb25zZT4ge1xuICB2YWxpZGF0ZVJlcXVlc3RNZXRob2QocmVxdWVzdCwgWydHRVQnXSlcblxuICB0cnkge1xuICAgIGNvbnN0IHN5c3RlbUhlYWx0aCA9IGF3YWl0IG1hc3RvZG9uTW9uaXRvcmluZ1NlcnZpY2UuZ2V0U3lzdGVtSGVhbHRoKClcbiAgICBjb25zdCBoZWFsdGhTdW1tYXJ5ID0gYXdhaXQgbWFzdG9kb25Nb25pdG9yaW5nU2VydmljZS5nZXRIZWFsdGhTdW1tYXJ5KClcblxuICAgIGNvbnN0IHN0YXR1c0RhdGEgPSB7XG4gICAgICAuLi5zeXN0ZW1IZWFsdGgsXG4gICAgICBzdW1tYXJ5OiBoZWFsdGhTdW1tYXJ5XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZShzdGF0dXNEYXRhLCAnTWFzdG9kb24gc3RhdHVzIHJldHJpZXZlZCBzdWNjZXNzZnVsbHknKVxuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGdldCBNYXN0b2RvbiBzdGF0dXM6JywgZXJyb3IpXG4gICAgdGhyb3cgY3JlYXRlQXBpRXJyb3IoJ0ZhaWxlZCB0byByZXRyaWV2ZSBNYXN0b2RvbiBzdGF0dXMnLCA1MDAsICdNQVNUT0RPTl9TVEFUVVNfRVJST1InKVxuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpOiBQcm9taXNlPE5leHRSZXNwb25zZT4ge1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBnZXRNYXN0b2RvblN0YXR1c0hhbmRsZXIocmVxdWVzdClcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gYXdhaXQgaGFuZGxlQXBpRXJyb3IoZXJyb3IsIHJlcXVlc3QsICcvYXBpL2FkbWluL21hc3RvZG9uL3N0YXR1cycpXG4gIH1cbn0iXSwibmFtZXMiOlsidmFsaWRhdGVSZXF1ZXN0TWV0aG9kIiwiY3JlYXRlU3VjY2Vzc1Jlc3BvbnNlIiwiY3JlYXRlQXBpRXJyb3IiLCJoYW5kbGVBcGlFcnJvciIsIm1hc3RvZG9uTW9uaXRvcmluZ1NlcnZpY2UiLCJnZXRNYXN0b2RvblN0YXR1c0hhbmRsZXIiLCJyZXF1ZXN0Iiwic3lzdGVtSGVhbHRoIiwiZ2V0U3lzdGVtSGVhbHRoIiwiaGVhbHRoU3VtbWFyeSIsImdldEhlYWx0aFN1bW1hcnkiLCJzdGF0dXNEYXRhIiwic3VtbWFyeSIsImVycm9yIiwiY29uc29sZSIsIkdFVCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/admin/mastodon/status/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/api-middleware.ts":
/*!*******************************!*\
  !*** ./lib/api-middleware.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpError: () => (/* binding */ HttpError),\n/* harmony export */   addCorsHeaders: () => (/* binding */ addCorsHeaders),\n/* harmony export */   addSecurityHeaders: () => (/* binding */ addSecurityHeaders),\n/* harmony export */   createApiError: () => (/* binding */ createApiError),\n/* harmony export */   createSuccessResponse: () => (/* binding */ createSuccessResponse),\n/* harmony export */   handleApiError: () => (/* binding */ handleApiError),\n/* harmony export */   validateContentType: () => (/* binding */ validateContentType),\n/* harmony export */   validateJsonBody: () => (/* binding */ validateJsonBody),\n/* harmony export */   validateRequestMethod: () => (/* binding */ validateRequestMethod),\n/* harmony export */   withErrorHandling: () => (/* binding */ withErrorHandling)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_db__WEBPACK_IMPORTED_MODULE_1__]);\n_db__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nclass HttpError extends Error {\n    constructor(message, statusCode = 500, code){\n        super(message);\n        this.name = 'HttpError';\n        this.statusCode = statusCode;\n        this.code = code;\n    }\n}\nfunction createApiError(message, statusCode = 500, code) {\n    return new HttpError(message, statusCode, code);\n}\nasync function handleApiError(error, request, endpoint) {\n    let statusCode = 500;\n    let message = 'Internal Server Error';\n    let code = 'INTERNAL_ERROR';\n    if (error instanceof HttpError) {\n        statusCode = error.statusCode;\n        message = error.message;\n        code = error.code || 'HTTP_ERROR';\n    } else if (error instanceof Error) {\n        message = error.message;\n        code = 'APPLICATION_ERROR';\n    }\n    // Log error to database\n    try {\n        await (0,_db__WEBPACK_IMPORTED_MODULE_1__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR, `API Error in ${endpoint}: ${message}`, 'api', {\n            endpoint,\n            statusCode,\n            code,\n            method: request.method,\n            url: request.url,\n            userAgent: request.headers.get('user-agent'),\n            stack: error instanceof Error ? error.stack : undefined\n        });\n    } catch (logError) {\n        console.error('Failed to log error to database:', logError);\n    }\n    // Log to console for development\n    if (true) {\n        console.error(`API Error [${endpoint}]:`, error);\n    }\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        success: false,\n        error: message,\n        code,\n        timestamp: new Date().toISOString()\n    }, {\n        status: statusCode\n    });\n}\nfunction withErrorHandling(handler, endpoint) {\n    return async (request)=>{\n        try {\n            return await handler(request);\n        } catch (error) {\n            return await handleApiError(error, request, endpoint);\n        }\n    };\n}\nfunction validateRequestMethod(request, allowedMethods) {\n    if (!allowedMethods.includes(request.method)) {\n        throw createApiError(`Method ${request.method} not allowed`, 405, 'METHOD_NOT_ALLOWED');\n    }\n}\nfunction validateContentType(request, expectedType = 'application/json') {\n    const contentType = request.headers.get('content-type');\n    if (contentType && !contentType.includes(expectedType)) {\n        throw createApiError(`Invalid content type. Expected ${expectedType}`, 400, 'INVALID_CONTENT_TYPE');\n    }\n}\nasync function validateJsonBody(request) {\n    try {\n        const body = await request.json();\n        return body;\n    } catch  {\n        throw createApiError('Invalid JSON in request body', 400, 'INVALID_JSON');\n    }\n}\nfunction addCorsHeaders(response, origin) {\n    const allowedOrigins = [\n        'http://localhost:3000',\n        'https://hotdog-diaries.vercel.app',\n        process.env.CORS_ORIGIN\n    ].filter(Boolean);\n    const requestOrigin = origin || 'http://localhost:3000';\n    if (allowedOrigins.includes(requestOrigin)) {\n        response.headers.set('Access-Control-Allow-Origin', requestOrigin);\n    }\n    response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n    response.headers.set('Access-Control-Max-Age', '86400');\n    return response;\n}\nfunction addSecurityHeaders(response) {\n    response.headers.set('X-Content-Type-Options', 'nosniff');\n    response.headers.set('X-Frame-Options', 'DENY');\n    response.headers.set('X-XSS-Protection', '1; mode=block');\n    response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n    if (false) {}\n    return response;\n}\nfunction createSuccessResponse(data, message, status = 200) {\n    const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        success: true,\n        data,\n        message,\n        timestamp: new Date().toISOString()\n    }, {\n        status\n    });\n    return addSecurityHeaders(response);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/api-middleware.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeDatabase: () => (/* binding */ closeDatabase),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   initializeDatabase: () => (/* binding */ initializeDatabase),\n/* harmony export */   logToDatabase: () => (/* binding */ logToDatabase),\n/* harmony export */   sql: () => (/* reexport safe */ _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__.sql)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/postgres */ \"(rsc)/./node_modules/@vercel/postgres/dist/index-node.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nclass DatabaseConnection {\n    constructor(){\n        this.pool = null;\n        this.isVercel = false;\n        this.isVercel = !!process.env.POSTGRES_URL;\n    }\n    getConfig() {\n        if (this.isVercel) {\n            return {\n                host: process.env.POSTGRES_HOST,\n                port: 5432,\n                database: process.env.POSTGRES_DATABASE,\n                user: process.env.POSTGRES_USER,\n                password: process.env.POSTGRES_PASSWORD,\n                ssl: true,\n                max: 20,\n                idleTimeoutMillis: 30000,\n                connectionTimeoutMillis: 2000\n            };\n        }\n        return {\n            host: process.env.DATABASE_HOST || 'localhost',\n            port: parseInt(process.env.DATABASE_PORT || '5432'),\n            database: process.env.DATABASE_NAME || 'hotdog_diaries_dev',\n            user: process.env.DATABASE_USER || 'postgres',\n            password: process.env.DATABASE_PASSWORD || 'password',\n            ssl: false,\n            max: 10,\n            idleTimeoutMillis: 30000,\n            connectionTimeoutMillis: 2000\n        };\n    }\n    async connect() {\n        if (this.pool) {\n            return;\n        }\n        const config = this.getConfig();\n        this.pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool(config);\n        this.pool.on('error', (err)=>{\n            console.error('Unexpected database error on idle client', err);\n        });\n        this.pool.on('connect', ()=>{\n            console.log('Database connection established');\n        });\n        this.pool.on('remove', ()=>{\n            console.log('Database connection removed');\n        });\n        try {\n            const client = await this.pool.connect();\n            await client.query('SELECT NOW()');\n            client.release();\n            console.log('Database connection successful');\n        } catch (error) {\n            console.error('Database connection failed:', error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        if (this.pool) {\n            await this.pool.end();\n            this.pool = null;\n            console.log('Database connection closed');\n        }\n    }\n    async query(text, params) {\n        if (this.isVercel) {\n            return await _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__.sql.query(text, params || []);\n        }\n        if (!this.pool) {\n            await this.connect();\n        }\n        const start = Date.now();\n        try {\n            const result = await this.pool.query(text, params);\n            const duration = Date.now() - start;\n            console.log('Query executed', {\n                text,\n                duration,\n                rows: result.rowCount\n            });\n            return result;\n        } catch (error) {\n            const duration = Date.now() - start;\n            console.error('Query error', {\n                text,\n                duration,\n                error\n            });\n            throw error;\n        }\n    }\n    async getClient() {\n        if (this.isVercel) {\n            throw new Error('Client connections not supported in Vercel environment');\n        }\n        if (!this.pool) {\n            throw new Error('Database not connected');\n        }\n        return await this.pool.connect();\n    }\n    async healthCheck() {\n        try {\n            const start = Date.now();\n            await this.query('SELECT 1 as health_check');\n            const latency = Date.now() - start;\n            return {\n                connected: true,\n                latency\n            };\n        } catch (error) {\n            return {\n                connected: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    async transaction(callback) {\n        if (this.isVercel) {\n            throw new Error('Transactions not supported in Vercel environment with @vercel/postgres');\n        }\n        const client = await this.getClient();\n        try {\n            await client.query('BEGIN');\n            const result = await callback(client);\n            await client.query('COMMIT');\n            return result;\n        } catch (error) {\n            await client.query('ROLLBACK');\n            throw error;\n        } finally{\n            client.release();\n        }\n    }\n}\nconst db = new DatabaseConnection();\nasync function initializeDatabase() {\n    try {\n        await db.connect();\n        console.log('Database initialized successfully');\n    } catch (error) {\n        console.error('Failed to initialize database:', error);\n        throw error;\n    }\n}\nasync function closeDatabase() {\n    try {\n        await db.disconnect();\n        console.log('Database closed successfully');\n    } catch (error) {\n        console.error('Failed to close database:', error);\n        throw error;\n    }\n}\nasync function logToDatabase(level, message, component, metadata) {\n    try {\n        // Convert LogLevel enum to database-compatible string\n        let dbLevel;\n        switch(level){\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.DEBUG:\n                dbLevel = 'debug';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.INFO:\n                dbLevel = 'info';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.WARN:\n                dbLevel = 'warning';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR:\n                dbLevel = 'error';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.FATAL:\n                dbLevel = 'error'; // Map FATAL to error since it's not in constraint\n                break;\n            default:\n                dbLevel = 'info';\n        }\n        await db.query(`INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n       VALUES ($1, $2, $3, $4, NOW())`, [\n            dbLevel,\n            message,\n            component,\n            metadata ? JSON.stringify(metadata) : null\n        ]);\n    } catch (error) {\n        console.error('Failed to log to database:', error);\n    }\n}\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/mastodon-monitoring.ts":
/*!*********************************************!*\
  !*** ./lib/services/mastodon-monitoring.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MastodonMonitoringService: () => (/* binding */ MastodonMonitoringService),\n/* harmony export */   mastodonMonitoringService: () => (/* binding */ mastodonMonitoringService)\n/* harmony export */ });\n/* harmony import */ var _mastodon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mastodon */ \"(rsc)/./lib/services/mastodon.ts\");\n/* harmony import */ var _mastodon_scanning__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mastodon-scanning */ \"(rsc)/./lib/services/mastodon-scanning.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_mastodon__WEBPACK_IMPORTED_MODULE_0__, _mastodon_scanning__WEBPACK_IMPORTED_MODULE_1__]);\n([_mastodon__WEBPACK_IMPORTED_MODULE_0__, _mastodon_scanning__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\nclass MastodonMonitoringService {\n    async startHealthMonitoring() {\n        console.log('Starting Mastodon health monitoring...');\n        // Run initial health check\n        await this.performHealthCheck();\n        // Schedule recurring health checks every 5 minutes\n        this.healthCheckInterval = setInterval(async ()=>{\n            await this.performHealthCheck();\n        }, 5 * 60 * 1000);\n    }\n    async stopHealthMonitoring() {\n        if (this.healthCheckInterval) {\n            clearInterval(this.healthCheckInterval);\n            this.healthCheckInterval = undefined;\n            console.log('Stopped Mastodon health monitoring');\n        }\n    }\n    async performHealthCheck() {\n        const config = await _mastodon__WEBPACK_IMPORTED_MODULE_0__.mastodonService.getConfig();\n        const instanceHealthResults = [];\n        // Check each instance\n        for (const instance of config.instances){\n            const health = await this.checkInstanceHealth(instance);\n            instanceHealthResults.push(health);\n            this.instanceHealthCache.set(instance.domain, health);\n        }\n        // Get scanning service status\n        const scanningStats = await _mastodon_scanning__WEBPACK_IMPORTED_MODULE_1__.mastodonScanningService.getScanningStats();\n        const scanningService = {\n            isRunning: _mastodon_scanning__WEBPACK_IMPORTED_MODULE_1__.mastodonScanningService.isCurrentlyScanning(),\n            lastScanTime: scanningStats.lastScanTime,\n            totalScans: scanningStats.totalScans,\n            successRate: scanningStats.successRate\n        };\n        // Calculate overall health\n        const healthScore = this.calculateHealthScore(instanceHealthResults, scanningService);\n        const overallStatus = this.determineOverallStatus(healthScore);\n        // Generate alerts\n        this.updateAlerts(instanceHealthResults, scanningService);\n        const systemHealth = {\n            overallStatus,\n            healthScore,\n            instances: instanceHealthResults,\n            scanningService,\n            alerts: this.alerts.slice(-10) // Keep last 10 alerts\n        };\n        return systemHealth;\n    }\n    async checkInstanceHealth(instance) {\n        const startTime = Date.now();\n        const health = {\n            domain: instance.domain,\n            name: instance.name,\n            isOnline: false,\n            responseTime: 0,\n            lastChecked: new Date(),\n            errorCount: instance.errorCount,\n            successCount: instance.successCount,\n            uptime: 0\n        };\n        try {\n            // Test basic connectivity\n            const response = await fetch(`https://${instance.domain}/api/v1/instance`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'User-Agent': 'HotdogDiaries/1.0'\n                },\n                signal: AbortSignal.timeout(10000) // 10 second timeout\n            });\n            health.responseTime = Date.now() - startTime;\n            health.isOnline = response.ok;\n            if (response.ok) {\n                const instanceInfo = await response.json();\n                health.instanceInfo = {\n                    version: instanceInfo.version || 'unknown',\n                    userCount: instanceInfo.stats?.user_count || 0,\n                    statusCount: instanceInfo.stats?.status_count || 0,\n                    description: instanceInfo.description || ''\n                };\n            }\n        } catch (error) {\n            health.responseTime = Date.now() - startTime;\n            health.isOnline = false;\n            console.error(`Health check failed for ${instance.domain}:`, error);\n        }\n        // Calculate uptime percentage\n        const totalChecks = health.errorCount + health.successCount;\n        health.uptime = totalChecks > 0 ? health.successCount / totalChecks : 0;\n        return health;\n    }\n    calculateHealthScore(instances, scanningService) {\n        let score = 0;\n        const weights = {\n            instanceHealth: 0.6,\n            scanningService: 0.4\n        };\n        // Instance health score (60%)\n        if (instances.length > 0) {\n            const onlineInstances = instances.filter((i)=>i.isOnline).length;\n            const avgResponseTime = instances.reduce((sum, i)=>sum + i.responseTime, 0) / instances.length;\n            const avgUptime = instances.reduce((sum, i)=>sum + i.uptime, 0) / instances.length;\n            const onlineScore = onlineInstances / instances.length * 100;\n            const responseScore = Math.max(0, 100 - avgResponseTime / 100) // Penalty for slow responses\n            ;\n            const uptimeScore = avgUptime * 100;\n            score += weights.instanceHealth * (onlineScore * 0.4 + responseScore * 0.3 + uptimeScore * 0.3);\n        }\n        // Scanning service score (40%)\n        if (scanningService.totalScans > 0) {\n            const scanningHealthScore = scanningService.successRate * 100;\n            score += weights.scanningService * scanningHealthScore;\n        } else {\n            // If no scans yet, give neutral score\n            score += weights.scanningService * 50;\n        }\n        return Math.round(score);\n    }\n    determineOverallStatus(healthScore) {\n        if (healthScore >= 80) return 'healthy';\n        if (healthScore >= 60) return 'warning';\n        return 'error';\n    }\n    updateAlerts(instances, scanningService) {\n        const now = new Date();\n        // Check for offline instances\n        for (const instance of instances){\n            if (!instance.isOnline) {\n                this.addAlert('error', `Instance ${instance.domain} is offline`, now, instance.domain);\n            } else if (instance.responseTime > 5000) {\n                this.addAlert('warning', `Instance ${instance.domain} is responding slowly (${instance.responseTime}ms)`, now, instance.domain);\n            }\n        }\n        // Check scanning service\n        if (scanningService.totalScans > 0 && scanningService.successRate < 0.5) {\n            this.addAlert('error', `Scanning success rate is low (${Math.round(scanningService.successRate * 100)}%)`, now);\n        }\n        // Check if scanning is stalled\n        if (scanningService.lastScanTime) {\n            const timeSinceLastScan = now.getTime() - scanningService.lastScanTime.getTime();\n            const twoHoursInMs = 2 * 60 * 60 * 1000;\n            if (timeSinceLastScan > twoHoursInMs) {\n                this.addAlert('warning', 'No scans performed in the last 2 hours', now);\n            }\n        }\n        // Keep only recent alerts (last 24 hours)\n        const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n        this.alerts = this.alerts.filter((alert)=>alert.timestamp > oneDayAgo);\n    }\n    addAlert(level, message, timestamp, instance) {\n        // Avoid duplicate alerts\n        const recentAlert = this.alerts.find((alert)=>alert.message === message && alert.instance === instance && timestamp.getTime() - alert.timestamp.getTime() < 30 * 60 * 1000 // 30 minutes\n        );\n        if (!recentAlert) {\n            this.alerts.push({\n                level,\n                message,\n                timestamp,\n                instance\n            });\n        }\n    }\n    async getSystemHealth() {\n        return await this.performHealthCheck();\n    }\n    async getInstanceHealth(domain) {\n        return this.instanceHealthCache.get(domain) || null;\n    }\n    async testInstanceConnection(domain) {\n        const startTime = Date.now();\n        try {\n            const response = await fetch(`https://${domain}/api/v1/instance`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'User-Agent': 'HotdogDiaries/1.0'\n                },\n                signal: AbortSignal.timeout(10000)\n            });\n            const responseTime = Date.now() - startTime;\n            if (response.ok) {\n                const instanceInfo = await response.json();\n                return {\n                    isOnline: true,\n                    responseTime,\n                    instanceInfo\n                };\n            } else {\n                return {\n                    isOnline: false,\n                    responseTime,\n                    error: `HTTP ${response.status}: ${response.statusText}`\n                };\n            }\n        } catch (error) {\n            return {\n                isOnline: false,\n                responseTime: Date.now() - startTime,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    async getHealthSummary() {\n        const health = await this.getSystemHealth();\n        const onlineInstances = health.instances.filter((i)=>i.isOnline).length;\n        const avgResponseTime = health.instances.length > 0 ? health.instances.reduce((sum, i)=>sum + i.responseTime, 0) / health.instances.length : 0;\n        const avgUptime = health.instances.length > 0 ? health.instances.reduce((sum, i)=>sum + i.uptime, 0) / health.instances.length : 0;\n        const recentAlerts = health.alerts.filter((alert)=>{\n            const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n            return alert.timestamp > oneHourAgo;\n        });\n        let scanningStatus = 'inactive';\n        if (health.scanningService.isRunning) {\n            scanningStatus = 'active';\n        } else if (health.scanningService.totalScans > 0 && health.scanningService.successRate < 0.5) {\n            scanningStatus = 'error';\n        }\n        return {\n            totalInstances: health.instances.length,\n            onlineInstances,\n            averageResponseTime: Math.round(avgResponseTime),\n            overallUptime: Math.round(avgUptime * 100),\n            recentAlertCount: recentAlerts.length,\n            scanningStatus\n        };\n    }\n    constructor(){\n        this.instanceHealthCache = new Map();\n        this.alerts = [];\n    }\n}\nconst mastodonMonitoringService = new MastodonMonitoringService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/mastodon-monitoring.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/mastodon-scanning.ts":
/*!*******************************************!*\
  !*** ./lib/services/mastodon-scanning.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MastodonScanningService: () => (/* binding */ MastodonScanningService),\n/* harmony export */   mastodonScanningService: () => (/* binding */ mastodonScanningService)\n/* harmony export */ });\n/* harmony import */ var _mastodon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mastodon */ \"(rsc)/./lib/services/mastodon.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_mastodon__WEBPACK_IMPORTED_MODULE_0__, _lib_db__WEBPACK_IMPORTED_MODULE_2__]);\n([_mastodon__WEBPACK_IMPORTED_MODULE_0__, _lib_db__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nclass MastodonScanningService {\n    async startAutomaticScanning() {\n        if (this.scanInterval) {\n            clearInterval(this.scanInterval);\n        }\n        const config = await _mastodon__WEBPACK_IMPORTED_MODULE_0__.mastodonService.getConfig();\n        const intervalMs = config.scanIntervalMinutes * 60 * 1000;\n        console.log(`Starting Mastodon automatic scanning every ${config.scanIntervalMinutes} minutes`);\n        // Run initial scan\n        this.performScan();\n        // Schedule recurring scans\n        this.scanInterval = setInterval(()=>{\n            this.performScan();\n        }, intervalMs);\n    }\n    async stopAutomaticScanning() {\n        if (this.scanInterval) {\n            clearInterval(this.scanInterval);\n            this.scanInterval = undefined;\n            console.log('Stopped Mastodon automatic scanning');\n        }\n    }\n    async performScan() {\n        if (this.isScanning) {\n            throw new Error('Scan already in progress');\n        }\n        const scanId = `mastodon_${Date.now()}`;\n        const startTime = Date.now();\n        const scanResult = {\n            scanId,\n            timestamp: new Date(),\n            postsFound: 0,\n            postsProcessed: 0,\n            postsAdded: 0,\n            instancesScanned: [],\n            errors: [],\n            scanDurationMs: 0\n        };\n        try {\n            this.isScanning = true;\n            console.log(`Starting Mastodon scan: ${scanId}`);\n            // Get posts from Mastodon\n            const posts = await _mastodon__WEBPACK_IMPORTED_MODULE_0__.mastodonService.scanForHotdogContent();\n            scanResult.postsFound = posts.length;\n            if (posts.length === 0) {\n                console.log('No hotdog content found on Mastodon');\n                return scanResult;\n            }\n            // Process each post\n            for (const post of posts){\n                try {\n                    await this.processPost(post);\n                    scanResult.postsProcessed++;\n                } catch (error) {\n                    console.error(`Failed to process Mastodon post ${post.id}:`, error);\n                    scanResult.errors.push({\n                        instance: post.instance,\n                        error: error instanceof Error ? error.message : 'Unknown error',\n                        timestamp: new Date()\n                    });\n                }\n            }\n            // Get unique instances that were scanned\n            scanResult.instancesScanned = [\n                ...new Set(posts.map((post)=>post.instance))\n            ];\n            this.lastScanTime = new Date();\n            console.log(`Mastodon scan completed: ${scanResult.postsProcessed}/${scanResult.postsFound} posts processed`);\n        } catch (error) {\n            console.error('Mastodon scan failed:', error);\n            scanResult.errors.push({\n                instance: 'system',\n                error: error instanceof Error ? error.message : 'Unknown system error',\n                timestamp: new Date()\n            });\n        } finally{\n            this.isScanning = false;\n            scanResult.scanDurationMs = Date.now() - startTime;\n            // Store scan results\n            await this.storeScanResult(scanResult);\n        }\n        return scanResult;\n    }\n    async processPost(post) {\n        try {\n            // Check if we already have this post\n            const existingPostResult = await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query('SELECT id FROM content_queue WHERE original_url = $1', [\n                post.url\n            ]);\n            if (existingPostResult.rows.length > 0) {\n                console.log(`Mastodon post already exists: ${post.url}`);\n                return;\n            }\n            // Transform to our format\n            const hotdogPost = _mastodon__WEBPACK_IMPORTED_MODULE_0__.mastodonService.transformToHotdogPost(post);\n            // Generate content hash for deduplication\n            const crypto = __webpack_require__(/*! crypto */ \"crypto\");\n            const contentHash = crypto.createHash('sha256').update(`${hotdogPost.original_url}_${hotdogPost.content_text}`).digest('hex').substring(0, 16);\n            // Insert into content queue\n            const insertResult = await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(`\n        INSERT INTO content_queue (\n          content_text,\n          content_type,\n          source_platform,\n          original_url,\n          original_author,\n          content_image_url,\n          content_video_url,\n          scraped_at,\n          content_hash,\n          mastodon_data\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\n        RETURNING id\n      `, [\n                hotdogPost.content_text,\n                hotdogPost.content_type,\n                hotdogPost.source_platform,\n                hotdogPost.original_url,\n                hotdogPost.original_author,\n                hotdogPost.content_image_url,\n                hotdogPost.content_video_url,\n                hotdogPost.scraped_at,\n                contentHash,\n                JSON.stringify(hotdogPost.mastodon_data)\n            ]);\n            const contentId = insertResult.rows[0].id;\n            console.log(`Added Mastodon post to queue: ${contentId} from ${post.instance}`);\n        } catch (error) {\n            console.error('Failed to process Mastodon post:', error);\n            throw error;\n        }\n    }\n    async storeScanResult(result) {\n        try {\n            await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(`\n        INSERT INTO mastodon_scan_results (\n          scan_id,\n          timestamp,\n          posts_found,\n          posts_processed,\n          posts_added,\n          instances_scanned,\n          errors,\n          scan_duration_ms\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n      `, [\n                result.scanId,\n                result.timestamp,\n                result.postsFound,\n                result.postsProcessed,\n                result.postsAdded,\n                JSON.stringify(result.instancesScanned),\n                JSON.stringify(result.errors),\n                result.scanDurationMs\n            ]);\n        } catch (error) {\n            console.error('Failed to store Mastodon scan result:', error);\n        }\n    }\n    async getRecentScanResults(limit = 10) {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(`\n        SELECT \n          scan_id,\n          timestamp,\n          posts_found,\n          posts_processed,\n          posts_added,\n          instances_scanned,\n          errors,\n          scan_duration_ms\n        FROM mastodon_scan_results \n        ORDER BY timestamp DESC \n        LIMIT $1\n      `, [\n                limit\n            ]);\n            return result.rows.map((row)=>({\n                    scanId: row.scan_id,\n                    timestamp: row.timestamp,\n                    postsFound: row.posts_found,\n                    postsProcessed: row.posts_processed,\n                    postsAdded: row.posts_added,\n                    instancesScanned: JSON.parse(row.instances_scanned),\n                    errors: JSON.parse(row.errors),\n                    scanDurationMs: row.scan_duration_ms\n                }));\n        } catch (error) {\n            console.error('Failed to get Mastodon scan results:', error);\n            return [];\n        }\n    }\n    async getScanningStats() {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(`\n        SELECT \n          COUNT(*) as total_scans,\n          SUM(posts_found) as total_posts_found,\n          SUM(posts_processed) as total_posts_processed,\n          SUM(posts_added) as total_posts_added,\n          AVG(scan_duration_ms) as avg_scan_duration\n        FROM mastodon_scan_results\n      `);\n            const stats = result.rows[0];\n            const successfulScans = await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(`\n        SELECT COUNT(*) as successful_scans\n        FROM mastodon_scan_results\n        WHERE posts_processed > 0\n      `);\n            return {\n                totalScans: parseInt(stats.total_scans) || 0,\n                totalPostsFound: parseInt(stats.total_posts_found) || 0,\n                totalPostsProcessed: parseInt(stats.total_posts_processed) || 0,\n                totalPostsAdded: parseInt(stats.total_posts_added) || 0,\n                averageScanDuration: parseFloat(stats.avg_scan_duration) || 0,\n                lastScanTime: this.lastScanTime,\n                isScanning: this.isScanning,\n                successRate: stats.total_scans > 0 ? parseInt(successfulScans.rows[0].successful_scans) / parseInt(stats.total_scans) : 0\n            };\n        } catch (error) {\n            console.error('Failed to get Mastodon scanning stats:', error);\n            return {\n                totalScans: 0,\n                totalPostsFound: 0,\n                totalPostsProcessed: 0,\n                totalPostsAdded: 0,\n                averageScanDuration: 0,\n                lastScanTime: this.lastScanTime,\n                isScanning: this.isScanning,\n                successRate: 0\n            };\n        }\n    }\n    async getContentAddedToday() {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(`\n        SELECT COUNT(*) as count\n        FROM content_queue\n        WHERE source_platform = $1\n        AND scraped_at >= CURRENT_DATE\n      `, [\n                _types__WEBPACK_IMPORTED_MODULE_1__.SourcePlatform.MASTODON\n            ]);\n            return parseInt(result.rows[0].count) || 0;\n        } catch (error) {\n            console.error('Failed to get Mastodon content added today:', error);\n            return 0;\n        }\n    }\n    async getTotalContentCount() {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(`\n        SELECT COUNT(*) as count\n        FROM content_queue\n        WHERE source_platform = $1\n      `, [\n                _types__WEBPACK_IMPORTED_MODULE_1__.SourcePlatform.MASTODON\n            ]);\n            return parseInt(result.rows[0].count) || 0;\n        } catch (error) {\n            console.error('Failed to get total Mastodon content count:', error);\n            return 0;\n        }\n    }\n    isCurrentlyScanning() {\n        return this.isScanning;\n    }\n    getLastScanTime() {\n        return this.lastScanTime;\n    }\n    async testScan() {\n        console.log('Running Mastodon test scan...');\n        // Temporarily set a small limit for testing\n        const config = await _mastodon__WEBPACK_IMPORTED_MODULE_0__.mastodonService.getConfig();\n        const originalMax = config.maxPostsPerScan;\n        await _mastodon__WEBPACK_IMPORTED_MODULE_0__.mastodonService.updateConfig({\n            maxPostsPerScan: 5\n        });\n        try {\n            const result = await this.performScan();\n            console.log('Test scan completed:', result);\n            return result;\n        } finally{\n            // Restore original config\n            await _mastodon__WEBPACK_IMPORTED_MODULE_0__.mastodonService.updateConfig({\n                maxPostsPerScan: originalMax\n            });\n        }\n    }\n    constructor(){\n        this.isScanning = false;\n    }\n}\nconst mastodonScanningService = new MastodonScanningService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/mastodon-scanning.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/mastodon.ts":
/*!**********************************!*\
  !*** ./lib/services/mastodon.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MastodonService: () => (/* binding */ MastodonService),\n/* harmony export */   mastodonService: () => (/* binding */ mastodonService)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_1__]);\n_lib_db__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nclass MastodonService {\n    constructor(){\n        this.defaultInstances = [\n            {\n                domain: 'mastodon.social',\n                name: 'Mastodon Social',\n                isActive: true,\n                rateLimitPerMinute: 60,\n                errorCount: 0,\n                successCount: 0\n            },\n            {\n                domain: 'mas.to',\n                name: 'Mas.to',\n                isActive: true,\n                rateLimitPerMinute: 60,\n                errorCount: 0,\n                successCount: 0\n            },\n            {\n                domain: 'foodie.fm',\n                name: 'Foodie FM',\n                isActive: true,\n                rateLimitPerMinute: 30,\n                errorCount: 0,\n                successCount: 0\n            }\n        ];\n        this.defaultSearchTerms = [\n            'hotdog',\n            'hot dog',\n            'frankfurter',\n            'wiener',\n            'sausage sandwich'\n        ];\n        this.defaultHashtags = [\n            'hotdog',\n            'hotdogs',\n            'frankfurter',\n            'streetfood',\n            'food',\n            'cooking',\n            'foodie'\n        ];\n        this.config = {\n            instances: this.defaultInstances,\n            searchTerms: this.defaultSearchTerms,\n            hashtagsToTrack: this.defaultHashtags,\n            enabledInstances: [\n                'mastodon.social',\n                'mas.to'\n            ],\n            scanIntervalMinutes: 30,\n            maxPostsPerScan: 50,\n            minEngagementThreshold: 1\n        };\n    }\n    async getConfig() {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.query(`\n        SELECT \n          instances,\n          search_terms,\n          hashtags_to_track,\n          enabled_instances,\n          scan_interval_minutes,\n          max_posts_per_scan,\n          min_engagement_threshold\n        FROM mastodon_scan_config \n        ORDER BY updated_at DESC \n        LIMIT 1\n      `);\n            if (result.rows.length === 0) {\n                // Return default config if no database config exists\n                return this.config;\n            }\n            const row = result.rows[0];\n            return {\n                instances: row.instances,\n                searchTerms: row.search_terms,\n                hashtagsToTrack: row.hashtags_to_track,\n                enabledInstances: row.enabled_instances,\n                scanIntervalMinutes: row.scan_interval_minutes,\n                maxPostsPerScan: row.max_posts_per_scan,\n                minEngagementThreshold: row.min_engagement_threshold\n            };\n        } catch (error) {\n            console.error('Failed to load Mastodon config from database:', error);\n            // Fallback to default config\n            return this.config;\n        }\n    }\n    async updateConfig(newConfig) {\n        try {\n            // Get current config first\n            const currentConfig = await this.getConfig();\n            const updatedConfig = {\n                ...currentConfig,\n                ...newConfig\n            };\n            // Update database\n            await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.query(`\n        UPDATE mastodon_scan_config SET\n          instances = $1,\n          search_terms = $2,\n          hashtags_to_track = $3,\n          enabled_instances = $4,\n          scan_interval_minutes = $5,\n          max_posts_per_scan = $6,\n          min_engagement_threshold = $7,\n          updated_at = CURRENT_TIMESTAMP\n        WHERE id = (\n          SELECT id FROM mastodon_scan_config \n          ORDER BY updated_at DESC \n          LIMIT 1\n        )\n      `, [\n                JSON.stringify(updatedConfig.instances),\n                JSON.stringify(updatedConfig.searchTerms),\n                JSON.stringify(updatedConfig.hashtagsToTrack),\n                JSON.stringify(updatedConfig.enabledInstances),\n                updatedConfig.scanIntervalMinutes,\n                updatedConfig.maxPostsPerScan,\n                updatedConfig.minEngagementThreshold\n            ]);\n            // Update in-memory config as well\n            this.config = updatedConfig;\n        } catch (error) {\n            console.error('Failed to update Mastodon config:', error);\n            throw error;\n        }\n    }\n    async testInstanceConnection(domain) {\n        try {\n            const response = await fetch(`https://${domain}/api/v1/instance`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'User-Agent': 'HotdogDiaries/1.0'\n                }\n            });\n            return response.ok;\n        } catch (error) {\n            console.error(`Failed to connect to ${domain}:`, error);\n            return false;\n        }\n    }\n    async searchPosts(instance, query, limit = 20) {\n        try {\n            const searchUrl = `https://${instance}/api/v2/search`;\n            const params = new URLSearchParams({\n                q: query,\n                type: 'statuses',\n                limit: limit.toString(),\n                resolve: 'false'\n            });\n            const response = await fetch(`${searchUrl}?${params}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'User-Agent': 'HotdogDiaries/1.0'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`Search failed: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            return this.transformPosts(data.statuses || [], instance);\n        } catch (error) {\n            console.error(`Search failed on ${instance}:`, error);\n            return [];\n        }\n    }\n    async getPublicTimeline(instance, limit = 20) {\n        try {\n            const timelineUrl = `https://${instance}/api/v1/timelines/public`;\n            const params = new URLSearchParams({\n                limit: limit.toString(),\n                local: 'true'\n            });\n            const response = await fetch(`${timelineUrl}?${params}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'User-Agent': 'HotdogDiaries/1.0'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`Timeline fetch failed: ${response.status} ${response.statusText}`);\n            }\n            const posts = await response.json();\n            return this.transformPosts(posts, instance);\n        } catch (error) {\n            console.error(`Timeline fetch failed on ${instance}:`, error);\n            return [];\n        }\n    }\n    async searchHashtag(instance, hashtag, limit = 20) {\n        try {\n            const hashtagUrl = `https://${instance}/api/v1/timelines/tag/${hashtag}`;\n            const params = new URLSearchParams({\n                limit: limit.toString()\n            });\n            const response = await fetch(`${hashtagUrl}?${params}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'User-Agent': 'HotdogDiaries/1.0'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`Hashtag search failed: ${response.status} ${response.statusText}`);\n            }\n            const posts = await response.json();\n            return this.transformPosts(posts, instance);\n        } catch (error) {\n            console.error(`Hashtag search failed on ${instance}:`, error);\n            return [];\n        }\n    }\n    transformPosts(rawPosts, instance) {\n        return rawPosts.filter((post)=>post && post.content && post.account).map((post)=>({\n                id: post.id,\n                content: this.stripHtml(post.content),\n                createdAt: new Date(post.created_at),\n                author: {\n                    username: post.account.username,\n                    displayName: post.account.display_name || post.account.username,\n                    profileUrl: post.account.url\n                },\n                mediaAttachments: (post.media_attachments || []).map((media)=>({\n                        type: media.type,\n                        url: media.url,\n                        previewUrl: media.preview_url,\n                        description: media.description\n                    })),\n                stats: {\n                    favouritesCount: post.favourites_count || 0,\n                    reblogsCount: post.reblogs_count || 0,\n                    repliesCount: post.replies_count || 0\n                },\n                tags: (post.tags || []).map((tag)=>tag.name),\n                url: post.url,\n                instance\n            }));\n    }\n    stripHtml(html) {\n        return html.replace(/<[^>]*>/g, '').replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"').replace(/&#39;/g, \"'\").trim();\n    }\n    async scanForHotdogContent() {\n        const allPosts = [];\n        const enabledInstances = this.config.instances.filter((instance)=>this.config.enabledInstances.includes(instance.domain));\n        for (const instance of enabledInstances){\n            try {\n                // Search for each search term\n                for (const term of this.config.searchTerms){\n                    const posts = await this.searchPosts(instance.domain, term, Math.floor(this.config.maxPostsPerScan / this.config.searchTerms.length));\n                    allPosts.push(...posts);\n                }\n                // Search for each hashtag\n                for (const hashtag of this.config.hashtagsToTrack){\n                    const posts = await this.searchHashtag(instance.domain, hashtag, 10);\n                    allPosts.push(...posts);\n                }\n                // Update success count\n                const instanceConfig = this.config.instances.find((i)=>i.domain === instance.domain);\n                if (instanceConfig) {\n                    instanceConfig.successCount++;\n                    instanceConfig.lastScanTime = new Date();\n                }\n                // Rate limiting - wait between instances\n                await new Promise((resolve)=>setTimeout(resolve, 2000));\n            } catch (error) {\n                console.error(`Scan failed for ${instance.domain}:`, error);\n                // Update error count\n                const instanceConfig = this.config.instances.find((i)=>i.domain === instance.domain);\n                if (instanceConfig) {\n                    instanceConfig.errorCount++;\n                }\n            }\n        }\n        // Filter for quality content\n        return this.filterQualityContent(allPosts);\n    }\n    filterQualityContent(posts) {\n        const uniquePosts = new Map();\n        for (const post of posts){\n            // Skip if content doesn't actually contain hotdog references\n            const contentLower = post.content.toLowerCase();\n            const hasHotdogContent = this.config.searchTerms.some((term)=>contentLower.includes(term.toLowerCase()));\n            if (!hasHotdogContent) continue;\n            // Skip if engagement is too low\n            const totalEngagement = post.stats.favouritesCount + post.stats.reblogsCount + post.stats.repliesCount;\n            if (totalEngagement < this.config.minEngagementThreshold) continue;\n            // Skip if content is too short\n            if (post.content.length < 10) continue;\n            // Use URL as unique key to avoid duplicates\n            uniquePosts.set(post.url, post);\n        }\n        return Array.from(uniquePosts.values()).sort((a, b)=>{\n            const aEngagement = a.stats.favouritesCount + a.stats.reblogsCount;\n            const bEngagement = b.stats.favouritesCount + b.stats.reblogsCount;\n            return bEngagement - aEngagement;\n        }).slice(0, this.config.maxPostsPerScan);\n    }\n    getContentType(post) {\n        if (post.mediaAttachments.length > 0) {\n            const hasImages = post.mediaAttachments.some((media)=>media.type === 'image');\n            const hasVideos = post.mediaAttachments.some((media)=>media.type === 'video');\n            if (hasImages && hasVideos) return _types__WEBPACK_IMPORTED_MODULE_0__.ContentType.MIXED;\n            if (hasVideos) return _types__WEBPACK_IMPORTED_MODULE_0__.ContentType.VIDEO;\n            if (hasImages) return _types__WEBPACK_IMPORTED_MODULE_0__.ContentType.IMAGE;\n        }\n        return _types__WEBPACK_IMPORTED_MODULE_0__.ContentType.TEXT;\n    }\n    transformToHotdogPost(post) {\n        return {\n            content_text: post.content,\n            content_type: this.getContentType(post),\n            source_platform: _types__WEBPACK_IMPORTED_MODULE_0__.SourcePlatform.MASTODON,\n            original_url: post.url,\n            original_author: `${post.author.displayName} (@${post.author.username})`,\n            content_image_url: post.mediaAttachments.find((media)=>media.type === 'image')?.url,\n            content_video_url: post.mediaAttachments.find((media)=>media.type === 'video')?.url,\n            scraped_at: new Date(),\n            mastodon_data: {\n                instance: post.instance,\n                postId: post.id,\n                author: post.author,\n                stats: post.stats,\n                tags: post.tags,\n                mediaAttachments: post.mediaAttachments\n            }\n        };\n    }\n    async getInstanceStats() {\n        try {\n            const config = await this.getConfig();\n            return config.instances.map((instance)=>({\n                    domain: instance.domain,\n                    name: instance.name,\n                    isActive: instance.isActive,\n                    lastScanTime: instance.lastScanTime,\n                    errorCount: instance.errorCount,\n                    successCount: instance.successCount,\n                    successRate: instance.successCount + instance.errorCount > 0 ? instance.successCount / (instance.successCount + instance.errorCount) : 0\n                }));\n        } catch (error) {\n            console.error('Failed to get instance stats:', error);\n            return [];\n        }\n    }\n}\nconst mastodonService = new MastodonService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/mastodon.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fmastodon%2Fstatus%2Froute&page=%2Fapi%2Fadmin%2Fmastodon%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fmastodon%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fmastodon%2Fstatus%2Froute&page=%2Fapi%2Fadmin%2Fmastodon%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fmastodon%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_mastodon_status_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/admin/mastodon/status/route.ts */ \"(rsc)/./app/api/admin/mastodon/status/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_mastodon_status_route_ts__WEBPACK_IMPORTED_MODULE_16__]);\n_Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_mastodon_status_route_ts__WEBPACK_IMPORTED_MODULE_16__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/admin/mastodon/status/route\",\n        pathname: \"/api/admin/mastodon/status\",\n        filename: \"route\",\n        bundlePath: \"app/api/admin/mastodon/status/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"/Users/adamshaw/Development/websites/hotdog-diaries/app/api/admin/mastodon/status/route.ts\",\n    nextConfigOutput,\n    userland: _Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_mastodon_status_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/admin/mastodon/status/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fmastodon%2Fstatus%2Froute&page=%2Fapi%2Fadmin%2Fmastodon%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fmastodon%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./types/index.ts":
/*!************************!*\
  !*** ./types/index.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentType: () => (/* binding */ ContentType),\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   SourcePlatform: () => (/* binding */ SourcePlatform)\n/* harmony export */ });\n// Enums\nvar ContentType = /*#__PURE__*/ function(ContentType) {\n    ContentType[\"TEXT\"] = \"text\";\n    ContentType[\"IMAGE\"] = \"image\";\n    ContentType[\"VIDEO\"] = \"video\";\n    ContentType[\"MIXED\"] = \"mixed\";\n    return ContentType;\n}({});\nvar SourcePlatform = /*#__PURE__*/ function(SourcePlatform) {\n    SourcePlatform[\"REDDIT\"] = \"reddit\";\n    SourcePlatform[\"YOUTUBE\"] = \"youtube\";\n    SourcePlatform[\"FLICKR\"] = \"flickr\";\n    SourcePlatform[\"UNSPLASH\"] = \"unsplash\";\n    SourcePlatform[\"NEWS\"] = \"news\";\n    SourcePlatform[\"MASTODON\"] = \"mastodon\";\n    return SourcePlatform;\n}({});\nvar LogLevel = /*#__PURE__*/ function(LogLevel) {\n    LogLevel[\"DEBUG\"] = \"debug\";\n    LogLevel[\"INFO\"] = \"info\";\n    LogLevel[\"WARN\"] = \"warn\";\n    LogLevel[\"ERROR\"] = \"error\";\n    LogLevel[\"FATAL\"] = \"fatal\";\n    return LogLevel;\n}({});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi90eXBlcy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUEwRkEsUUFBUTtBQUNELHlDQUFLQTs7Ozs7V0FBQUE7TUFLWDtBQUVNLDRDQUFLQzs7Ozs7OztXQUFBQTtNQU9YO0FBRU0sc0NBQUtDOzs7Ozs7V0FBQUE7TUFNWCIsInNvdXJjZXMiOlsiL1VzZXJzL2FkYW1zaGF3L0RldmVsb3BtZW50L3dlYnNpdGVzL2hvdGRvZy1kaWFyaWVzL3R5cGVzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoQ2hlY2tSZXNwb25zZSB7XG4gIHN0YXR1czogJ2hlYWx0aHknIHwgJ3VuaGVhbHRoeSdcbiAgdGltZXN0YW1wOiBzdHJpbmdcbiAgc2VydmljZTogc3RyaW5nXG4gIHZlcnNpb24/OiBzdHJpbmdcbiAgdXB0aW1lPzogbnVtYmVyXG4gIGVudmlyb25tZW50Pzogc3RyaW5nXG4gIGNoZWNrcz86IHtcbiAgICBkYXRhYmFzZT86IHN0cmluZ1xuICAgIHNvY2lhbE1lZGlhU2Nhbm5lcj86IHN0cmluZ1xuICAgIGNvbnRlbnRTY2hlZHVsZXI/OiBzdHJpbmdcbiAgfVxuICBlcnJvcj86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhvdGRvZ1Bvc3Qge1xuICBpZDogc3RyaW5nXG4gIGNvbnRlbnQ6IHN0cmluZ1xuICBpbWFnZVVybD86IHN0cmluZ1xuICBzb3VyY2U6ICdyZWRkaXQnIHwgJ3lvdXR1YmUnIHwgJ2ZsaWNrcicgfCAndW5zcGxhc2gnIHwgJ25ld3MnIHwgJ21hc3RvZG9uJ1xuICBzb3VyY2VVcmw6IHN0cmluZ1xuICB0aW1lc3RhbXA6IHN0cmluZ1xuICBlbmdhZ2VtZW50OiB7XG4gICAgbGlrZXM6IG51bWJlclxuICAgIHNoYXJlczogbnVtYmVyXG4gICAgY29tbWVudHM6IG51bWJlclxuICB9XG4gIHByb2Nlc3NlZDogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdkl0ZW0ge1xuICBocmVmOiBzdHJpbmdcbiAgbGFiZWw6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwaVJlc3BvbnNlPFQgPSBhbnk+IHtcbiAgc3VjY2VzczogYm9vbGVhblxuICBkYXRhPzogVFxuICBlcnJvcj86IHN0cmluZ1xuICBtZXNzYWdlPzogc3RyaW5nXG59XG5cbi8vIERhdGFiYXNlIEVudGl0eSBUeXBlc1xuZXhwb3J0IGludGVyZmFjZSBDb250ZW50UXVldWUge1xuICBpZDogbnVtYmVyXG4gIGNvbnRlbnRfdGV4dD86IHN0cmluZ1xuICBjb250ZW50X2ltYWdlX3VybD86IHN0cmluZ1xuICBjb250ZW50X3ZpZGVvX3VybD86IHN0cmluZ1xuICBjb250ZW50X3R5cGU6IENvbnRlbnRUeXBlXG4gIHNvdXJjZV9wbGF0Zm9ybTogU291cmNlUGxhdGZvcm1cbiAgb3JpZ2luYWxfdXJsOiBzdHJpbmdcbiAgb3JpZ2luYWxfYXV0aG9yPzogc3RyaW5nXG4gIHNjcmFwZWRfYXQ6IERhdGVcbiAgY29udGVudF9oYXNoOiBzdHJpbmdcbiAgaXNfcG9zdGVkOiBib29sZWFuXG4gIHBvc3RlZF9hdD86IERhdGVcbiAgaXNfYXBwcm92ZWQ6IGJvb2xlYW5cbiAgYWRtaW5fbm90ZXM/OiBzdHJpbmdcbiAgY3JlYXRlZF9hdDogRGF0ZVxuICB1cGRhdGVkX2F0OiBEYXRlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zdGVkQ29udGVudCB7XG4gIGlkOiBudW1iZXJcbiAgY29udGVudF9xdWV1ZV9pZDogbnVtYmVyXG4gIHBvc3RlZF9hdDogRGF0ZVxuICBzY2hlZHVsZWRfdGltZT86IERhdGVcbiAgcG9zdF9vcmRlcjogbnVtYmVyXG4gIGNyZWF0ZWRfYXQ6IERhdGVcbiAgdXBkYXRlZF9hdDogRGF0ZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN5c3RlbUxvZyB7XG4gIGlkOiBudW1iZXJcbiAgbG9nX2xldmVsOiBMb2dMZXZlbFxuICBtZXNzYWdlOiBzdHJpbmdcbiAgY29tcG9uZW50OiBzdHJpbmdcbiAgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gIGNyZWF0ZWRfYXQ6IERhdGVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBZG1pblVzZXIge1xuICBpZDogbnVtYmVyXG4gIHVzZXJuYW1lOiBzdHJpbmdcbiAgcGFzc3dvcmRfaGFzaDogc3RyaW5nXG4gIGxhc3RfbG9naW4/OiBEYXRlXG4gIGNyZWF0ZWRfYXQ6IERhdGVcbiAgdXBkYXRlZF9hdDogRGF0ZVxufVxuXG4vLyBFbnVtc1xuZXhwb3J0IGVudW0gQ29udGVudFR5cGUge1xuICBURVhUID0gJ3RleHQnLFxuICBJTUFHRSA9ICdpbWFnZScsXG4gIFZJREVPID0gJ3ZpZGVvJyxcbiAgTUlYRUQgPSAnbWl4ZWQnXG59XG5cbmV4cG9ydCBlbnVtIFNvdXJjZVBsYXRmb3JtIHtcbiAgUkVERElUID0gJ3JlZGRpdCcsXG4gIFlPVVRVQkUgPSAneW91dHViZScsXG4gIEZMSUNLUiA9ICdmbGlja3InLFxuICBVTlNQTEFTSCA9ICd1bnNwbGFzaCcsXG4gIE5FV1MgPSAnbmV3cycsXG4gIE1BU1RPRE9OID0gJ21hc3RvZG9uJ1xufVxuXG5leHBvcnQgZW51bSBMb2dMZXZlbCB7XG4gIERFQlVHID0gJ2RlYnVnJyxcbiAgSU5GTyA9ICdpbmZvJyxcbiAgV0FSTiA9ICd3YXJuJyxcbiAgRVJST1IgPSAnZXJyb3InLFxuICBGQVRBTCA9ICdmYXRhbCdcbn1cblxuLy8gQVBJIFJlcXVlc3QvUmVzcG9uc2UgVHlwZXNcbmV4cG9ydCBpbnRlcmZhY2UgQ29udGVudEFwaVJlc3BvbnNlIHtcbiAgc3VjY2VzczogYm9vbGVhblxuICBkYXRhOiB7XG4gICAgY29udGVudDogUG9zdGVkQ29udGVudFtdXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgcGFnZTogbnVtYmVyXG4gICAgICBsaW1pdDogbnVtYmVyXG4gICAgICB0b3RhbDogbnVtYmVyXG4gICAgICB0b3RhbFBhZ2VzOiBudW1iZXJcbiAgICB9XG4gIH1cbiAgbWVzc2FnZT86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFiYXNlSGVhbHRoQ2hlY2sge1xuICBjb25uZWN0ZWQ6IGJvb2xlYW5cbiAgbGF0ZW5jeT86IG51bWJlclxuICBlcnJvcj86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVuaGFuY2VkSGVhbHRoUmVzcG9uc2UgZXh0ZW5kcyBIZWFsdGhDaGVja1Jlc3BvbnNlIHtcbiAgY2hlY2tzOiB7XG4gICAgZGF0YWJhc2U6IERhdGFiYXNlSGVhbHRoQ2hlY2tcbiAgICBzb2NpYWxNZWRpYVNjYW5uZXI/OiBzdHJpbmdcbiAgICBjb250ZW50U2NoZWR1bGVyPzogc3RyaW5nXG4gIH1cbn0iXSwibmFtZXMiOlsiQ29udGVudFR5cGUiLCJTb3VyY2VQbGF0Zm9ybSIsIkxvZ0xldmVsIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./types/index.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = import("pg");;

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@neondatabase","vendor-chunks/ws","vendor-chunks/@vercel","vendor-chunks/node-gyp-build","vendor-chunks/bufferutil"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fmastodon%2Fstatus%2Froute&page=%2Fapi%2Fadmin%2Fmastodon%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fmastodon%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();