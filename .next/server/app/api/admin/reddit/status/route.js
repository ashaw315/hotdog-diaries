/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/admin/reddit/status/route";
exports.ids = ["app/api/admin/reddit/status/route"];
exports.modules = {

/***/ "(rsc)/./app/api/admin/reddit/status/route.ts":
/*!**********************************************!*\
  !*** ./app/api/admin/reddit/status/route.ts ***!
  \**********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_services_reddit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/services/reddit */ \"(rsc)/./lib/services/reddit.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_services_reddit__WEBPACK_IMPORTED_MODULE_1__, _lib_db__WEBPACK_IMPORTED_MODULE_2__]);\n([_lib_services_reddit__WEBPACK_IMPORTED_MODULE_1__, _lib_db__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\nasync function GET(request) {\n    try {\n        // TODO: Add authentication check here\n        // const auth = await verifyAdminAuth(request)\n        // if (!auth.success) {\n        //   return NextResponse.json(\n        //     { success: false, error: 'Unauthorized' },\n        //     { status: 401 }\n        //   )\n        // }\n        const redditService = new _lib_services_reddit__WEBPACK_IMPORTED_MODULE_1__.RedditService();\n        const status = await redditService.getApiStatus();\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: status,\n            message: 'Reddit API status retrieved successfully'\n        });\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        await (0,_lib_db__WEBPACK_IMPORTED_MODULE_2__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_3__.LogLevel.ERROR, 'REDDIT_STATUS_GET_ERROR', `Failed to get Reddit API status: ${errorMessage}`, {\n            error: errorMessage\n        });\n        // Return status with error information\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: {\n                isConnected: false,\n                rateLimits: {\n                    used: 0,\n                    remaining: 0,\n                    resetTime: new Date()\n                },\n                lastError: errorMessage,\n                lastRequest: new Date(),\n                userAgent: 'HotdogDiaries/1.0.0 by /u/hotdog_scanner'\n            },\n            message: 'Reddit API status retrieved (with errors)'\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2FkbWluL3JlZGRpdC9zdGF0dXMvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBdUQ7QUFDRjtBQUNiO0FBQ047QUFFM0IsZUFBZUksSUFBSUMsT0FBb0I7SUFDNUMsSUFBSTtRQUNGLHNDQUFzQztRQUN0Qyw4Q0FBOEM7UUFDOUMsdUJBQXVCO1FBQ3ZCLDhCQUE4QjtRQUM5QixpREFBaUQ7UUFDakQsc0JBQXNCO1FBQ3RCLE1BQU07UUFDTixJQUFJO1FBRUosTUFBTUMsZ0JBQWdCLElBQUlMLCtEQUFhQTtRQUN2QyxNQUFNTSxTQUFTLE1BQU1ELGNBQWNFLFlBQVk7UUFFL0MsT0FBT1IscURBQVlBLENBQUNTLElBQUksQ0FBQztZQUN2QkMsU0FBUztZQUNUQyxNQUFNSjtZQUNOSyxTQUFTO1FBQ1g7SUFFRixFQUFFLE9BQU9DLE9BQU87UUFDZCxNQUFNQyxlQUFlRCxpQkFBaUJFLFFBQVFGLE1BQU1ELE9BQU8sR0FBRztRQUU5RCxNQUFNVixzREFBYUEsQ0FDakJDLDRDQUFRQSxDQUFDYSxLQUFLLEVBQ2QsMkJBQ0EsQ0FBQyxpQ0FBaUMsRUFBRUYsY0FBYyxFQUNsRDtZQUFFRCxPQUFPQztRQUFhO1FBR3hCLHVDQUF1QztRQUN2QyxPQUFPZCxxREFBWUEsQ0FBQ1MsSUFBSSxDQUFDO1lBQ3ZCQyxTQUFTO1lBQ1RDLE1BQU07Z0JBQ0pNLGFBQWE7Z0JBQ2JDLFlBQVk7b0JBQ1ZDLE1BQU07b0JBQ05DLFdBQVc7b0JBQ1hDLFdBQVcsSUFBSUM7Z0JBQ2pCO2dCQUNBQyxXQUFXVDtnQkFDWFUsYUFBYSxJQUFJRjtnQkFDakJHLFdBQVc7WUFDYjtZQUNBYixTQUFTO1FBQ1g7SUFDRjtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvYWRhbXNoYXcvRGV2ZWxvcG1lbnQvd2Vic2l0ZXMvaG90ZG9nLWRpYXJpZXMvYXBwL2FwaS9hZG1pbi9yZWRkaXQvc3RhdHVzL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcidcbmltcG9ydCB7IFJlZGRpdFNlcnZpY2UgfSBmcm9tICdAL2xpYi9zZXJ2aWNlcy9yZWRkaXQnXG5pbXBvcnQgeyBsb2dUb0RhdGFiYXNlIH0gZnJvbSAnQC9saWIvZGInXG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gJ0AvdHlwZXMnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICAvLyBUT0RPOiBBZGQgYXV0aGVudGljYXRpb24gY2hlY2sgaGVyZVxuICAgIC8vIGNvbnN0IGF1dGggPSBhd2FpdCB2ZXJpZnlBZG1pbkF1dGgocmVxdWVzdClcbiAgICAvLyBpZiAoIWF1dGguc3VjY2Vzcykge1xuICAgIC8vICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgIC8vICAgICB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSxcbiAgICAvLyAgICAgeyBzdGF0dXM6IDQwMSB9XG4gICAgLy8gICApXG4gICAgLy8gfVxuXG4gICAgY29uc3QgcmVkZGl0U2VydmljZSA9IG5ldyBSZWRkaXRTZXJ2aWNlKClcbiAgICBjb25zdCBzdGF0dXMgPSBhd2FpdCByZWRkaXRTZXJ2aWNlLmdldEFwaVN0YXR1cygpXG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHN0YXR1cyxcbiAgICAgIG1lc3NhZ2U6ICdSZWRkaXQgQVBJIHN0YXR1cyByZXRyaWV2ZWQgc3VjY2Vzc2Z1bGx5J1xuICAgIH0pXG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgIFxuICAgIGF3YWl0IGxvZ1RvRGF0YWJhc2UoXG4gICAgICBMb2dMZXZlbC5FUlJPUixcbiAgICAgICdSRURESVRfU1RBVFVTX0dFVF9FUlJPUicsXG4gICAgICBgRmFpbGVkIHRvIGdldCBSZWRkaXQgQVBJIHN0YXR1czogJHtlcnJvck1lc3NhZ2V9YCxcbiAgICAgIHsgZXJyb3I6IGVycm9yTWVzc2FnZSB9XG4gICAgKVxuXG4gICAgLy8gUmV0dXJuIHN0YXR1cyB3aXRoIGVycm9yIGluZm9ybWF0aW9uXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGlzQ29ubmVjdGVkOiBmYWxzZSxcbiAgICAgICAgcmF0ZUxpbWl0czoge1xuICAgICAgICAgIHVzZWQ6IDAsXG4gICAgICAgICAgcmVtYWluaW5nOiAwLFxuICAgICAgICAgIHJlc2V0VGltZTogbmV3IERhdGUoKVxuICAgICAgICB9LFxuICAgICAgICBsYXN0RXJyb3I6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgbGFzdFJlcXVlc3Q6IG5ldyBEYXRlKCksXG4gICAgICAgIHVzZXJBZ2VudDogJ0hvdGRvZ0RpYXJpZXMvMS4wLjAgYnkgL3UvaG90ZG9nX3NjYW5uZXInXG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogJ1JlZGRpdCBBUEkgc3RhdHVzIHJldHJpZXZlZCAod2l0aCBlcnJvcnMpJ1xuICAgIH0pXG4gIH1cbn0iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiUmVkZGl0U2VydmljZSIsImxvZ1RvRGF0YWJhc2UiLCJMb2dMZXZlbCIsIkdFVCIsInJlcXVlc3QiLCJyZWRkaXRTZXJ2aWNlIiwic3RhdHVzIiwiZ2V0QXBpU3RhdHVzIiwianNvbiIsInN1Y2Nlc3MiLCJkYXRhIiwibWVzc2FnZSIsImVycm9yIiwiZXJyb3JNZXNzYWdlIiwiRXJyb3IiLCJFUlJPUiIsImlzQ29ubmVjdGVkIiwicmF0ZUxpbWl0cyIsInVzZWQiLCJyZW1haW5pbmciLCJyZXNldFRpbWUiLCJEYXRlIiwibGFzdEVycm9yIiwibGFzdFJlcXVlc3QiLCJ1c2VyQWdlbnQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/admin/reddit/status/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db-query-builder.ts":
/*!*********************************!*\
  !*** ./lib/db-query-builder.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeleteBuilder: () => (/* binding */ DeleteBuilder),\n/* harmony export */   InsertBuilder: () => (/* binding */ InsertBuilder),\n/* harmony export */   QueryBuilder: () => (/* binding */ QueryBuilder),\n/* harmony export */   UpdateBuilder: () => (/* binding */ UpdateBuilder),\n/* harmony export */   deleteFrom: () => (/* binding */ deleteFrom),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   update: () => (/* binding */ update)\n/* harmony export */ });\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./db */ \"(rsc)/./lib/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_db__WEBPACK_IMPORTED_MODULE_0__]);\n_db__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nclass QueryBuilder {\n    static table(tableName) {\n        const builder = new QueryBuilder();\n        builder.fromTable = tableName;\n        return builder;\n    }\n    select(fields) {\n        if (typeof fields === 'string') {\n            this.selectFields = [\n                fields\n            ];\n        } else {\n            this.selectFields = fields;\n        }\n        return this;\n    }\n    where(field, operator, value) {\n        this.whereConditions.push({\n            field,\n            operator,\n            value\n        });\n        return this;\n    }\n    whereIn(field, values) {\n        this.whereConditions.push({\n            field,\n            operator: 'IN',\n            values\n        });\n        return this;\n    }\n    whereNotIn(field, values) {\n        this.whereConditions.push({\n            field,\n            operator: 'NOT IN',\n            values\n        });\n        return this;\n    }\n    whereNull(field) {\n        this.whereConditions.push({\n            field,\n            operator: 'IS NULL'\n        });\n        return this;\n    }\n    whereNotNull(field) {\n        this.whereConditions.push({\n            field,\n            operator: 'IS NOT NULL'\n        });\n        return this;\n    }\n    orderBy(field, direction = 'ASC') {\n        this.orderByFields.push({\n            field,\n            direction\n        });\n        return this;\n    }\n    join(table, on, type = 'INNER') {\n        this.joinClauses.push({\n            type,\n            table,\n            on\n        });\n        return this;\n    }\n    leftJoin(table, on) {\n        return this.join(table, on, 'LEFT');\n    }\n    limit(count) {\n        this.limitCount = count;\n        return this;\n    }\n    offset(count) {\n        this.offsetCount = count;\n        return this;\n    }\n    build() {\n        this.parameters = [];\n        let paramIndex = 1;\n        // Build SELECT clause\n        const selectClause = `SELECT ${this.selectFields.join(', ')}`;\n        // Build FROM clause\n        let fromClause = `FROM ${this.fromTable}`;\n        // Build JOIN clauses\n        if (this.joinClauses.length > 0) {\n            fromClause += ' ' + this.joinClauses.map((join)=>`${join.type} JOIN ${join.table} ON ${join.on}`).join(' ');\n        }\n        // Build WHERE clause\n        let whereClause = '';\n        if (this.whereConditions.length > 0) {\n            const conditions = this.whereConditions.map((condition)=>{\n                switch(condition.operator){\n                    case 'IS NULL':\n                    case 'IS NOT NULL':\n                        return `${condition.field} ${condition.operator}`;\n                    case 'IN':\n                    case 'NOT IN':\n                        if (!condition.values || condition.values.length === 0) {\n                            throw new Error(`${condition.operator} requires non-empty values array`);\n                        }\n                        const placeholders = condition.values.map(()=>`$${paramIndex++}`).join(', ');\n                        this.parameters.push(...condition.values);\n                        return `${condition.field} ${condition.operator} (${placeholders})`;\n                    default:\n                        this.parameters.push(condition.value);\n                        return `${condition.field} ${condition.operator} $${paramIndex++}`;\n                }\n            });\n            whereClause = `WHERE ${conditions.join(' AND ')}`;\n        }\n        // Build ORDER BY clause\n        let orderByClause = '';\n        if (this.orderByFields.length > 0) {\n            const orderFields = this.orderByFields.map((order)=>`${order.field} ${order.direction}`).join(', ');\n            orderByClause = `ORDER BY ${orderFields}`;\n        }\n        // Build LIMIT clause\n        let limitClause = '';\n        if (this.limitCount !== undefined) {\n            limitClause = `LIMIT $${paramIndex++}`;\n            this.parameters.push(this.limitCount);\n        }\n        // Build OFFSET clause\n        let offsetClause = '';\n        if (this.offsetCount !== undefined) {\n            offsetClause = `OFFSET $${paramIndex++}`;\n            this.parameters.push(this.offsetCount);\n        }\n        // Combine all clauses\n        const query = [\n            selectClause,\n            fromClause,\n            whereClause,\n            orderByClause,\n            limitClause,\n            offsetClause\n        ].filter(Boolean).join(' ');\n        return {\n            query,\n            params: this.parameters\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.limit(1).execute();\n        return result.rows[0] || null;\n    }\n    async count() {\n        const originalSelect = this.selectFields;\n        this.selectFields = [\n            'COUNT(*) as count'\n        ];\n        const result = await this.execute();\n        this.selectFields = originalSelect;\n        return parseInt(result.rows[0]?.count || '0');\n    }\n    /**\n   * Perform an upsert operation (insert or update if exists)\n   */ async upsert(data, conflictTarget) {\n        // Use the InsertBuilder with conflict handling\n        const insertBuilder = InsertBuilder.into(this.fromTable).values(data);\n        if (conflictTarget) {\n            // For now, do an update on conflict\n            insertBuilder.onConflictDoUpdate(conflictTarget, data);\n        } else {\n            // Try to determine primary key or use 'id' as default\n            insertBuilder.onConflictDoUpdate('id', data);\n        }\n        return await insertBuilder.execute();\n    }\n    constructor(){\n        this.selectFields = [\n            '*'\n        ];\n        this.fromTable = '';\n        this.whereConditions = [];\n        this.orderByFields = [];\n        this.joinClauses = [];\n        this.parameters = [];\n    }\n}\nclass InsertBuilder {\n    static into(tableName) {\n        const builder = new InsertBuilder();\n        builder.tableName = tableName;\n        return builder;\n    }\n    values(data) {\n        if (Array.isArray(data)) {\n            this.insertData = data;\n        } else {\n            this.insertData = [\n                data\n            ];\n        }\n        return this;\n    }\n    returning(fields) {\n        if (typeof fields === 'string') {\n            this.returnFields = [\n                fields\n            ];\n        } else {\n            this.returnFields = fields;\n        }\n        return this;\n    }\n    onConflict(target, action, updateData) {\n        this.conflictTarget = target;\n        this.conflictAction = action;\n        this.updateData = updateData;\n        return this;\n    }\n    onConflictDoNothing(target) {\n        return this.onConflict(target, 'DO NOTHING');\n    }\n    onConflictDoUpdate(target, updateData) {\n        return this.onConflict(target, 'DO UPDATE', updateData);\n    }\n    build() {\n        if (this.insertData.length === 0) {\n            throw new Error('No data provided for INSERT operation');\n        }\n        // Get field names from the first record\n        const fields = Object.keys(this.insertData[0]);\n        const allValues = [];\n        // Build placeholders and collect all values\n        const valueRows = [];\n        let paramIndex = 1;\n        for (const record of this.insertData){\n            const rowPlaceholders = [];\n            for (const field of fields){\n                rowPlaceholders.push(`$${paramIndex}`);\n                allValues.push(record[field]);\n                paramIndex++;\n            }\n            valueRows.push(`(${rowPlaceholders.join(', ')})`);\n        }\n        let query = `INSERT INTO ${this.tableName} (${fields.join(', ')}) VALUES ${valueRows.join(', ')}`;\n        // Add conflict handling\n        if (this.conflictTarget && this.conflictAction) {\n            query += ` ON CONFLICT (${this.conflictTarget}) ${this.conflictAction}`;\n            if (this.conflictAction === 'DO UPDATE' && this.updateData) {\n                const updateFields = Object.keys(this.updateData);\n                const updateClause = updateFields.map((field)=>`${field} = EXCLUDED.${field}`).join(', ');\n                query += ` SET ${updateClause}`;\n            }\n        }\n        // Add RETURNING clause\n        if (this.returnFields.length > 0) {\n            query += ` RETURNING ${this.returnFields.join(', ')}`;\n        }\n        return {\n            query,\n            params: allValues\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.execute();\n        return result.rows[0] || null;\n    }\n    constructor(){\n        this.tableName = '';\n        this.insertData = [];\n        this.returnFields = [\n            '*'\n        ];\n    }\n}\nclass UpdateBuilder {\n    static table(tableName) {\n        const builder = new UpdateBuilder();\n        builder.tableName = tableName;\n        return builder;\n    }\n    set(data) {\n        this.updateData = {\n            ...this.updateData,\n            ...data\n        };\n        return this;\n    }\n    where(field, operator, value) {\n        this.whereConditions.push({\n            field,\n            operator,\n            value\n        });\n        return this;\n    }\n    returning(fields) {\n        if (typeof fields === 'string') {\n            this.returnFields = [\n                fields\n            ];\n        } else {\n            this.returnFields = fields;\n        }\n        return this;\n    }\n    build() {\n        this.parameters = [];\n        let paramIndex = 1;\n        // Build SET clause\n        const updateFields = Object.keys(this.updateData);\n        const setClause = updateFields.map((field)=>{\n            this.parameters.push(this.updateData[field]);\n            return `${field} = $${paramIndex++}`;\n        }).join(', ');\n        let query = `UPDATE ${this.tableName} SET ${setClause}`;\n        // Build WHERE clause\n        if (this.whereConditions.length > 0) {\n            const conditions = this.whereConditions.map((condition)=>{\n                if (condition.operator === 'IS NULL' || condition.operator === 'IS NOT NULL') {\n                    return `${condition.field} ${condition.operator}`;\n                }\n                this.parameters.push(condition.value);\n                return `${condition.field} ${condition.operator} $${paramIndex++}`;\n            });\n            query += ` WHERE ${conditions.join(' AND ')}`;\n        }\n        // Add RETURNING clause\n        if (this.returnFields.length > 0) {\n            query += ` RETURNING ${this.returnFields.join(', ')}`;\n        }\n        return {\n            query,\n            params: this.parameters\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.execute();\n        return result.rows[0] || null;\n    }\n    constructor(){\n        this.tableName = '';\n        this.updateData = {};\n        this.whereConditions = [];\n        this.returnFields = [\n            '*'\n        ];\n        this.parameters = [];\n    }\n}\nclass DeleteBuilder {\n    static from(tableName) {\n        const builder = new DeleteBuilder();\n        builder.tableName = tableName;\n        return builder;\n    }\n    where(field, operator, value) {\n        this.whereConditions.push({\n            field,\n            operator,\n            value\n        });\n        return this;\n    }\n    returning(fields) {\n        if (typeof fields === 'string') {\n            this.returnFields = [\n                fields\n            ];\n        } else {\n            this.returnFields = fields;\n        }\n        return this;\n    }\n    build() {\n        this.parameters = [];\n        let paramIndex = 1;\n        let query = `DELETE FROM ${this.tableName}`;\n        // Build WHERE clause\n        if (this.whereConditions.length > 0) {\n            const conditions = this.whereConditions.map((condition)=>{\n                if (condition.operator === 'IS NULL' || condition.operator === 'IS NOT NULL') {\n                    return `${condition.field} ${condition.operator}`;\n                }\n                this.parameters.push(condition.value);\n                return `${condition.field} ${condition.operator} $${paramIndex++}`;\n            });\n            query += ` WHERE ${conditions.join(' AND ')}`;\n        }\n        // Add RETURNING clause\n        if (this.returnFields.length > 0) {\n            query += ` RETURNING ${this.returnFields.join(', ')}`;\n        }\n        return {\n            query,\n            params: this.parameters\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.execute();\n        return result.rows[0] || null;\n    }\n    constructor(){\n        this.tableName = '';\n        this.whereConditions = [];\n        this.returnFields = [\n            '*'\n        ];\n        this.parameters = [];\n    }\n}\n// Export convenience functions\nconst query = QueryBuilder.table;\nconst insert = InsertBuilder.into;\nconst update = UpdateBuilder.table;\nconst deleteFrom = DeleteBuilder.from;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db-query-builder.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeDatabase: () => (/* binding */ closeDatabase),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   initializeDatabase: () => (/* binding */ initializeDatabase),\n/* harmony export */   logToDatabase: () => (/* binding */ logToDatabase),\n/* harmony export */   sql: () => (/* reexport safe */ _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__.sql)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/postgres */ \"(rsc)/./node_modules/@vercel/postgres/dist/index-node.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nclass DatabaseConnection {\n    constructor(){\n        this.pool = null;\n        this.isVercel = false;\n        this.isVercel = !!process.env.POSTGRES_URL;\n    }\n    getConfig() {\n        if (this.isVercel) {\n            return {\n                host: process.env.POSTGRES_HOST,\n                port: 5432,\n                database: process.env.POSTGRES_DATABASE,\n                user: process.env.POSTGRES_USER,\n                password: process.env.POSTGRES_PASSWORD,\n                ssl: true,\n                max: 20,\n                idleTimeoutMillis: 30000,\n                connectionTimeoutMillis: 2000\n            };\n        }\n        return {\n            host: process.env.DATABASE_HOST || 'localhost',\n            port: parseInt(process.env.DATABASE_PORT || '5432'),\n            database: process.env.DATABASE_NAME || 'hotdog_diaries_dev',\n            user: process.env.DATABASE_USER || 'postgres',\n            password: process.env.DATABASE_PASSWORD || 'password',\n            ssl: false,\n            max: 10,\n            idleTimeoutMillis: 30000,\n            connectionTimeoutMillis: 2000\n        };\n    }\n    async connect() {\n        if (this.pool) {\n            return;\n        }\n        const config = this.getConfig();\n        this.pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool(config);\n        this.pool.on('error', (err)=>{\n            console.error('Unexpected database error on idle client', err);\n        });\n        this.pool.on('connect', ()=>{\n            console.log('Database connection established');\n        });\n        this.pool.on('remove', ()=>{\n            console.log('Database connection removed');\n        });\n        try {\n            const client = await this.pool.connect();\n            await client.query('SELECT NOW()');\n            client.release();\n            console.log('Database connection successful');\n        } catch (error) {\n            console.error('Database connection failed:', error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        if (this.pool) {\n            await this.pool.end();\n            this.pool = null;\n            console.log('Database connection closed');\n        }\n    }\n    async query(text, params) {\n        if (this.isVercel) {\n            return await _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__.sql.query(text, params || []);\n        }\n        if (!this.pool) {\n            await this.connect();\n        }\n        const start = Date.now();\n        try {\n            const result = await this.pool.query(text, params);\n            const duration = Date.now() - start;\n            console.log('Query executed', {\n                text,\n                duration,\n                rows: result.rowCount\n            });\n            return result;\n        } catch (error) {\n            const duration = Date.now() - start;\n            console.error('Query error', {\n                text,\n                duration,\n                error\n            });\n            throw error;\n        }\n    }\n    async getClient() {\n        if (this.isVercel) {\n            throw new Error('Client connections not supported in Vercel environment');\n        }\n        if (!this.pool) {\n            throw new Error('Database not connected');\n        }\n        return await this.pool.connect();\n    }\n    async healthCheck() {\n        try {\n            const start = Date.now();\n            await this.query('SELECT 1 as health_check');\n            const latency = Date.now() - start;\n            return {\n                connected: true,\n                latency\n            };\n        } catch (error) {\n            return {\n                connected: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    async transaction(callback) {\n        if (this.isVercel) {\n            throw new Error('Transactions not supported in Vercel environment with @vercel/postgres');\n        }\n        const client = await this.getClient();\n        try {\n            await client.query('BEGIN');\n            const result = await callback(client);\n            await client.query('COMMIT');\n            return result;\n        } catch (error) {\n            await client.query('ROLLBACK');\n            throw error;\n        } finally{\n            client.release();\n        }\n    }\n}\nconst db = new DatabaseConnection();\nasync function initializeDatabase() {\n    try {\n        await db.connect();\n        console.log('Database initialized successfully');\n    } catch (error) {\n        console.error('Failed to initialize database:', error);\n        throw error;\n    }\n}\nasync function closeDatabase() {\n    try {\n        await db.disconnect();\n        console.log('Database closed successfully');\n    } catch (error) {\n        console.error('Failed to close database:', error);\n        throw error;\n    }\n}\nasync function logToDatabase(level, message, component, metadata) {\n    try {\n        // Convert LogLevel enum to database-compatible string\n        let dbLevel;\n        switch(level){\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.DEBUG:\n                dbLevel = 'debug';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.INFO:\n                dbLevel = 'info';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.WARN:\n                dbLevel = 'warning';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR:\n                dbLevel = 'error';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.FATAL:\n                dbLevel = 'error'; // Map FATAL to error since it's not in constraint\n                break;\n            default:\n                dbLevel = 'info';\n        }\n        await db.query(`INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n       VALUES ($1, $2, $3, $4, NOW())`, [\n            dbLevel,\n            message,\n            component,\n            metadata ? JSON.stringify(metadata) : null\n        ]);\n    } catch (error) {\n        console.error('Failed to log to database:', error);\n    }\n}\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/reddit-monitoring.ts":
/*!*******************************************!*\
  !*** ./lib/services/reddit-monitoring.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedditMonitoringService: () => (/* binding */ RedditMonitoringService),\n/* harmony export */   redditMonitoringService: () => (/* binding */ redditMonitoringService)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\n/* harmony import */ var _lib_db_query_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/db-query-builder */ \"(rsc)/./lib/db-query-builder.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_0__, _lib_db_query_builder__WEBPACK_IMPORTED_MODULE_2__]);\n([_lib_db__WEBPACK_IMPORTED_MODULE_0__, _lib_db_query_builder__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nclass RedditMonitoringService {\n    static{\n        this.ERROR_RATE_THRESHOLD = 10; // 10% error rate threshold\n    }\n    static{\n        this.LATENCY_THRESHOLD = 5000; // 5 seconds latency threshold\n    }\n    static{\n        this.RATE_LIMIT_WARNING_THRESHOLD = 80; // 80% of rate limit used\n    }\n    /**\n   * Get current Reddit health status\n   */ async getHealthMetrics() {\n        try {\n            // Check API connection status by looking at recent logs\n            const recentApiLogs = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_2__.query)('system_logs').select([\n                'log_level',\n                'message',\n                'created_at'\n            ]).where('component', 'like', 'REDDIT_%').where('created_at', '>=', new Date(Date.now() - 60 * 60 * 1000)) // Last hour\n            .orderBy('created_at', 'desc').limit(100);\n            const apiConnectionStatus = this.determineApiConnectionStatus(recentApiLogs);\n            const rateLimitStatus = this.determineRateLimitStatus(recentApiLogs);\n            const scanStatus = await this.determineScanStatus();\n            const errorRate = this.calculateErrorRate(recentApiLogs);\n            const averageResponseTime = await this.calculateAverageResponseTime();\n            const lastSuccessfulScan = await this.getLastSuccessfulScan();\n            const uptime = await this.calculateUptime();\n            const alertsTriggered = this.countRecentAlerts();\n            return {\n                apiConnectionStatus,\n                rateLimitStatus,\n                scanStatus,\n                errorRate,\n                averageResponseTime,\n                lastSuccessfulScan,\n                uptime,\n                alertsTriggered\n            };\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'REDDIT_HEALTH_CHECK_ERROR', `Failed to get Reddit health metrics: ${error.message}`, {\n                error: error.message\n            });\n            // Return degraded status if we can't check health\n            return {\n                apiConnectionStatus: 'degraded',\n                rateLimitStatus: 'warning',\n                scanStatus: 'error',\n                errorRate: 100,\n                averageResponseTime: 0,\n                uptime: 0,\n                alertsTriggered: 1\n            };\n        }\n    }\n    /**\n   * Record a Reddit API request for monitoring\n   */ async recordApiRequest(success, latency, errorType) {\n        try {\n            this.metrics.requestsPerMinute++;\n            if (success) {\n                this.metrics.averageLatency = (this.metrics.averageLatency + latency) / 2;\n            } else {\n                if (errorType) {\n                    this.metrics.errorsByType[errorType] = (this.metrics.errorsByType[errorType] || 0) + 1;\n                }\n            }\n            this.metrics.peakLatency = Math.max(this.metrics.peakLatency, latency);\n            // Check for performance issues\n            await this.checkPerformanceThresholds(success, latency, errorType);\n            // Log high latency requests\n            if (latency > RedditMonitoringService.LATENCY_THRESHOLD) {\n                await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.WARNING, 'REDDIT_HIGH_LATENCY', `Reddit API request took ${latency}ms`, {\n                    latency,\n                    success,\n                    errorType\n                });\n            }\n        } catch (error) {\n            console.error('Failed to record Reddit API request:', error);\n        }\n    }\n    /**\n   * Record a rate limit hit\n   */ async recordRateLimitHit(resetTime) {\n        try {\n            this.metrics.rateLimitHits++;\n            await this.triggerAlert({\n                type: 'rate_limit',\n                severity: 'medium',\n                message: `Reddit API rate limit exceeded. Reset at ${resetTime.toISOString()}`,\n                metadata: {\n                    resetTime: resetTime.toISOString()\n                }\n            });\n        } catch (error) {\n            console.error('Failed to record rate limit hit:', error);\n        }\n    }\n    /**\n   * Record a scan completion\n   */ async recordScanCompletion(postsProcessed, success, errors) {\n        try {\n            if (success) {\n                this.metrics.postsProcessedPerHour += postsProcessed;\n            }\n            // Check for scan-related issues\n            if (!success || errors.length > 0) {\n                await this.triggerAlert({\n                    type: 'scan_failure',\n                    severity: errors.length > 5 ? 'high' : 'medium',\n                    message: `Reddit scan completed with ${errors.length} errors`,\n                    metadata: {\n                        postsProcessed,\n                        errors: errors.slice(0, 5)\n                    } // Limit errors in metadata\n                });\n            }\n        } catch (error) {\n            console.error('Failed to record scan completion:', error);\n        }\n    }\n    /**\n   * Get performance metrics\n   */ getPerformanceMetrics() {\n        return {\n            ...this.metrics\n        };\n    }\n    /**\n   * Get active alerts\n   */ getActiveAlerts() {\n        return this.alerts.filter((alert)=>!alert.resolved);\n    }\n    /**\n   * Resolve an alert\n   */ async resolveAlert(alertId) {\n        const alert = this.alerts.find((a)=>a.id === alertId);\n        if (alert) {\n            alert.resolved = true;\n            alert.resolvedAt = new Date();\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.INFO, 'REDDIT_ALERT_RESOLVED', `Reddit alert resolved: ${alert.message}`, {\n                alertId,\n                alertType: alert.type\n            });\n        }\n    }\n    /**\n   * Clear old metrics (call periodically)\n   */ resetMetrics() {\n        this.metrics = {\n            requestsPerMinute: 0,\n            successRate: 0,\n            averageLatency: 0,\n            peakLatency: 0,\n            errorsByType: {},\n            rateLimitHits: 0,\n            postsProcessedPerHour: 0\n        };\n        // Remove resolved alerts older than 24 hours\n        const cutoff = new Date(Date.now() - 24 * 60 * 60 * 1000);\n        this.alerts = this.alerts.filter((alert)=>!alert.resolved || alert.resolvedAt && alert.resolvedAt > cutoff);\n    }\n    determineApiConnectionStatus(logs) {\n        const recentErrors = logs.filter((log)=>log.log_level === 'error' && log.message.toLowerCase().includes('connection'));\n        const recentRequests = logs.filter((log)=>log.message.toLowerCase().includes('reddit') && (log.message.includes('success') || log.message.includes('completed')));\n        if (recentErrors.length > 10) return 'down';\n        if (recentErrors.length > 3 || recentRequests.length === 0) return 'degraded';\n        return 'healthy';\n    }\n    determineRateLimitStatus(logs) {\n        const rateLimitLogs = logs.filter((log)=>log.message.toLowerCase().includes('rate limit'));\n        if (rateLimitLogs.length > 5) return 'critical';\n        if (rateLimitLogs.length > 1) return 'warning';\n        return 'healthy';\n    }\n    async determineScanStatus() {\n        try {\n            const config = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_2__.query)('reddit_scan_config').select([\n                'is_enabled',\n                'last_scan_time'\n            ]).first();\n            if (!config || !config.is_enabled) return 'paused';\n            // Check if last scan was more than 2 hours ago\n            if (config.last_scan_time) {\n                const lastScan = new Date(config.last_scan_time);\n                const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000);\n                if (lastScan < twoHoursAgo) return 'error';\n            }\n            return 'active';\n        } catch (error) {\n            return 'error';\n        }\n    }\n    calculateErrorRate(logs) {\n        const totalLogs = logs.length;\n        if (totalLogs === 0) return 0;\n        const errorLogs = logs.filter((log)=>log.log_level === 'error');\n        return Math.round(errorLogs.length / totalLogs * 100);\n    }\n    async calculateAverageResponseTime() {\n        // This would need to be implemented based on how we track response times\n        // For now, return a placeholder\n        return this.metrics.averageLatency;\n    }\n    async getLastSuccessfulScan() {\n        try {\n            const result = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_2__.query)('reddit_scan_results').select([\n                'end_time'\n            ]).where('posts_approved', '>', 0).orderBy('end_time', 'desc').first();\n            return result ? new Date(result.end_time) : undefined;\n        } catch (error) {\n            return undefined;\n        }\n    }\n    async calculateUptime() {\n        try {\n            const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n            const totalPeriods = 24 * 4 // 15-minute periods in 24 hours\n            ;\n            const downPeriods = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_2__.query)('system_logs').count('*').where('log_level', 'error').where('component', 'like', 'REDDIT_%').where('created_at', '>=', twentyFourHoursAgo).first();\n            const downCount = parseInt(downPeriods?.count || '0');\n            const uptimePercentage = Math.max(0, (totalPeriods - downCount) / totalPeriods * 100);\n            return Math.round(uptimePercentage);\n        } catch (error) {\n            return 0;\n        }\n    }\n    countRecentAlerts() {\n        const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n        return this.alerts.filter((alert)=>alert.timestamp > oneHourAgo).length;\n    }\n    async checkPerformanceThresholds(success, latency, errorType) {\n        // Check error rate\n        const currentErrorRate = this.calculateCurrentErrorRate();\n        if (currentErrorRate > RedditMonitoringService.ERROR_RATE_THRESHOLD) {\n            await this.triggerAlert({\n                type: 'high_error_rate',\n                severity: 'high',\n                message: `Reddit API error rate is ${currentErrorRate}%`,\n                metadata: {\n                    errorRate: currentErrorRate\n                }\n            });\n        }\n        // Check latency\n        if (latency > RedditMonitoringService.LATENCY_THRESHOLD) {\n            await this.triggerAlert({\n                type: 'api_error',\n                severity: 'medium',\n                message: `Reddit API latency is high: ${latency}ms`,\n                metadata: {\n                    latency\n                }\n            });\n        }\n    }\n    calculateCurrentErrorRate() {\n        const totalRequests = this.metrics.requestsPerMinute;\n        const totalErrors = Object.values(this.metrics.errorsByType).reduce((sum, count)=>sum + count, 0);\n        return totalRequests > 0 ? Math.round(totalErrors / totalRequests * 100) : 0;\n    }\n    async triggerAlert(alertData) {\n        // Check if similar alert already exists and is unresolved\n        const existingAlert = this.alerts.find((alert)=>alert.type === alertData.type && !alert.resolved && Date.now() - alert.timestamp.getTime() < 60 * 60 * 1000 // Within last hour\n        );\n        if (existingAlert) {\n            return; // Don't create duplicate alerts\n        }\n        const alert = {\n            id: `reddit_alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            timestamp: new Date(),\n            resolved: false,\n            ...alertData\n        };\n        this.alerts.push(alert);\n        // Log the alert\n        await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(alertData.severity === 'critical' ? _types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.FATAL : alertData.severity === 'high' ? _types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR : alertData.severity === 'medium' ? _types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.WARN : _types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.INFO, 'REDDIT_ALERT_TRIGGERED', alert.message, {\n            alertId: alert.id,\n            alertType: alert.type,\n            severity: alert.severity,\n            metadata: alert.metadata\n        });\n    }\n    constructor(){\n        this.alerts = [];\n        this.metrics = {\n            requestsPerMinute: 0,\n            successRate: 0,\n            averageLatency: 0,\n            peakLatency: 0,\n            errorsByType: {},\n            rateLimitHits: 0,\n            postsProcessedPerHour: 0\n        };\n    }\n}\nconst redditMonitoringService = new RedditMonitoringService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/reddit-monitoring.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/reddit.ts":
/*!********************************!*\
  !*** ./lib/services/reddit.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedditService: () => (/* binding */ RedditService)\n/* harmony export */ });\n/* harmony import */ var snoowrap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! snoowrap */ \"(rsc)/./node_modules/snoowrap/dist/snoowrap.js\");\n/* harmony import */ var snoowrap__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(snoowrap__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\n/* harmony import */ var _reddit_monitoring__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reddit-monitoring */ \"(rsc)/./lib/services/reddit-monitoring.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_1__, _reddit_monitoring__WEBPACK_IMPORTED_MODULE_3__]);\n([_lib_db__WEBPACK_IMPORTED_MODULE_1__, _reddit_monitoring__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\nclass RedditService {\n    constructor(){\n        this.rateLimitTracker = {\n            used: 0,\n            remaining: 100,\n            resetTime: new Date(Date.now() + 60 * 1000) // Reset every minute\n        };\n        this.requestQueue = [];\n        this.isProcessingQueue = false;\n        const clientId = process.env.REDDIT_CLIENT_ID;\n        const clientSecret = process.env.REDDIT_CLIENT_SECRET;\n        const userAgent = process.env.REDDIT_USER_AGENT || 'HotdogDiaries/1.0.0 by /u/hotdog_scanner';\n        if (!clientId || !clientSecret) {\n            console.warn('Reddit API credentials not found, using mock client for development');\n            this.client = this.createLimitedMockClient();\n        } else {\n            try {\n                // Check if credentials look valid (not demo/test values)\n                if (clientId.includes('demo') || clientSecret.includes('demo') || clientId === 'rEmsT6H1Tln9TZ4mSeDhWg' || // Specific test credentials\n                clientId.length < 10 || clientSecret.length < 15) {\n                    throw new Error('Demo/test credentials detected, using mock client');\n                }\n                // Create real Snoowrap client with app-only authentication\n                this.client = new (snoowrap__WEBPACK_IMPORTED_MODULE_0___default())({\n                    userAgent,\n                    clientId,\n                    clientSecret,\n                    // Use client credentials flow for app-only access\n                    username: process.env.REDDIT_USERNAME,\n                    password: process.env.REDDIT_PASSWORD\n                });\n                // Configure client settings\n                this.client.config({\n                    requestDelay: 1000,\n                    requestTimeout: 30000,\n                    continueAfterRatelimitError: true,\n                    retryErrorCodes: [\n                        502,\n                        503,\n                        504,\n                        522\n                    ],\n                    maxRetryAttempts: 3\n                });\n                console.log('Reddit API client initialized with real credentials');\n            } catch (error) {\n                console.warn('Reddit API credentials invalid or demo, using mock client:', error.message);\n                this.client = this.createLimitedMockClient();\n            }\n        }\n    }\n    /**\n   * Search multiple subreddits for hotdog content\n   */ async searchSubreddits(options) {\n        const startTime = Date.now();\n        try {\n            await this.checkRateLimit();\n            const allPosts = [];\n            const postsPerSubreddit = Math.floor((options.limit || 25) / options.subreddits.length);\n            for (const subreddit of options.subreddits){\n                try {\n                    const subredditObj = this.client.getSubreddit(subreddit);\n                    let posts;\n                    // Search within the subreddit\n                    if (options.query) {\n                        posts = await subredditObj.search({\n                            query: options.query,\n                            sort: options.sort || 'relevance',\n                            time: options.time || 'month',\n                            limit: postsPerSubreddit\n                        });\n                    } else {\n                        // Get hot posts if no specific query\n                        switch(options.sort){\n                            case 'hot':\n                                posts = await subredditObj.getHot({\n                                    limit: postsPerSubreddit\n                                });\n                                break;\n                            case 'top':\n                                posts = await subredditObj.getTop({\n                                    time: options.time || 'week',\n                                    limit: postsPerSubreddit\n                                });\n                                break;\n                            case 'new':\n                                posts = await subredditObj.getNew({\n                                    limit: postsPerSubreddit\n                                });\n                                break;\n                            default:\n                                posts = await subredditObj.getHot({\n                                    limit: postsPerSubreddit\n                                });\n                        }\n                    }\n                    // Convert array-like objects to actual arrays if needed\n                    if (posts && typeof posts.toArray === 'function') {\n                        posts = await posts.toArray();\n                    } else if (posts && Array.isArray(posts)) {\n                    // Already an array\n                    } else {\n                        posts = [];\n                    }\n                    this.updateRateLimit();\n                    // Process and filter posts\n                    for (const post of posts){\n                        const processedPost = this.processRedditPost(post);\n                        // Apply minimum score filter\n                        if (options.minScore && processedPost.score < options.minScore) {\n                            continue;\n                        }\n                        allPosts.push(processedPost);\n                    }\n                    await (0,_lib_db__WEBPACK_IMPORTED_MODULE_1__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.INFO, 'REDDIT_SUBREDDIT_SEARCH_SUCCESS', `Found ${posts.length} posts in r/${subreddit}`, {\n                        subreddit,\n                        query: options.query,\n                        postsFound: posts.length\n                    });\n                } catch (error) {\n                    await (0,_lib_db__WEBPACK_IMPORTED_MODULE_1__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR, 'REDDIT_SUBREDDIT_SEARCH_ERROR', `Failed to search r/${subreddit}: ${error.message}`, {\n                        subreddit,\n                        query: options.query,\n                        error: error.message\n                    });\n                    continue;\n                }\n            }\n            // Sort by score descending to prioritize high-quality content\n            allPosts.sort((a, b)=>b.score - a.score);\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_1__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.INFO, 'REDDIT_SEARCH_COMPLETED', `Reddit search completed: ${allPosts.length} posts found across ${options.subreddits.length} subreddits`, {\n                subreddits: options.subreddits,\n                query: options.query,\n                totalPosts: allPosts.length\n            });\n            // Record successful API request for monitoring\n            const requestTime = Date.now() - startTime;\n            await _reddit_monitoring__WEBPACK_IMPORTED_MODULE_3__.redditMonitoringService.recordApiRequest(true, requestTime);\n            return allPosts;\n        } catch (error) {\n            // Record failed API request for monitoring\n            const requestTime = Date.now() - startTime;\n            const errorType = error.message.includes('rate limit') ? 'rate_limit' : 'api_error';\n            await _reddit_monitoring__WEBPACK_IMPORTED_MODULE_3__.redditMonitoringService.recordApiRequest(false, requestTime, errorType);\n            if (error.message.includes('rate limit')) {\n                await this.handleRateLimit(error);\n                await _reddit_monitoring__WEBPACK_IMPORTED_MODULE_3__.redditMonitoringService.recordRateLimitHit(this.rateLimitTracker.resetTime);\n                throw new Error('Reddit API rate limit exceeded. Please try again later.');\n            }\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_1__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR, 'REDDIT_SEARCH_ERROR', `Reddit search failed: ${error.message}`, {\n                subreddits: options.subreddits,\n                query: options.query,\n                error: error.message\n            });\n            throw new Error(`Reddit search failed: ${error.message}`);\n        }\n    }\n    /**\n   * Process raw Reddit post data into structured format\n   */ processRedditPost(post) {\n        // Extract media URLs\n        const imageUrls = [];\n        const videoUrls = [];\n        // Handle different types of Reddit media\n        if (post.url) {\n            const url = post.url.toString();\n            // Direct image links\n            if (url.match(/\\.(jpg|jpeg|png|gif|webp)$/i)) {\n                imageUrls.push(url);\n            } else if (url.includes('i.redd.it')) {\n                imageUrls.push(url);\n            } else if (url.includes('v.redd.it')) {\n                videoUrls.push(url);\n            } else if (post.is_gallery && post.media_metadata) {\n                Object.values(post.media_metadata).forEach((item)=>{\n                    if (item.s && item.s.u) {\n                        // Decode HTML entities in URL\n                        const imageUrl = item.s.u.replace(/&amp;/g, '&');\n                        imageUrls.push(imageUrl);\n                    }\n                });\n            }\n        }\n        // Handle crosspost\n        let crosspostOrigin;\n        if (post.crosspost_parent_list && post.crosspost_parent_list.length > 0) {\n            const original = post.crosspost_parent_list[0];\n            crosspostOrigin = {\n                subreddit: original.subreddit,\n                author: original.author,\n                title: original.title\n            };\n        }\n        return {\n            id: post.id,\n            title: post.title || '',\n            selftext: post.selftext || '',\n            subreddit: post.subreddit.display_name || post.subreddit_name_prefixed?.replace('r/', '') || '',\n            author: post.author?.name || '[deleted]',\n            createdAt: new Date(post.created_utc * 1000),\n            score: post.score || 0,\n            upvoteRatio: post.upvote_ratio || 0,\n            numComments: post.num_comments || 0,\n            permalink: `https://reddit.com${post.permalink}`,\n            url: post.url?.toString() || '',\n            imageUrls,\n            videoUrls,\n            mediaUrls: [\n                ...imageUrls,\n                ...videoUrls\n            ],\n            isNSFW: post.over_18 || false,\n            isSpoiler: post.spoiler || false,\n            isStickied: post.stickied || false,\n            flair: post.link_flair_text || undefined,\n            isGallery: post.is_gallery || false,\n            isCrosspost: post.crosspost_parent_list?.length > 0 || false,\n            crosspostOrigin\n        };\n    }\n    /**\n   * Validate if Reddit post content is suitable for hotdog content\n   */ async validateRedditContent(post) {\n        try {\n            // Skip NSFW content\n            if (post.isNSFW) {\n                return false;\n            }\n            // Skip very low-scoring posts\n            if (post.score < 1) {\n                return false;\n            }\n            // Must contain hotdog-related terms in title or text\n            const hotdogTerms = [\n                'hotdog',\n                'hot dog',\n                'hotdogs',\n                'hot dogs',\n                'weiner',\n                'wiener',\n                'frankfurter',\n                'sausage',\n                'bratwurst',\n                'kielbasa',\n                'chorizo'\n            ];\n            const searchText = `${post.title} ${post.selftext}`.toLowerCase();\n            const hasHotdogTerm = hotdogTerms.some((term)=>searchText.includes(term));\n            // Debug logging for validation\n            if (!hasHotdogTerm) {\n                await (0,_lib_db__WEBPACK_IMPORTED_MODULE_1__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.DEBUG, 'REDDIT_VALIDATION_REJECTED', `Post rejected for missing hotdog terms: \"${post.title}\"`, {\n                    postId: post.id,\n                    title: post.title,\n                    searchText: searchText.substring(0, 200),\n                    checkedTerms: hotdogTerms\n                });\n                return false;\n            }\n            // Check for spam indicators in title/text\n            const spamIndicators = [\n                'click here',\n                'buy now',\n                'limited time',\n                'discount',\n                'promo code',\n                'get yours',\n                'order now',\n                'sale',\n                'affiliate',\n                'referral',\n                'commission'\n            ];\n            const hasSpamIndicators = spamIndicators.some((indicator)=>searchText.includes(indicator.toLowerCase()));\n            if (hasSpamIndicators) {\n                return false;\n            }\n            // Prefer posts with media or substantial text content\n            const hasMedia = post.mediaUrls.length > 0;\n            const hasSubstantialText = post.selftext.length > 50;\n            const hasGoodEngagement = post.score > 10 || post.numComments > 5;\n            return hasMedia || hasSubstantialText || hasGoodEngagement;\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_1__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR, 'REDDIT_VALIDATION_ERROR', `Reddit post validation failed: ${error.message}`, {\n                postId: post.id,\n                error: error.message\n            });\n            return false;\n        }\n    }\n    /**\n   * Get hotdog-focused subreddits for scanning\n   */ getHotdogSubreddits() {\n        return [\n            'hotdogs',\n            'food',\n            'FoodPorn',\n            'grilling',\n            'baseball',\n            'sausages',\n            'BBQ',\n            'Cooking',\n            'MealPrepSunday',\n            'budgetfood',\n            'americanfood',\n            'ballparks' // Stadium food\n        ];\n    }\n    /**\n   * Get search terms optimized for hotdog content\n   */ getHotdogSearchTerms() {\n        return [\n            'hotdog',\n            'hot dog',\n            'frankfurter',\n            'bratwurst',\n            'wiener',\n            'ballpark frank',\n            'chili dog',\n            'corn dog',\n            'sausage grill'\n        ];\n    }\n    /**\n   * Check rate limit before making API call\n   */ async checkRateLimit() {\n        const now = new Date();\n        // Reset rate limit counter if minute has passed\n        if (now >= this.rateLimitTracker.resetTime) {\n            this.rateLimitTracker.used = 0;\n            this.rateLimitTracker.remaining = 100;\n            this.rateLimitTracker.resetTime = new Date(now.getTime() + 60 * 1000);\n        }\n        if (this.rateLimitTracker.remaining <= 0) {\n            const waitTime = this.rateLimitTracker.resetTime.getTime() - now.getTime();\n            throw new Error(`Rate limit exceeded. Reset in ${Math.ceil(waitTime / 1000)} seconds`);\n        }\n    }\n    /**\n   * Handle rate limit errors\n   */ async handleRateLimit(error) {\n        const resetTime = new Date(Date.now() + 60 * 1000) // Reset in 1 minute\n        ;\n        this.rateLimitTracker = {\n            used: 100,\n            remaining: 0,\n            resetTime\n        };\n        await (0,_lib_db__WEBPACK_IMPORTED_MODULE_1__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.WARNING, 'REDDIT_RATE_LIMIT', `Reddit API rate limit exceeded. Reset at ${resetTime.toISOString()}`, {\n            resetTime: resetTime.toISOString(),\n            error: error.message\n        });\n    }\n    /**\n   * Update rate limit tracking\n   */ updateRateLimit() {\n        this.rateLimitTracker.used++;\n        this.rateLimitTracker.remaining = Math.max(0, 100 - this.rateLimitTracker.used);\n    }\n    /**\n   * Validate Reddit API credentials\n   */ async validateCredentials() {\n        try {\n            // Try to make a simple authenticated request\n            const testSubreddit = this.client.getSubreddit('test');\n            const posts = await testSubreddit.getHot({\n                limit: 1\n            });\n            return {\n                isValid: true,\n                details: {\n                    userAgent: this.client.userAgent,\n                    testRequestSuccessful: true,\n                    postsReturned: Array.isArray(posts) ? posts.length : 'unknown'\n                }\n            };\n        } catch (error) {\n            return {\n                isValid: false,\n                error: error.message,\n                details: {\n                    userAgent: this.client.userAgent,\n                    errorType: error.name || 'UnknownError'\n                }\n            };\n        }\n    }\n    /**\n   * Get current API status and rate limits\n   */ async getApiStatus() {\n        try {\n            // Test connection with a simple request\n            const testSubreddit = this.client.getSubreddit('hotdogs');\n            const posts = await testSubreddit.getHot({\n                limit: 1\n            });\n            // Verify we got a valid response\n            if (!posts || Array.isArray(posts) && posts.length === 0) {\n                throw new Error('No data returned from Reddit API');\n            }\n            this.updateRateLimit();\n            return {\n                isConnected: true,\n                rateLimits: this.rateLimitTracker,\n                lastRequest: new Date(),\n                userAgent: this.client.userAgent || 'HotdogDiaries/1.0.0'\n            };\n        } catch (error) {\n            return {\n                isConnected: false,\n                rateLimits: {\n                    used: 0,\n                    remaining: 0,\n                    resetTime: new Date()\n                },\n                lastError: error.message,\n                lastRequest: new Date(),\n                userAgent: this.client.userAgent\n            };\n        }\n    }\n    /**\n   * Queue a request to handle rate limiting\n   */ async queueRequest(requestFn) {\n        return new Promise((resolve, reject)=>{\n            this.requestQueue.push(async ()=>{\n                try {\n                    const result = await requestFn();\n                    resolve(result);\n                } catch (error) {\n                    reject(error);\n                }\n            });\n            this.processQueue();\n        });\n    }\n    /**\n   * Process queued requests with rate limiting\n   */ async processQueue() {\n        if (this.isProcessingQueue || this.requestQueue.length === 0) {\n            return;\n        }\n        this.isProcessingQueue = true;\n        while(this.requestQueue.length > 0){\n            const request = this.requestQueue.shift();\n            if (request) {\n                try {\n                    await this.checkRateLimit();\n                    await request();\n                    // Wait between requests to respect rate limits\n                    await new Promise((resolve)=>setTimeout(resolve, 1000));\n                } catch (error) {\n                    console.error('Queued Reddit request failed:', error);\n                }\n            }\n        }\n        this.isProcessingQueue = false;\n    }\n    createLimitedMockClient() {\n        return {\n            config: ()=>{},\n            getSubreddit: (name)=>({\n                    search: async (options)=>{\n                        // Return diverse hotdog-related content for testing\n                        return [\n                            {\n                                id: 'hd001',\n                                title: 'Best Chicago Deep Dish Style Hotdog Recipe',\n                                selftext: 'After years of perfecting this recipe, I can finally share my ultimate Chicago-style hotdog. The secret is in the poppy seed bun and the perfect balance of toppings. Never put ketchup on it though!',\n                                subreddit: {\n                                    display_name: name\n                                },\n                                author: {\n                                    name: 'ChicagoFoodie'\n                                },\n                                created_utc: Date.now() / 1000 - 3600,\n                                score: 156,\n                                upvote_ratio: 0.94,\n                                num_comments: 23,\n                                permalink: `/r/${name}/comments/hd001/best_chicago_deep_dish_style_hotdog_recipe/`,\n                                url: `https://reddit.com/r/${name}/comments/hd001/best_chicago_deep_dish_style_hotdog_recipe/`,\n                                is_self: true,\n                                over_18: false,\n                                spoiler: false,\n                                stickied: false,\n                                link_flair_text: 'Recipe',\n                                is_gallery: false,\n                                crosspost_parent_list: []\n                            },\n                            {\n                                id: 'hd002',\n                                title: 'Grilled hotdogs at the ballpark - nothing beats this view!',\n                                selftext: '',\n                                subreddit: {\n                                    display_name: name\n                                },\n                                author: {\n                                    name: 'BaseballFan2023'\n                                },\n                                created_utc: Date.now() / 1000 - 7200,\n                                score: 89,\n                                upvote_ratio: 0.88,\n                                num_comments: 15,\n                                permalink: `/r/${name}/comments/hd002/grilled_hotdogs_at_the_ballpark/`,\n                                url: 'https://i.redd.it/hotdog_ballpark_example.jpg',\n                                is_self: false,\n                                over_18: false,\n                                spoiler: false,\n                                stickied: false,\n                                link_flair_text: 'Photo',\n                                is_gallery: false,\n                                crosspost_parent_list: []\n                            },\n                            {\n                                id: 'hd003',\n                                title: 'Homemade bratwurst vs store-bought frankfurters - taste test results',\n                                selftext: 'I did a blind taste test comparing 5 different sausages including homemade bratwurst, Hebrew National, Oscar Mayer, and local butcher shop varieties. Here are the surprising results...',\n                                subreddit: {\n                                    display_name: name\n                                },\n                                author: {\n                                    name: 'SausageTester'\n                                },\n                                created_utc: Date.now() / 1000 - 14400,\n                                score: 234,\n                                upvote_ratio: 0.91,\n                                num_comments: 67,\n                                permalink: `/r/${name}/comments/hd003/homemade_bratwurst_vs_store_bought/`,\n                                url: `https://reddit.com/r/${name}/comments/hd003/homemade_bratwurst_vs_store_bought/`,\n                                is_self: true,\n                                over_18: false,\n                                spoiler: false,\n                                stickied: false,\n                                link_flair_text: 'Review',\n                                is_gallery: false,\n                                crosspost_parent_list: []\n                            }\n                        ];\n                    },\n                    getHot: async (options)=>{\n                        return [\n                            {\n                                id: 'hd004',\n                                title: 'Perfect hotdog grilling technique - no more burnt outsides!',\n                                selftext: 'The key is indirect heat and proper timing. Here\\'s my foolproof method...',\n                                subreddit: {\n                                    display_name: name\n                                },\n                                author: {\n                                    name: 'GrillMaster'\n                                },\n                                created_utc: Date.now() / 1000 - 1800,\n                                score: 445,\n                                upvote_ratio: 0.96,\n                                num_comments: 89,\n                                permalink: `/r/${name}/comments/hd004/perfect_hotdog_grilling_technique/`,\n                                url: `https://reddit.com/r/${name}/comments/hd004/perfect_hotdog_grilling_technique/`,\n                                is_self: true,\n                                over_18: false,\n                                spoiler: false,\n                                stickied: false,\n                                link_flair_text: 'Tips',\n                                is_gallery: false,\n                                crosspost_parent_list: []\n                            }\n                        ];\n                    },\n                    getNew: async ()=>[],\n                    getTop: async ()=>[]\n                }),\n            search: async ()=>[]\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/reddit.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Freddit%2Fstatus%2Froute&page=%2Fapi%2Fadmin%2Freddit%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Freddit%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Freddit%2Fstatus%2Froute&page=%2Fapi%2Fadmin%2Freddit%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Freddit%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_reddit_status_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/admin/reddit/status/route.ts */ \"(rsc)/./app/api/admin/reddit/status/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_reddit_status_route_ts__WEBPACK_IMPORTED_MODULE_16__]);\n_Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_reddit_status_route_ts__WEBPACK_IMPORTED_MODULE_16__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/admin/reddit/status/route\",\n        pathname: \"/api/admin/reddit/status\",\n        filename: \"route\",\n        bundlePath: \"app/api/admin/reddit/status/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"/Users/adamshaw/Development/websites/hotdog-diaries/app/api/admin/reddit/status/route.ts\",\n    nextConfigOutput,\n    userland: _Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_reddit_status_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/admin/reddit/status/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Freddit%2Fstatus%2Froute&page=%2Fapi%2Fadmin%2Freddit%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Freddit%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./types/index.ts":
/*!************************!*\
  !*** ./types/index.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentType: () => (/* binding */ ContentType),\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   SourcePlatform: () => (/* binding */ SourcePlatform)\n/* harmony export */ });\n// Enums\nvar ContentType = /*#__PURE__*/ function(ContentType) {\n    ContentType[\"TEXT\"] = \"text\";\n    ContentType[\"IMAGE\"] = \"image\";\n    ContentType[\"VIDEO\"] = \"video\";\n    ContentType[\"MIXED\"] = \"mixed\";\n    return ContentType;\n}({});\nvar SourcePlatform = /*#__PURE__*/ function(SourcePlatform) {\n    SourcePlatform[\"REDDIT\"] = \"reddit\";\n    SourcePlatform[\"YOUTUBE\"] = \"youtube\";\n    SourcePlatform[\"FLICKR\"] = \"flickr\";\n    SourcePlatform[\"UNSPLASH\"] = \"unsplash\";\n    SourcePlatform[\"NEWS\"] = \"news\";\n    SourcePlatform[\"MASTODON\"] = \"mastodon\";\n    return SourcePlatform;\n}({});\nvar LogLevel = /*#__PURE__*/ function(LogLevel) {\n    LogLevel[\"DEBUG\"] = \"debug\";\n    LogLevel[\"INFO\"] = \"info\";\n    LogLevel[\"WARN\"] = \"warn\";\n    LogLevel[\"ERROR\"] = \"error\";\n    LogLevel[\"FATAL\"] = \"fatal\";\n    return LogLevel;\n}({});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi90eXBlcy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUEwRkEsUUFBUTtBQUNELHlDQUFLQTs7Ozs7V0FBQUE7TUFLWDtBQUVNLDRDQUFLQzs7Ozs7OztXQUFBQTtNQU9YO0FBRU0sc0NBQUtDOzs7Ozs7V0FBQUE7TUFNWCIsInNvdXJjZXMiOlsiL1VzZXJzL2FkYW1zaGF3L0RldmVsb3BtZW50L3dlYnNpdGVzL2hvdGRvZy1kaWFyaWVzL3R5cGVzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoQ2hlY2tSZXNwb25zZSB7XG4gIHN0YXR1czogJ2hlYWx0aHknIHwgJ3VuaGVhbHRoeSdcbiAgdGltZXN0YW1wOiBzdHJpbmdcbiAgc2VydmljZTogc3RyaW5nXG4gIHZlcnNpb24/OiBzdHJpbmdcbiAgdXB0aW1lPzogbnVtYmVyXG4gIGVudmlyb25tZW50Pzogc3RyaW5nXG4gIGNoZWNrcz86IHtcbiAgICBkYXRhYmFzZT86IHN0cmluZ1xuICAgIHNvY2lhbE1lZGlhU2Nhbm5lcj86IHN0cmluZ1xuICAgIGNvbnRlbnRTY2hlZHVsZXI/OiBzdHJpbmdcbiAgfVxuICBlcnJvcj86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhvdGRvZ1Bvc3Qge1xuICBpZDogc3RyaW5nXG4gIGNvbnRlbnQ6IHN0cmluZ1xuICBpbWFnZVVybD86IHN0cmluZ1xuICBzb3VyY2U6ICdyZWRkaXQnIHwgJ3lvdXR1YmUnIHwgJ2ZsaWNrcicgfCAndW5zcGxhc2gnIHwgJ25ld3MnIHwgJ21hc3RvZG9uJ1xuICBzb3VyY2VVcmw6IHN0cmluZ1xuICB0aW1lc3RhbXA6IHN0cmluZ1xuICBlbmdhZ2VtZW50OiB7XG4gICAgbGlrZXM6IG51bWJlclxuICAgIHNoYXJlczogbnVtYmVyXG4gICAgY29tbWVudHM6IG51bWJlclxuICB9XG4gIHByb2Nlc3NlZDogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdkl0ZW0ge1xuICBocmVmOiBzdHJpbmdcbiAgbGFiZWw6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwaVJlc3BvbnNlPFQgPSBhbnk+IHtcbiAgc3VjY2VzczogYm9vbGVhblxuICBkYXRhPzogVFxuICBlcnJvcj86IHN0cmluZ1xuICBtZXNzYWdlPzogc3RyaW5nXG59XG5cbi8vIERhdGFiYXNlIEVudGl0eSBUeXBlc1xuZXhwb3J0IGludGVyZmFjZSBDb250ZW50UXVldWUge1xuICBpZDogbnVtYmVyXG4gIGNvbnRlbnRfdGV4dD86IHN0cmluZ1xuICBjb250ZW50X2ltYWdlX3VybD86IHN0cmluZ1xuICBjb250ZW50X3ZpZGVvX3VybD86IHN0cmluZ1xuICBjb250ZW50X3R5cGU6IENvbnRlbnRUeXBlXG4gIHNvdXJjZV9wbGF0Zm9ybTogU291cmNlUGxhdGZvcm1cbiAgb3JpZ2luYWxfdXJsOiBzdHJpbmdcbiAgb3JpZ2luYWxfYXV0aG9yPzogc3RyaW5nXG4gIHNjcmFwZWRfYXQ6IERhdGVcbiAgY29udGVudF9oYXNoOiBzdHJpbmdcbiAgaXNfcG9zdGVkOiBib29sZWFuXG4gIHBvc3RlZF9hdD86IERhdGVcbiAgaXNfYXBwcm92ZWQ6IGJvb2xlYW5cbiAgYWRtaW5fbm90ZXM/OiBzdHJpbmdcbiAgY3JlYXRlZF9hdDogRGF0ZVxuICB1cGRhdGVkX2F0OiBEYXRlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zdGVkQ29udGVudCB7XG4gIGlkOiBudW1iZXJcbiAgY29udGVudF9xdWV1ZV9pZDogbnVtYmVyXG4gIHBvc3RlZF9hdDogRGF0ZVxuICBzY2hlZHVsZWRfdGltZT86IERhdGVcbiAgcG9zdF9vcmRlcjogbnVtYmVyXG4gIGNyZWF0ZWRfYXQ6IERhdGVcbiAgdXBkYXRlZF9hdDogRGF0ZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN5c3RlbUxvZyB7XG4gIGlkOiBudW1iZXJcbiAgbG9nX2xldmVsOiBMb2dMZXZlbFxuICBtZXNzYWdlOiBzdHJpbmdcbiAgY29tcG9uZW50OiBzdHJpbmdcbiAgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gIGNyZWF0ZWRfYXQ6IERhdGVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBZG1pblVzZXIge1xuICBpZDogbnVtYmVyXG4gIHVzZXJuYW1lOiBzdHJpbmdcbiAgcGFzc3dvcmRfaGFzaDogc3RyaW5nXG4gIGxhc3RfbG9naW4/OiBEYXRlXG4gIGNyZWF0ZWRfYXQ6IERhdGVcbiAgdXBkYXRlZF9hdDogRGF0ZVxufVxuXG4vLyBFbnVtc1xuZXhwb3J0IGVudW0gQ29udGVudFR5cGUge1xuICBURVhUID0gJ3RleHQnLFxuICBJTUFHRSA9ICdpbWFnZScsXG4gIFZJREVPID0gJ3ZpZGVvJyxcbiAgTUlYRUQgPSAnbWl4ZWQnXG59XG5cbmV4cG9ydCBlbnVtIFNvdXJjZVBsYXRmb3JtIHtcbiAgUkVERElUID0gJ3JlZGRpdCcsXG4gIFlPVVRVQkUgPSAneW91dHViZScsXG4gIEZMSUNLUiA9ICdmbGlja3InLFxuICBVTlNQTEFTSCA9ICd1bnNwbGFzaCcsXG4gIE5FV1MgPSAnbmV3cycsXG4gIE1BU1RPRE9OID0gJ21hc3RvZG9uJ1xufVxuXG5leHBvcnQgZW51bSBMb2dMZXZlbCB7XG4gIERFQlVHID0gJ2RlYnVnJyxcbiAgSU5GTyA9ICdpbmZvJyxcbiAgV0FSTiA9ICd3YXJuJyxcbiAgRVJST1IgPSAnZXJyb3InLFxuICBGQVRBTCA9ICdmYXRhbCdcbn1cblxuLy8gQVBJIFJlcXVlc3QvUmVzcG9uc2UgVHlwZXNcbmV4cG9ydCBpbnRlcmZhY2UgQ29udGVudEFwaVJlc3BvbnNlIHtcbiAgc3VjY2VzczogYm9vbGVhblxuICBkYXRhOiB7XG4gICAgY29udGVudDogUG9zdGVkQ29udGVudFtdXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgcGFnZTogbnVtYmVyXG4gICAgICBsaW1pdDogbnVtYmVyXG4gICAgICB0b3RhbDogbnVtYmVyXG4gICAgICB0b3RhbFBhZ2VzOiBudW1iZXJcbiAgICB9XG4gIH1cbiAgbWVzc2FnZT86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFiYXNlSGVhbHRoQ2hlY2sge1xuICBjb25uZWN0ZWQ6IGJvb2xlYW5cbiAgbGF0ZW5jeT86IG51bWJlclxuICBlcnJvcj86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVuaGFuY2VkSGVhbHRoUmVzcG9uc2UgZXh0ZW5kcyBIZWFsdGhDaGVja1Jlc3BvbnNlIHtcbiAgY2hlY2tzOiB7XG4gICAgZGF0YWJhc2U6IERhdGFiYXNlSGVhbHRoQ2hlY2tcbiAgICBzb2NpYWxNZWRpYVNjYW5uZXI/OiBzdHJpbmdcbiAgICBjb250ZW50U2NoZWR1bGVyPzogc3RyaW5nXG4gIH1cbn0iXSwibmFtZXMiOlsiQ29udGVudFR5cGUiLCJTb3VyY2VQbGF0Zm9ybSIsIkxvZ0xldmVsIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./types/index.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "async_hooks":
/*!******************************!*\
  !*** external "async_hooks" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("async_hooks");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = import("pg");;

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@neondatabase","vendor-chunks/ws","vendor-chunks/@vercel","vendor-chunks/node-gyp-build","vendor-chunks/bufferutil","vendor-chunks/safe-buffer","vendor-chunks/lodash","vendor-chunks/snoowrap","vendor-chunks/ajv","vendor-chunks/sshpk","vendor-chunks/bluebird","vendor-chunks/psl","vendor-chunks/mime-db","vendor-chunks/request","vendor-chunks/harmony-reflect","vendor-chunks/tweetnacl","vendor-chunks/request-promise","vendor-chunks/uri-js","vendor-chunks/jsbn","vendor-chunks/http-signature","vendor-chunks/ecc-jsbn","vendor-chunks/bcrypt-pbkdf","vendor-chunks/qs","vendor-chunks/jsprim","vendor-chunks/asn1","vendor-chunks/aws4","vendor-chunks/form-data","vendor-chunks/verror","vendor-chunks/json-schema","vendor-chunks/request-promise-core","vendor-chunks/asynckit","vendor-chunks/har-schema","vendor-chunks/tunnel-agent","vendor-chunks/assert-plus","vendor-chunks/combined-stream","vendor-chunks/aws-sign2","vendor-chunks/forever-agent","vendor-chunks/extsprintf","vendor-chunks/oauth-sign","vendor-chunks/mime-types","vendor-chunks/promise-chains","vendor-chunks/extend","vendor-chunks/ultron","vendor-chunks/core-util-is","vendor-chunks/stealthy-require","vendor-chunks/json-schema-traverse","vendor-chunks/delayed-stream","vendor-chunks/har-validator","vendor-chunks/safer-buffer","vendor-chunks/fast-json-stable-stringify","vendor-chunks/caseless","vendor-chunks/async-limiter","vendor-chunks/fast-deep-equal","vendor-chunks/performance-now","vendor-chunks/is-typedarray","vendor-chunks/json-stringify-safe","vendor-chunks/isstream"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Freddit%2Fstatus%2Froute&page=%2Fapi%2Fadmin%2Freddit%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Freddit%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();