/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/admin/dashboard/activity/route";
exports.ids = ["app/api/admin/dashboard/activity/route"];
exports.modules = {

/***/ "(rsc)/./app/api/admin/dashboard/activity/route.ts":
/*!***************************************************!*\
  !*** ./app/api/admin/dashboard/activity/route.ts ***!
  \***************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/auth */ \"(rsc)/./lib/auth.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_auth__WEBPACK_IMPORTED_MODULE_1__, _lib_db__WEBPACK_IMPORTED_MODULE_2__]);\n([_lib_auth__WEBPACK_IMPORTED_MODULE_1__, _lib_db__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nasync function GET(request) {\n    try {\n        const authResult = await _lib_auth__WEBPACK_IMPORTED_MODULE_1__.NextAuthUtils.verifyRequestAuth(request);\n        if (!authResult.success || !authResult.user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Unauthorized'\n            }, {\n                status: 401\n            });\n        }\n        // Get recent content activity from posted_content and content_queue\n        const recentPostsQuery = `\n      SELECT \n        pc.id,\n        cq.content_text,\n        pc.posted_at,\n        'posted' as activity_type\n      FROM posted_content pc\n      JOIN content_queue cq ON pc.content_queue_id = cq.id\n      ORDER BY pc.posted_at DESC\n      LIMIT 10\n    `;\n        const recentAdditionsQuery = `\n      SELECT \n        id,\n        content_text,\n        created_at,\n        'added' as activity_type\n      FROM content_queue \n      WHERE created_at > NOW() - INTERVAL '24 hours'\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;\n        const [postsResult, additionsResult] = await Promise.all([\n            _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(recentPostsQuery),\n            _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(recentAdditionsQuery)\n        ]);\n        // Transform content data into activity items\n        const activities = [];\n        // Add posted content activities\n        for (const row of postsResult.rows){\n            const contentPreview = row.content_text ? row.content_text.substring(0, 50) + (row.content_text.length > 50 ? '...' : '') : 'Content posted';\n            activities.push({\n                id: `posted-${row.id}`,\n                type: 'posted',\n                description: `Posted: ${contentPreview}`,\n                timestamp: new Date(row.posted_at)\n            });\n        }\n        // Add recent additions\n        for (const row of additionsResult.rows){\n            const contentPreview = row.content_text ? row.content_text.substring(0, 50) + (row.content_text.length > 50 ? '...' : '') : 'New content added';\n            activities.push({\n                id: `added-${row.id}`,\n                type: 'added',\n                description: `Added to queue: ${contentPreview}`,\n                timestamp: new Date(row.created_at)\n            });\n        }\n        // Sort by timestamp descending and limit to 10 most recent\n        activities.sort((a, b)=>b.timestamp.getTime() - a.timestamp.getTime());\n        const recentActivities = activities.slice(0, 10);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(recentActivities);\n    } catch (error) {\n        console.error('Error fetching dashboard activity:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to fetch dashboard activity'\n        }, {\n            status: 500\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2FkbWluL2Rhc2hib2FyZC9hY3Rpdml0eS9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXVEO0FBQ2I7QUFDYjtBQVN0QixlQUFlRyxJQUFJQyxPQUFvQjtJQUM1QyxJQUFJO1FBQ0YsTUFBTUMsYUFBYSxNQUFNSixvREFBYUEsQ0FBQ0ssaUJBQWlCLENBQUNGO1FBQ3pELElBQUksQ0FBQ0MsV0FBV0UsT0FBTyxJQUFJLENBQUNGLFdBQVdHLElBQUksRUFBRTtZQUMzQyxPQUFPUixxREFBWUEsQ0FBQ1MsSUFBSSxDQUFDO2dCQUFFQyxPQUFPO1lBQWUsR0FBRztnQkFBRUMsUUFBUTtZQUFJO1FBQ3BFO1FBRUEsb0VBQW9FO1FBQ3BFLE1BQU1DLG1CQUFtQixDQUFDOzs7Ozs7Ozs7O0lBVTFCLENBQUM7UUFFRCxNQUFNQyx1QkFBdUIsQ0FBQzs7Ozs7Ozs7OztJQVU5QixDQUFDO1FBRUQsTUFBTSxDQUFDQyxhQUFhQyxnQkFBZ0IsR0FBRyxNQUFNQyxRQUFRQyxHQUFHLENBQUM7WUFDdkRmLHVDQUFFQSxDQUFDZ0IsS0FBSyxDQUFDTjtZQUNUVix1Q0FBRUEsQ0FBQ2dCLEtBQUssQ0FBQ0w7U0FDVjtRQUVELDZDQUE2QztRQUM3QyxNQUFNTSxhQUE0QixFQUFFO1FBRXBDLGdDQUFnQztRQUNoQyxLQUFLLE1BQU1DLE9BQU9OLFlBQVlPLElBQUksQ0FBRTtZQUNsQyxNQUFNQyxpQkFBaUJGLElBQUlHLFlBQVksR0FDbkNILElBQUlHLFlBQVksQ0FBQ0MsU0FBUyxDQUFDLEdBQUcsTUFBT0osQ0FBQUEsSUFBSUcsWUFBWSxDQUFDRSxNQUFNLEdBQUcsS0FBSyxRQUFRLEVBQUMsSUFDN0U7WUFFSk4sV0FBV08sSUFBSSxDQUFDO2dCQUNkQyxJQUFJLENBQUMsT0FBTyxFQUFFUCxJQUFJTyxFQUFFLEVBQUU7Z0JBQ3RCQyxNQUFNO2dCQUNOQyxhQUFhLENBQUMsUUFBUSxFQUFFUCxnQkFBZ0I7Z0JBQ3hDUSxXQUFXLElBQUlDLEtBQUtYLElBQUlZLFNBQVM7WUFDbkM7UUFDRjtRQUVBLHVCQUF1QjtRQUN2QixLQUFLLE1BQU1aLE9BQU9MLGdCQUFnQk0sSUFBSSxDQUFFO1lBQ3RDLE1BQU1DLGlCQUFpQkYsSUFBSUcsWUFBWSxHQUNuQ0gsSUFBSUcsWUFBWSxDQUFDQyxTQUFTLENBQUMsR0FBRyxNQUFPSixDQUFBQSxJQUFJRyxZQUFZLENBQUNFLE1BQU0sR0FBRyxLQUFLLFFBQVEsRUFBQyxJQUM3RTtZQUVKTixXQUFXTyxJQUFJLENBQUM7Z0JBQ2RDLElBQUksQ0FBQyxNQUFNLEVBQUVQLElBQUlPLEVBQUUsRUFBRTtnQkFDckJDLE1BQU07Z0JBQ05DLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRVAsZ0JBQWdCO2dCQUNoRFEsV0FBVyxJQUFJQyxLQUFLWCxJQUFJYSxVQUFVO1lBQ3BDO1FBQ0Y7UUFFQSwyREFBMkQ7UUFDM0RkLFdBQVdlLElBQUksQ0FBQyxDQUFDQyxHQUFHQyxJQUFNQSxFQUFFTixTQUFTLENBQUNPLE9BQU8sS0FBS0YsRUFBRUwsU0FBUyxDQUFDTyxPQUFPO1FBQ3JFLE1BQU1DLG1CQUFtQm5CLFdBQVdvQixLQUFLLENBQUMsR0FBRztRQUU3QyxPQUFPdkMscURBQVlBLENBQUNTLElBQUksQ0FBQzZCO0lBQzNCLEVBQUUsT0FBTzVCLE9BQU87UUFDZDhCLFFBQVE5QixLQUFLLENBQUMsc0NBQXNDQTtRQUNwRCxPQUFPVixxREFBWUEsQ0FBQ1MsSUFBSSxDQUN0QjtZQUFFQyxPQUFPO1FBQXFDLEdBQzlDO1lBQUVDLFFBQVE7UUFBSTtJQUVsQjtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvYWRhbXNoYXcvRGV2ZWxvcG1lbnQvd2Vic2l0ZXMvaG90ZG9nLWRpYXJpZXMvYXBwL2FwaS9hZG1pbi9kYXNoYm9hcmQvYWN0aXZpdHkvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJ1xuaW1wb3J0IHsgTmV4dEF1dGhVdGlscyB9IGZyb20gJ0AvbGliL2F1dGgnXG5pbXBvcnQgeyBkYiB9IGZyb20gJ0AvbGliL2RiJ1xuXG5pbnRlcmZhY2UgQWN0aXZpdHlSb3cge1xuICBpZDogc3RyaW5nXG4gIHR5cGU6IHN0cmluZ1xuICBkZXNjcmlwdGlvbjogc3RyaW5nXG4gIHRpbWVzdGFtcDogRGF0ZVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYXV0aFJlc3VsdCA9IGF3YWl0IE5leHRBdXRoVXRpbHMudmVyaWZ5UmVxdWVzdEF1dGgocmVxdWVzdClcbiAgICBpZiAoIWF1dGhSZXN1bHQuc3VjY2VzcyB8fCAhYXV0aFJlc3VsdC51c2VyKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSwgeyBzdGF0dXM6IDQwMSB9KVxuICAgIH1cblxuICAgIC8vIEdldCByZWNlbnQgY29udGVudCBhY3Rpdml0eSBmcm9tIHBvc3RlZF9jb250ZW50IGFuZCBjb250ZW50X3F1ZXVlXG4gICAgY29uc3QgcmVjZW50UG9zdHNRdWVyeSA9IGBcbiAgICAgIFNFTEVDVCBcbiAgICAgICAgcGMuaWQsXG4gICAgICAgIGNxLmNvbnRlbnRfdGV4dCxcbiAgICAgICAgcGMucG9zdGVkX2F0LFxuICAgICAgICAncG9zdGVkJyBhcyBhY3Rpdml0eV90eXBlXG4gICAgICBGUk9NIHBvc3RlZF9jb250ZW50IHBjXG4gICAgICBKT0lOIGNvbnRlbnRfcXVldWUgY3EgT04gcGMuY29udGVudF9xdWV1ZV9pZCA9IGNxLmlkXG4gICAgICBPUkRFUiBCWSBwYy5wb3N0ZWRfYXQgREVTQ1xuICAgICAgTElNSVQgMTBcbiAgICBgXG5cbiAgICBjb25zdCByZWNlbnRBZGRpdGlvbnNRdWVyeSA9IGBcbiAgICAgIFNFTEVDVCBcbiAgICAgICAgaWQsXG4gICAgICAgIGNvbnRlbnRfdGV4dCxcbiAgICAgICAgY3JlYXRlZF9hdCxcbiAgICAgICAgJ2FkZGVkJyBhcyBhY3Rpdml0eV90eXBlXG4gICAgICBGUk9NIGNvbnRlbnRfcXVldWUgXG4gICAgICBXSEVSRSBjcmVhdGVkX2F0ID4gTk9XKCkgLSBJTlRFUlZBTCAnMjQgaG91cnMnXG4gICAgICBPUkRFUiBCWSBjcmVhdGVkX2F0IERFU0NcbiAgICAgIExJTUlUIDEwXG4gICAgYFxuXG4gICAgY29uc3QgW3Bvc3RzUmVzdWx0LCBhZGRpdGlvbnNSZXN1bHRdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgZGIucXVlcnkocmVjZW50UG9zdHNRdWVyeSksXG4gICAgICBkYi5xdWVyeShyZWNlbnRBZGRpdGlvbnNRdWVyeSlcbiAgICBdKVxuICAgIFxuICAgIC8vIFRyYW5zZm9ybSBjb250ZW50IGRhdGEgaW50byBhY3Rpdml0eSBpdGVtc1xuICAgIGNvbnN0IGFjdGl2aXRpZXM6IEFjdGl2aXR5Um93W10gPSBbXVxuICAgIFxuICAgIC8vIEFkZCBwb3N0ZWQgY29udGVudCBhY3Rpdml0aWVzXG4gICAgZm9yIChjb25zdCByb3cgb2YgcG9zdHNSZXN1bHQucm93cykge1xuICAgICAgY29uc3QgY29udGVudFByZXZpZXcgPSByb3cuY29udGVudF90ZXh0IFxuICAgICAgICA/IHJvdy5jb250ZW50X3RleHQuc3Vic3RyaW5nKDAsIDUwKSArIChyb3cuY29udGVudF90ZXh0Lmxlbmd0aCA+IDUwID8gJy4uLicgOiAnJylcbiAgICAgICAgOiAnQ29udGVudCBwb3N0ZWQnXG4gICAgICBcbiAgICAgIGFjdGl2aXRpZXMucHVzaCh7XG4gICAgICAgIGlkOiBgcG9zdGVkLSR7cm93LmlkfWAsXG4gICAgICAgIHR5cGU6ICdwb3N0ZWQnLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFBvc3RlZDogJHtjb250ZW50UHJldmlld31gLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKHJvdy5wb3N0ZWRfYXQpXG4gICAgICB9KVxuICAgIH1cbiAgICBcbiAgICAvLyBBZGQgcmVjZW50IGFkZGl0aW9uc1xuICAgIGZvciAoY29uc3Qgcm93IG9mIGFkZGl0aW9uc1Jlc3VsdC5yb3dzKSB7XG4gICAgICBjb25zdCBjb250ZW50UHJldmlldyA9IHJvdy5jb250ZW50X3RleHQgXG4gICAgICAgID8gcm93LmNvbnRlbnRfdGV4dC5zdWJzdHJpbmcoMCwgNTApICsgKHJvdy5jb250ZW50X3RleHQubGVuZ3RoID4gNTAgPyAnLi4uJyA6ICcnKVxuICAgICAgICA6ICdOZXcgY29udGVudCBhZGRlZCdcbiAgICAgIFxuICAgICAgYWN0aXZpdGllcy5wdXNoKHtcbiAgICAgICAgaWQ6IGBhZGRlZC0ke3Jvdy5pZH1gLFxuICAgICAgICB0eXBlOiAnYWRkZWQnLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEFkZGVkIHRvIHF1ZXVlOiAke2NvbnRlbnRQcmV2aWV3fWAsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUocm93LmNyZWF0ZWRfYXQpXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIFNvcnQgYnkgdGltZXN0YW1wIGRlc2NlbmRpbmcgYW5kIGxpbWl0IHRvIDEwIG1vc3QgcmVjZW50XG4gICAgYWN0aXZpdGllcy5zb3J0KChhLCBiKSA9PiBiLnRpbWVzdGFtcC5nZXRUaW1lKCkgLSBhLnRpbWVzdGFtcC5nZXRUaW1lKCkpXG4gICAgY29uc3QgcmVjZW50QWN0aXZpdGllcyA9IGFjdGl2aXRpZXMuc2xpY2UoMCwgMTApXG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24ocmVjZW50QWN0aXZpdGllcylcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBkYXNoYm9hcmQgYWN0aXZpdHk6JywgZXJyb3IpXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogJ0ZhaWxlZCB0byBmZXRjaCBkYXNoYm9hcmQgYWN0aXZpdHknIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApXG4gIH1cbn0iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiTmV4dEF1dGhVdGlscyIsImRiIiwiR0VUIiwicmVxdWVzdCIsImF1dGhSZXN1bHQiLCJ2ZXJpZnlSZXF1ZXN0QXV0aCIsInN1Y2Nlc3MiLCJ1c2VyIiwianNvbiIsImVycm9yIiwic3RhdHVzIiwicmVjZW50UG9zdHNRdWVyeSIsInJlY2VudEFkZGl0aW9uc1F1ZXJ5IiwicG9zdHNSZXN1bHQiLCJhZGRpdGlvbnNSZXN1bHQiLCJQcm9taXNlIiwiYWxsIiwicXVlcnkiLCJhY3Rpdml0aWVzIiwicm93Iiwicm93cyIsImNvbnRlbnRQcmV2aWV3IiwiY29udGVudF90ZXh0Iiwic3Vic3RyaW5nIiwibGVuZ3RoIiwicHVzaCIsImlkIiwidHlwZSIsImRlc2NyaXB0aW9uIiwidGltZXN0YW1wIiwiRGF0ZSIsInBvc3RlZF9hdCIsImNyZWF0ZWRfYXQiLCJzb3J0IiwiYSIsImIiLCJnZXRUaW1lIiwicmVjZW50QWN0aXZpdGllcyIsInNsaWNlIiwiY29uc29sZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/admin/dashboard/activity/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/auth.ts":
/*!*********************!*\
  !*** ./lib/auth.ts ***!
  \*********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTH_COOKIE_NAME: () => (/* binding */ AUTH_COOKIE_NAME),\n/* harmony export */   AUTH_ERRORS: () => (/* binding */ AUTH_ERRORS),\n/* harmony export */   AuthError: () => (/* binding */ AuthError),\n/* harmony export */   AuthValidation: () => (/* binding */ AuthValidation),\n/* harmony export */   ClientAuthUtils: () => (/* binding */ ClientAuthUtils),\n/* harmony export */   NextAuthUtils: () => (/* binding */ NextAuthUtils),\n/* harmony export */   REFRESH_COOKIE_NAME: () => (/* binding */ REFRESH_COOKIE_NAME)\n/* harmony export */ });\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _services_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/auth */ \"(rsc)/./lib/services/auth.ts\");\n/* harmony import */ var _services_admin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/admin */ \"(rsc)/./lib/services/admin.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_services_admin__WEBPACK_IMPORTED_MODULE_3__]);\n_services_admin__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nconst AUTH_COOKIE_NAME = 'auth-token';\nconst REFRESH_COOKIE_NAME = 'refresh-token';\n/**\n * Server-side auth utilities for Next.js\n */ class NextAuthUtils {\n    /**\n   * Get default cookie options for authentication\n   */ static getDefaultCookieOptions() {\n        return {\n            httpOnly: true,\n            secure: \"development\" === 'production',\n            sameSite: 'strict',\n            path: '/',\n            maxAge: 24 * 60 * 60 // 24 hours\n        };\n    }\n    /**\n   * Set authentication cookies\n   */ static async setAuthCookies(response, accessToken, refreshToken) {\n        const cookieOptions = this.getDefaultCookieOptions();\n        // Set access token cookie\n        response.cookies.set(AUTH_COOKIE_NAME, accessToken, cookieOptions);\n        // Set refresh token cookie (longer expiry)\n        if (refreshToken) {\n            response.cookies.set(REFRESH_COOKIE_NAME, refreshToken, {\n                ...cookieOptions,\n                maxAge: 7 * 24 * 60 * 60 // 7 days\n            });\n        }\n    }\n    /**\n   * Clear authentication cookies\n   */ static clearAuthCookies(response) {\n        const cookieOptions = {\n            ...this.getDefaultCookieOptions(),\n            maxAge: 0\n        };\n        response.cookies.set(AUTH_COOKIE_NAME, '', cookieOptions);\n        response.cookies.set(REFRESH_COOKIE_NAME, '', cookieOptions);\n    }\n    /**\n   * Get authentication token from cookies (server-side)\n   */ static async getAuthToken() {\n        try {\n            const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)();\n            const tokenCookie = cookieStore.get(AUTH_COOKIE_NAME);\n            return tokenCookie?.value || null;\n        } catch (error) {\n            console.error('Error getting auth token from cookies:', error);\n            return null;\n        }\n    }\n    /**\n   * Get refresh token from cookies (server-side)\n   */ static async getRefreshToken() {\n        try {\n            const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)();\n            const tokenCookie = cookieStore.get(REFRESH_COOKIE_NAME);\n            return tokenCookie?.value || null;\n        } catch (error) {\n            console.error('Error getting refresh token from cookies:', error);\n            return null;\n        }\n    }\n    /**\n   * Get authentication token from request cookies\n   */ static getAuthTokenFromRequest(request) {\n        return request.cookies.get(AUTH_COOKIE_NAME)?.value || null;\n    }\n    /**\n   * Get current authenticated user (server-side)\n   */ static async getCurrentUser() {\n        try {\n            const token = await this.getAuthToken();\n            if (!token) return null;\n            const payload = _services_auth__WEBPACK_IMPORTED_MODULE_2__.AuthService.verifyJWT(token);\n            const user = await _services_admin__WEBPACK_IMPORTED_MODULE_3__.AdminService.getAdminById(payload.userId);\n            return user;\n        } catch (error) {\n            console.error('Error getting current user:', error);\n            return null;\n        }\n    }\n    /**\n   * Verify authentication from request\n   */ static async verifyRequestAuth(request) {\n        try {\n            const token = this.getAuthTokenFromRequest(request);\n            if (!token) {\n                return {\n                    isValid: false\n                };\n            }\n            const payload = _services_auth__WEBPACK_IMPORTED_MODULE_2__.AuthService.verifyJWT(token);\n            const user = await _services_admin__WEBPACK_IMPORTED_MODULE_3__.AdminService.getAdminById(payload.userId);\n            if (!user) {\n                return {\n                    isValid: false\n                };\n            }\n            return {\n                isValid: true,\n                payload,\n                user\n            };\n        } catch (error) {\n            console.error('Request auth verification failed:', error);\n            return {\n                isValid: false\n            };\n        }\n    }\n    /**\n   * Refresh access token using refresh token\n   */ static async refreshAccessToken(refreshToken) {\n        try {\n            const payload = _services_auth__WEBPACK_IMPORTED_MODULE_2__.AuthService.verifyRefreshToken(refreshToken);\n            const user = await _services_admin__WEBPACK_IMPORTED_MODULE_3__.AdminService.getAdminById(payload.userId);\n            if (!user) {\n                return null;\n            }\n            // Generate new tokens\n            const tokens = _services_auth__WEBPACK_IMPORTED_MODULE_2__.AuthService.generateTokens({\n                id: user.id,\n                username: user.username\n            });\n            return tokens;\n        } catch (error) {\n            console.error('Token refresh failed:', error);\n            return null;\n        }\n    }\n    /**\n   * Create authenticated redirect response\n   */ static createAuthRedirect(redirectTo = '/admin') {\n        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.redirect(new URL(redirectTo, process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'));\n    }\n    /**\n   * Create unauthenticated redirect response\n   */ static createLoginRedirect(from) {\n        const loginUrl = new URL('/admin/login', process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000');\n        if (from) {\n            loginUrl.searchParams.set('from', from);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.redirect(loginUrl);\n    }\n    /**\n   * Validate authentication state and handle token refresh\n   */ static async validateAndRefreshAuth(request) {\n        const accessToken = this.getAuthTokenFromRequest(request);\n        // No access token - redirect to login\n        if (!accessToken) {\n            return {\n                isAuthenticated: false,\n                response: this.createLoginRedirect(request.nextUrl.pathname)\n            };\n        }\n        try {\n            // Try to verify access token\n            const payload = _services_auth__WEBPACK_IMPORTED_MODULE_2__.AuthService.verifyJWT(accessToken);\n            const user = await _services_admin__WEBPACK_IMPORTED_MODULE_3__.AdminService.getAdminById(payload.userId);\n            if (user) {\n                return {\n                    isAuthenticated: true,\n                    user\n                };\n            }\n        } catch (error) {\n            // Access token is invalid or expired, try refresh token\n            const refreshToken = request.cookies.get(REFRESH_COOKIE_NAME)?.value;\n            if (refreshToken) {\n                const newTokens = await this.refreshAccessToken(refreshToken);\n                if (newTokens) {\n                    // Create response with new tokens\n                    const response = next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.next();\n                    await this.setAuthCookies(response, newTokens.accessToken, newTokens.refreshToken);\n                    const user = await _services_admin__WEBPACK_IMPORTED_MODULE_3__.AdminService.getAdminById(_services_auth__WEBPACK_IMPORTED_MODULE_2__.AuthService.verifyJWT(newTokens.accessToken).userId);\n                    return {\n                        isAuthenticated: true,\n                        response,\n                        user\n                    };\n                }\n            }\n        }\n        // Authentication failed - clear cookies and redirect\n        const response = this.createLoginRedirect(request.nextUrl.pathname);\n        this.clearAuthCookies(response);\n        return {\n            isAuthenticated: false,\n            response\n        };\n    }\n}\n/**\n * Client-side auth utilities\n */ class ClientAuthUtils {\n    /**\n   * Check if user is authenticated (client-side)\n   */ static isAuthenticated() {\n        if (true) return false;\n        // In a real implementation, you might check a client-side auth state\n        // For now, we'll rely on server-side authentication\n        return true // This should be managed by your auth context\n        ;\n    }\n    /**\n   * Get user from client-side state\n   */ static getCurrentUser() {\n        if (true) return null;\n        // This should be managed by your auth context\n        // For now, return null and let the context handle it\n        return null;\n    }\n    /**\n   * Redirect to login page\n   */ static redirectToLogin(from) {\n        if (true) return;\n        const loginUrl = new URL('/admin/login', window.location.origin);\n        if (from) {\n            loginUrl.searchParams.set('from', from);\n        }\n        window.location.href = loginUrl.toString();\n    }\n    /**\n   * Redirect after successful login\n   */ static redirectAfterLogin(to) {\n        if (true) return;\n        const defaultRedirect = '/admin';\n        const redirectTo = to || defaultRedirect;\n        window.location.href = redirectTo;\n    }\n    /**\n   * Clear client-side auth state\n   */ static clearAuthState() {\n        if (true) return;\n    // Clear any client-side auth state\n    // This should be handled by your auth context\n    }\n}\n/**\n * Auth validation utilities\n */ class AuthValidation {\n    /**\n   * Validate login credentials format\n   */ static validateLoginCredentials(username, password) {\n        const errors = [];\n        if (!username || username.trim().length === 0) {\n            errors.push('Username is required');\n        }\n        if (username && username.length < 3) {\n            errors.push('Username must be at least 3 characters');\n        }\n        if (!password || password.length === 0) {\n            errors.push('Password is required');\n        }\n        if (password && password.length < 8) {\n            errors.push('Password must be at least 8 characters');\n        }\n        return {\n            isValid: errors.length === 0,\n            errors\n        };\n    }\n    /**\n   * Sanitize username input\n   */ static sanitizeUsername(username) {\n        return username.trim().toLowerCase().replace(/[^a-z0-9_.-]/g, '');\n    }\n}\n/**\n * Auth error types\n */ class AuthError extends Error {\n    constructor(message, code, statusCode = 401){\n        super(message), this.code = code, this.statusCode = statusCode;\n        this.name = 'AuthError';\n    }\n}\nconst AUTH_ERRORS = {\n    INVALID_CREDENTIALS: new AuthError('Invalid username or password', 'INVALID_CREDENTIALS', 401),\n    TOKEN_EXPIRED: new AuthError('Session has expired', 'TOKEN_EXPIRED', 401),\n    TOKEN_INVALID: new AuthError('Invalid session token', 'TOKEN_INVALID', 401),\n    UNAUTHORIZED: new AuthError('Unauthorized access', 'UNAUTHORIZED', 401),\n    FORBIDDEN: new AuthError('Access forbidden', 'FORBIDDEN', 403),\n    USER_INACTIVE: new AuthError('User account is inactive', 'USER_INACTIVE', 403),\n    RATE_LIMITED: new AuthError('Too many login attempts', 'RATE_LIMITED', 429)\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/auth.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db-query-builder.ts":
/*!*********************************!*\
  !*** ./lib/db-query-builder.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeleteBuilder: () => (/* binding */ DeleteBuilder),\n/* harmony export */   InsertBuilder: () => (/* binding */ InsertBuilder),\n/* harmony export */   QueryBuilder: () => (/* binding */ QueryBuilder),\n/* harmony export */   UpdateBuilder: () => (/* binding */ UpdateBuilder),\n/* harmony export */   deleteFrom: () => (/* binding */ deleteFrom),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   update: () => (/* binding */ update)\n/* harmony export */ });\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./db */ \"(rsc)/./lib/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_db__WEBPACK_IMPORTED_MODULE_0__]);\n_db__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nclass QueryBuilder {\n    static table(tableName) {\n        const builder = new QueryBuilder();\n        builder.fromTable = tableName;\n        return builder;\n    }\n    select(fields) {\n        if (typeof fields === 'string') {\n            this.selectFields = [\n                fields\n            ];\n        } else {\n            this.selectFields = fields;\n        }\n        return this;\n    }\n    where(field, operator, value) {\n        this.whereConditions.push({\n            field,\n            operator,\n            value\n        });\n        return this;\n    }\n    whereIn(field, values) {\n        this.whereConditions.push({\n            field,\n            operator: 'IN',\n            values\n        });\n        return this;\n    }\n    whereNotIn(field, values) {\n        this.whereConditions.push({\n            field,\n            operator: 'NOT IN',\n            values\n        });\n        return this;\n    }\n    whereNull(field) {\n        this.whereConditions.push({\n            field,\n            operator: 'IS NULL'\n        });\n        return this;\n    }\n    whereNotNull(field) {\n        this.whereConditions.push({\n            field,\n            operator: 'IS NOT NULL'\n        });\n        return this;\n    }\n    orderBy(field, direction = 'ASC') {\n        this.orderByFields.push({\n            field,\n            direction\n        });\n        return this;\n    }\n    join(table, on, type = 'INNER') {\n        this.joinClauses.push({\n            type,\n            table,\n            on\n        });\n        return this;\n    }\n    leftJoin(table, on) {\n        return this.join(table, on, 'LEFT');\n    }\n    limit(count) {\n        this.limitCount = count;\n        return this;\n    }\n    offset(count) {\n        this.offsetCount = count;\n        return this;\n    }\n    build() {\n        this.parameters = [];\n        let paramIndex = 1;\n        // Build SELECT clause\n        const selectClause = `SELECT ${this.selectFields.join(', ')}`;\n        // Build FROM clause\n        let fromClause = `FROM ${this.fromTable}`;\n        // Build JOIN clauses\n        if (this.joinClauses.length > 0) {\n            fromClause += ' ' + this.joinClauses.map((join)=>`${join.type} JOIN ${join.table} ON ${join.on}`).join(' ');\n        }\n        // Build WHERE clause\n        let whereClause = '';\n        if (this.whereConditions.length > 0) {\n            const conditions = this.whereConditions.map((condition)=>{\n                switch(condition.operator){\n                    case 'IS NULL':\n                    case 'IS NOT NULL':\n                        return `${condition.field} ${condition.operator}`;\n                    case 'IN':\n                    case 'NOT IN':\n                        if (!condition.values || condition.values.length === 0) {\n                            throw new Error(`${condition.operator} requires non-empty values array`);\n                        }\n                        const placeholders = condition.values.map(()=>`$${paramIndex++}`).join(', ');\n                        this.parameters.push(...condition.values);\n                        return `${condition.field} ${condition.operator} (${placeholders})`;\n                    default:\n                        this.parameters.push(condition.value);\n                        return `${condition.field} ${condition.operator} $${paramIndex++}`;\n                }\n            });\n            whereClause = `WHERE ${conditions.join(' AND ')}`;\n        }\n        // Build ORDER BY clause\n        let orderByClause = '';\n        if (this.orderByFields.length > 0) {\n            const orderFields = this.orderByFields.map((order)=>`${order.field} ${order.direction}`).join(', ');\n            orderByClause = `ORDER BY ${orderFields}`;\n        }\n        // Build LIMIT clause\n        let limitClause = '';\n        if (this.limitCount !== undefined) {\n            limitClause = `LIMIT $${paramIndex++}`;\n            this.parameters.push(this.limitCount);\n        }\n        // Build OFFSET clause\n        let offsetClause = '';\n        if (this.offsetCount !== undefined) {\n            offsetClause = `OFFSET $${paramIndex++}`;\n            this.parameters.push(this.offsetCount);\n        }\n        // Combine all clauses\n        const query = [\n            selectClause,\n            fromClause,\n            whereClause,\n            orderByClause,\n            limitClause,\n            offsetClause\n        ].filter(Boolean).join(' ');\n        return {\n            query,\n            params: this.parameters\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.limit(1).execute();\n        return result.rows[0] || null;\n    }\n    async count() {\n        const originalSelect = this.selectFields;\n        this.selectFields = [\n            'COUNT(*) as count'\n        ];\n        const result = await this.execute();\n        this.selectFields = originalSelect;\n        return parseInt(result.rows[0]?.count || '0');\n    }\n    /**\n   * Perform an upsert operation (insert or update if exists)\n   */ async upsert(data, conflictTarget) {\n        // Use the InsertBuilder with conflict handling\n        const insertBuilder = InsertBuilder.into(this.fromTable).values(data);\n        if (conflictTarget) {\n            // For now, do an update on conflict\n            insertBuilder.onConflictDoUpdate(conflictTarget, data);\n        } else {\n            // Try to determine primary key or use 'id' as default\n            insertBuilder.onConflictDoUpdate('id', data);\n        }\n        return await insertBuilder.execute();\n    }\n    constructor(){\n        this.selectFields = [\n            '*'\n        ];\n        this.fromTable = '';\n        this.whereConditions = [];\n        this.orderByFields = [];\n        this.joinClauses = [];\n        this.parameters = [];\n    }\n}\nclass InsertBuilder {\n    static into(tableName) {\n        const builder = new InsertBuilder();\n        builder.tableName = tableName;\n        return builder;\n    }\n    values(data) {\n        if (Array.isArray(data)) {\n            this.insertData = data;\n        } else {\n            this.insertData = [\n                data\n            ];\n        }\n        return this;\n    }\n    returning(fields) {\n        if (typeof fields === 'string') {\n            this.returnFields = [\n                fields\n            ];\n        } else {\n            this.returnFields = fields;\n        }\n        return this;\n    }\n    onConflict(target, action, updateData) {\n        this.conflictTarget = target;\n        this.conflictAction = action;\n        this.updateData = updateData;\n        return this;\n    }\n    onConflictDoNothing(target) {\n        return this.onConflict(target, 'DO NOTHING');\n    }\n    onConflictDoUpdate(target, updateData) {\n        return this.onConflict(target, 'DO UPDATE', updateData);\n    }\n    build() {\n        if (this.insertData.length === 0) {\n            throw new Error('No data provided for INSERT operation');\n        }\n        // Get field names from the first record\n        const fields = Object.keys(this.insertData[0]);\n        const allValues = [];\n        // Build placeholders and collect all values\n        const valueRows = [];\n        let paramIndex = 1;\n        for (const record of this.insertData){\n            const rowPlaceholders = [];\n            for (const field of fields){\n                rowPlaceholders.push(`$${paramIndex}`);\n                allValues.push(record[field]);\n                paramIndex++;\n            }\n            valueRows.push(`(${rowPlaceholders.join(', ')})`);\n        }\n        let query = `INSERT INTO ${this.tableName} (${fields.join(', ')}) VALUES ${valueRows.join(', ')}`;\n        // Add conflict handling\n        if (this.conflictTarget && this.conflictAction) {\n            query += ` ON CONFLICT (${this.conflictTarget}) ${this.conflictAction}`;\n            if (this.conflictAction === 'DO UPDATE' && this.updateData) {\n                const updateFields = Object.keys(this.updateData);\n                const updateClause = updateFields.map((field)=>`${field} = EXCLUDED.${field}`).join(', ');\n                query += ` SET ${updateClause}`;\n            }\n        }\n        // Add RETURNING clause\n        if (this.returnFields.length > 0) {\n            query += ` RETURNING ${this.returnFields.join(', ')}`;\n        }\n        return {\n            query,\n            params: allValues\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.execute();\n        return result.rows[0] || null;\n    }\n    constructor(){\n        this.tableName = '';\n        this.insertData = [];\n        this.returnFields = [\n            '*'\n        ];\n    }\n}\nclass UpdateBuilder {\n    static table(tableName) {\n        const builder = new UpdateBuilder();\n        builder.tableName = tableName;\n        return builder;\n    }\n    set(data) {\n        this.updateData = {\n            ...this.updateData,\n            ...data\n        };\n        return this;\n    }\n    where(field, operator, value) {\n        this.whereConditions.push({\n            field,\n            operator,\n            value\n        });\n        return this;\n    }\n    returning(fields) {\n        if (typeof fields === 'string') {\n            this.returnFields = [\n                fields\n            ];\n        } else {\n            this.returnFields = fields;\n        }\n        return this;\n    }\n    build() {\n        this.parameters = [];\n        let paramIndex = 1;\n        // Build SET clause\n        const updateFields = Object.keys(this.updateData);\n        const setClause = updateFields.map((field)=>{\n            this.parameters.push(this.updateData[field]);\n            return `${field} = $${paramIndex++}`;\n        }).join(', ');\n        let query = `UPDATE ${this.tableName} SET ${setClause}`;\n        // Build WHERE clause\n        if (this.whereConditions.length > 0) {\n            const conditions = this.whereConditions.map((condition)=>{\n                if (condition.operator === 'IS NULL' || condition.operator === 'IS NOT NULL') {\n                    return `${condition.field} ${condition.operator}`;\n                }\n                this.parameters.push(condition.value);\n                return `${condition.field} ${condition.operator} $${paramIndex++}`;\n            });\n            query += ` WHERE ${conditions.join(' AND ')}`;\n        }\n        // Add RETURNING clause\n        if (this.returnFields.length > 0) {\n            query += ` RETURNING ${this.returnFields.join(', ')}`;\n        }\n        return {\n            query,\n            params: this.parameters\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.execute();\n        return result.rows[0] || null;\n    }\n    constructor(){\n        this.tableName = '';\n        this.updateData = {};\n        this.whereConditions = [];\n        this.returnFields = [\n            '*'\n        ];\n        this.parameters = [];\n    }\n}\nclass DeleteBuilder {\n    static from(tableName) {\n        const builder = new DeleteBuilder();\n        builder.tableName = tableName;\n        return builder;\n    }\n    where(field, operator, value) {\n        this.whereConditions.push({\n            field,\n            operator,\n            value\n        });\n        return this;\n    }\n    returning(fields) {\n        if (typeof fields === 'string') {\n            this.returnFields = [\n                fields\n            ];\n        } else {\n            this.returnFields = fields;\n        }\n        return this;\n    }\n    build() {\n        this.parameters = [];\n        let paramIndex = 1;\n        let query = `DELETE FROM ${this.tableName}`;\n        // Build WHERE clause\n        if (this.whereConditions.length > 0) {\n            const conditions = this.whereConditions.map((condition)=>{\n                if (condition.operator === 'IS NULL' || condition.operator === 'IS NOT NULL') {\n                    return `${condition.field} ${condition.operator}`;\n                }\n                this.parameters.push(condition.value);\n                return `${condition.field} ${condition.operator} $${paramIndex++}`;\n            });\n            query += ` WHERE ${conditions.join(' AND ')}`;\n        }\n        // Add RETURNING clause\n        if (this.returnFields.length > 0) {\n            query += ` RETURNING ${this.returnFields.join(', ')}`;\n        }\n        return {\n            query,\n            params: this.parameters\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.execute();\n        return result.rows[0] || null;\n    }\n    constructor(){\n        this.tableName = '';\n        this.whereConditions = [];\n        this.returnFields = [\n            '*'\n        ];\n        this.parameters = [];\n    }\n}\n// Export convenience functions\nconst query = QueryBuilder.table;\nconst insert = InsertBuilder.into;\nconst update = UpdateBuilder.table;\nconst deleteFrom = DeleteBuilder.from;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db-query-builder.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeDatabase: () => (/* binding */ closeDatabase),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   initializeDatabase: () => (/* binding */ initializeDatabase),\n/* harmony export */   logToDatabase: () => (/* binding */ logToDatabase),\n/* harmony export */   sql: () => (/* reexport safe */ _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__.sql)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/postgres */ \"(rsc)/./node_modules/@vercel/postgres/dist/index-node.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nclass DatabaseConnection {\n    constructor(){\n        this.pool = null;\n        this.isVercel = false;\n        this.isVercel = !!process.env.POSTGRES_URL;\n    }\n    getConfig() {\n        if (this.isVercel) {\n            return {\n                host: process.env.POSTGRES_HOST,\n                port: 5432,\n                database: process.env.POSTGRES_DATABASE,\n                user: process.env.POSTGRES_USER,\n                password: process.env.POSTGRES_PASSWORD,\n                ssl: true,\n                max: 20,\n                idleTimeoutMillis: 30000,\n                connectionTimeoutMillis: 2000\n            };\n        }\n        return {\n            host: process.env.DATABASE_HOST || 'localhost',\n            port: parseInt(process.env.DATABASE_PORT || '5432'),\n            database: process.env.DATABASE_NAME || 'hotdog_diaries_dev',\n            user: process.env.DATABASE_USER || 'postgres',\n            password: process.env.DATABASE_PASSWORD || 'password',\n            ssl: false,\n            max: 10,\n            idleTimeoutMillis: 30000,\n            connectionTimeoutMillis: 2000\n        };\n    }\n    async connect() {\n        if (this.pool) {\n            return;\n        }\n        const config = this.getConfig();\n        this.pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool(config);\n        this.pool.on('error', (err)=>{\n            console.error('Unexpected database error on idle client', err);\n        });\n        this.pool.on('connect', ()=>{\n            console.log('Database connection established');\n        });\n        this.pool.on('remove', ()=>{\n            console.log('Database connection removed');\n        });\n        try {\n            const client = await this.pool.connect();\n            await client.query('SELECT NOW()');\n            client.release();\n            console.log('Database connection successful');\n        } catch (error) {\n            console.error('Database connection failed:', error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        if (this.pool) {\n            await this.pool.end();\n            this.pool = null;\n            console.log('Database connection closed');\n        }\n    }\n    async query(text, params) {\n        if (this.isVercel) {\n            return await _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__.sql.query(text, params || []);\n        }\n        if (!this.pool) {\n            await this.connect();\n        }\n        const start = Date.now();\n        try {\n            const result = await this.pool.query(text, params);\n            const duration = Date.now() - start;\n            console.log('Query executed', {\n                text,\n                duration,\n                rows: result.rowCount\n            });\n            return result;\n        } catch (error) {\n            const duration = Date.now() - start;\n            console.error('Query error', {\n                text,\n                duration,\n                error\n            });\n            throw error;\n        }\n    }\n    async getClient() {\n        if (this.isVercel) {\n            throw new Error('Client connections not supported in Vercel environment');\n        }\n        if (!this.pool) {\n            throw new Error('Database not connected');\n        }\n        return await this.pool.connect();\n    }\n    async healthCheck() {\n        try {\n            const start = Date.now();\n            await this.query('SELECT 1 as health_check');\n            const latency = Date.now() - start;\n            return {\n                connected: true,\n                latency\n            };\n        } catch (error) {\n            return {\n                connected: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    async transaction(callback) {\n        if (this.isVercel) {\n            throw new Error('Transactions not supported in Vercel environment with @vercel/postgres');\n        }\n        const client = await this.getClient();\n        try {\n            await client.query('BEGIN');\n            const result = await callback(client);\n            await client.query('COMMIT');\n            return result;\n        } catch (error) {\n            await client.query('ROLLBACK');\n            throw error;\n        } finally{\n            client.release();\n        }\n    }\n}\nconst db = new DatabaseConnection();\nasync function initializeDatabase() {\n    try {\n        await db.connect();\n        console.log('Database initialized successfully');\n    } catch (error) {\n        console.error('Failed to initialize database:', error);\n        throw error;\n    }\n}\nasync function closeDatabase() {\n    try {\n        await db.disconnect();\n        console.log('Database closed successfully');\n    } catch (error) {\n        console.error('Failed to close database:', error);\n        throw error;\n    }\n}\nasync function logToDatabase(level, message, component, metadata) {\n    try {\n        // Convert LogLevel enum to database-compatible string\n        let dbLevel;\n        switch(level){\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.DEBUG:\n                dbLevel = 'debug';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.INFO:\n                dbLevel = 'info';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.WARN:\n                dbLevel = 'warning';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR:\n                dbLevel = 'error';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.FATAL:\n                dbLevel = 'error'; // Map FATAL to error since it's not in constraint\n                break;\n            default:\n                dbLevel = 'info';\n        }\n        await db.query(`INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n       VALUES ($1, $2, $3, $4, NOW())`, [\n            dbLevel,\n            message,\n            component,\n            metadata ? JSON.stringify(metadata) : null\n        ]);\n    } catch (error) {\n        console.error('Failed to log to database:', error);\n    }\n}\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/admin.ts":
/*!*******************************!*\
  !*** ./lib/services/admin.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdminService: () => (/* binding */ AdminService)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\n/* harmony import */ var _lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/db-query-builder */ \"(rsc)/./lib/db-query-builder.ts\");\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./auth */ \"(rsc)/./lib/services/auth.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__, _lib_db__WEBPACK_IMPORTED_MODULE_3__]);\n([_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__, _lib_db__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\nclass AdminService {\n    /**\n   * Create a new admin user\n   */ static async createAdminUser(data) {\n        try {\n            // Validate password strength\n            const passwordValidation = _auth__WEBPACK_IMPORTED_MODULE_2__.AuthService.validatePasswordStrength(data.password);\n            if (!passwordValidation.isValid) {\n                throw new Error(`Password validation failed: ${passwordValidation.errors.join(', ')}`);\n            }\n            // Check if username already exists\n            const existingUser = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('admin_users').where('username', '=', data.username).first();\n            if (existingUser) {\n                throw new Error(`Username '${data.username}' already exists`);\n            }\n            // Check if email already exists (if provided)\n            if (data.email) {\n                const existingEmail = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('admin_users').where('email', '=', data.email).first();\n                if (existingEmail) {\n                    throw new Error(`Email '${data.email}' already exists`);\n                }\n            }\n            // Hash the password\n            const passwordHash = await _auth__WEBPACK_IMPORTED_MODULE_2__.AuthService.hashPassword(data.password);\n            // Create the user\n            const newUser = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.insert)('admin_users').values({\n                username: data.username,\n                password_hash: passwordHash,\n                email: data.email || null,\n                full_name: data.full_name || null,\n                is_active: data.is_active !== false,\n                created_at: new Date(),\n                updated_at: new Date(),\n                login_count: 0\n            }).first();\n            if (!newUser) {\n                throw new Error('Failed to create admin user');\n            }\n            // Log the creation\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_3__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.INFO, 'ADMIN_USER_CREATED', `Admin user created: ${data.username}`, {\n                userId: newUser.id,\n                username: data.username\n            });\n            // Remove password_hash from response\n            const { password_hash, ...userWithoutPassword } = newUser;\n            return userWithoutPassword;\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_3__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.ERROR, 'ADMIN_USER_CREATE_FAILED', `Failed to create admin user: ${data.username}`, {\n                username: data.username,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            throw error;\n        }\n    }\n    /**\n   * Authenticate admin user with username and password\n   */ static async authenticateAdmin(data) {\n        try {\n            // Find user by username\n            const user = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('admin_users').where('username', '=', data.username).where('is_active', '=', true).first();\n            if (!user) {\n                throw new Error('Invalid username or password');\n            }\n            // Verify password\n            const isValidPassword = await _auth__WEBPACK_IMPORTED_MODULE_2__.AuthService.validatePassword(data.password, user.password_hash);\n            if (!isValidPassword) {\n                throw new Error('Invalid username or password');\n            }\n            // Update last login and increment login count\n            await this.updateLastLogin(user.id);\n            // Generate tokens\n            const tokens = _auth__WEBPACK_IMPORTED_MODULE_2__.AuthService.generateTokens({\n                id: user.id,\n                username: user.username\n            });\n            // Prepare user profile (without password_hash)\n            const userProfile = {\n                id: user.id,\n                username: user.username,\n                email: user.email,\n                full_name: user.full_name,\n                is_active: user.is_active,\n                created_at: user.created_at,\n                last_login_at: new Date(),\n                login_count: (user.login_count || 0) + 1\n            };\n            // Log successful authentication\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_3__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.INFO, 'ADMIN_LOGIN_SUCCESS', `Admin user logged in: ${data.username}`, {\n                userId: user.id,\n                username: data.username\n            });\n            return {\n                user: userProfile,\n                tokens\n            };\n        } catch (error) {\n            // Log failed authentication attempt\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_3__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.WARNING, 'ADMIN_LOGIN_FAILED', `Failed login attempt for username: ${data.username}`, {\n                username: data.username,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            throw error;\n        }\n    }\n    /**\n   * Update last login timestamp and increment login count\n   */ static async updateLastLogin(userId) {\n        try {\n            await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.update)('admin_users').set({\n                last_login_at: new Date(),\n                login_count: (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('admin_users').select([\n                    'COALESCE(login_count, 0) + 1 as new_count'\n                ]).where('id', '=', userId),\n                updated_at: new Date()\n            }).where('id', '=', userId).first();\n        } catch (error) {\n            // Don't throw error for login tracking failures\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_3__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.ERROR, 'LOGIN_TRACKING_FAILED', `Failed to update login tracking for user ${userId}`, {\n                userId,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n        }\n    }\n    /**\n   * Get admin user by ID\n   */ static async getAdminById(userId) {\n        try {\n            const user = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('admin_users').select([\n                'id',\n                'username',\n                'email',\n                'full_name',\n                'is_active',\n                'created_at',\n                'last_login_at',\n                'login_count'\n            ]).where('id', '=', userId).where('is_active', '=', true).first();\n            return user || null;\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_3__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.ERROR, 'ADMIN_USER_FETCH_FAILED', `Failed to fetch admin user by ID: ${userId}`, {\n                userId,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            return null;\n        }\n    }\n    /**\n   * Get admin user by username\n   */ static async getAdminByUsername(username) {\n        try {\n            const user = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('admin_users').select([\n                'id',\n                'username',\n                'email',\n                'full_name',\n                'is_active',\n                'created_at',\n                'last_login_at',\n                'login_count'\n            ]).where('username', '=', username).where('is_active', '=', true).first();\n            return user || null;\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_3__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.ERROR, 'ADMIN_USER_FETCH_FAILED', `Failed to fetch admin user by username: ${username}`, {\n                username,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            return null;\n        }\n    }\n    /**\n   * Update admin user profile\n   */ static async updateAdminProfile(userId, updates) {\n        try {\n            const updatedUser = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.update)('admin_users').set({\n                ...updates,\n                updated_at: new Date()\n            }).where('id', '=', userId).where('is_active', '=', true).first();\n            if (!updatedUser) {\n                throw new Error('Admin user not found or inactive');\n            }\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_3__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.INFO, 'ADMIN_PROFILE_UPDATED', `Admin profile updated for user: ${updatedUser.username}`, {\n                userId,\n                updates\n            });\n            return {\n                id: updatedUser.id,\n                username: updatedUser.username,\n                email: updatedUser.email,\n                full_name: updatedUser.full_name,\n                is_active: updatedUser.is_active,\n                created_at: updatedUser.created_at,\n                last_login_at: updatedUser.last_login_at,\n                login_count: updatedUser.login_count || 0\n            };\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_3__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.ERROR, 'ADMIN_PROFILE_UPDATE_FAILED', `Failed to update admin profile for user ${userId}`, {\n                userId,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            throw error;\n        }\n    }\n    /**\n   * Change admin user password\n   */ static async changePassword(userId, currentPassword, newPassword) {\n        try {\n            // Validate new password strength\n            const passwordValidation = _auth__WEBPACK_IMPORTED_MODULE_2__.AuthService.validatePasswordStrength(newPassword);\n            if (!passwordValidation.isValid) {\n                throw new Error(`Password validation failed: ${passwordValidation.errors.join(', ')}`);\n            }\n            // Get current user\n            const user = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('admin_users').where('id', '=', userId).where('is_active', '=', true).first();\n            if (!user) {\n                throw new Error('Admin user not found or inactive');\n            }\n            // Verify current password\n            const isValidCurrentPassword = await _auth__WEBPACK_IMPORTED_MODULE_2__.AuthService.validatePassword(currentPassword, user.password_hash);\n            if (!isValidCurrentPassword) {\n                throw new Error('Current password is incorrect');\n            }\n            // Hash new password\n            const newPasswordHash = await _auth__WEBPACK_IMPORTED_MODULE_2__.AuthService.hashPassword(newPassword);\n            // Update password\n            await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.update)('admin_users').set({\n                password_hash: newPasswordHash,\n                updated_at: new Date()\n            }).where('id', '=', userId).first();\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_3__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.INFO, 'ADMIN_PASSWORD_CHANGED', `Password changed for admin user: ${user.username}`, {\n                userId,\n                username: user.username\n            });\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_3__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.ERROR, 'ADMIN_PASSWORD_CHANGE_FAILED', `Failed to change password for user ${userId}`, {\n                userId,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            throw error;\n        }\n    }\n    /**\n   * Deactivate admin user\n   */ static async deactivateAdmin(userId) {\n        try {\n            const user = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.update)('admin_users').set({\n                is_active: false,\n                updated_at: new Date()\n            }).where('id', '=', userId).first();\n            if (!user) {\n                throw new Error('Admin user not found');\n            }\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_3__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.INFO, 'ADMIN_USER_DEACTIVATED', `Admin user deactivated: ${user.username}`, {\n                userId,\n                username: user.username\n            });\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_3__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.ERROR, 'ADMIN_DEACTIVATION_FAILED', `Failed to deactivate admin user ${userId}`, {\n                userId,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            throw error;\n        }\n    }\n    /**\n   * Get admin user statistics\n   */ static async getAdminStats() {\n        try {\n            const totalAdmins = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('admin_users').count();\n            const activeAdmins = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('admin_users').where('is_active', '=', true).count();\n            // Recent logins in last 24 hours\n            const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n            const recentLogins = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('admin_users').where('last_login_at', '>', oneDayAgo).count();\n            return {\n                totalAdmins,\n                activeAdmins,\n                recentLogins\n            };\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_3__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.ERROR, 'ADMIN_STATS_FETCH_FAILED', 'Failed to fetch admin statistics', {\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            throw error;\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/admin.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/auth.ts":
/*!******************************!*\
  !*** ./lib/services/auth.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthService: () => (/* binding */ AuthService)\n/* harmony export */ });\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsonwebtoken */ \"(rsc)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__);\n\n\nclass AuthService {\n    static{\n        this.SALT_ROUNDS = 12;\n    }\n    static{\n        this.ACCESS_TOKEN_EXPIRY = '24h';\n    }\n    static{\n        this.REFRESH_TOKEN_EXPIRY = '7d';\n    }\n    /**\n   * Hash a password using bcrypt\n   */ static async hashPassword(password) {\n        try {\n            const salt = await bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].genSalt(this.SALT_ROUNDS);\n            return await bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hash(password, salt);\n        } catch (error) {\n            throw new Error(`Password hashing failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n   * Validate a password against its hash\n   */ static async validatePassword(password, hash) {\n        try {\n            return await bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].compare(password, hash);\n        } catch (error) {\n            throw new Error(`Password validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n   * Generate JWT access token\n   */ static generateJWT(user) {\n        const secret = process.env.JWT_SECRET;\n        if (!secret) {\n            throw new Error('JWT_SECRET environment variable is required');\n        }\n        const payload = {\n            userId: user.id,\n            username: user.username\n        };\n        try {\n            return jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().sign(payload, secret, {\n                expiresIn: this.ACCESS_TOKEN_EXPIRY,\n                issuer: 'hotdog-diaries',\n                audience: 'admin'\n            });\n        } catch (error) {\n            throw new Error(`JWT generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n   * Generate refresh token (longer-lived)\n   */ static generateRefreshToken(user) {\n        const secret = process.env.JWT_REFRESH_SECRET || process.env.JWT_SECRET;\n        if (!secret) {\n            throw new Error('JWT_SECRET environment variable is required');\n        }\n        const payload = {\n            userId: user.id,\n            username: user.username\n        };\n        try {\n            return jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().sign(payload, secret, {\n                expiresIn: this.REFRESH_TOKEN_EXPIRY,\n                issuer: 'hotdog-diaries',\n                audience: 'admin-refresh'\n            });\n        } catch (error) {\n            throw new Error(`Refresh token generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n   * Verify and decode JWT token\n   */ static verifyJWT(token) {\n        const secret = process.env.JWT_SECRET;\n        if (!secret) {\n            throw new Error('JWT_SECRET environment variable is required');\n        }\n        try {\n            const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().verify(token, secret, {\n                issuer: 'hotdog-diaries',\n                audience: 'admin'\n            });\n            return decoded;\n        } catch (error) {\n            if (error instanceof (jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().TokenExpiredError)) {\n                throw new Error('Token has expired');\n            } else if (error instanceof (jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().JsonWebTokenError)) {\n                throw new Error('Invalid token');\n            } else {\n                throw new Error(`Token verification failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        }\n    }\n    /**\n   * Verify refresh token\n   */ static verifyRefreshToken(token) {\n        const secret = process.env.JWT_REFRESH_SECRET || process.env.JWT_SECRET;\n        if (!secret) {\n            throw new Error('JWT_SECRET environment variable is required');\n        }\n        try {\n            const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().verify(token, secret, {\n                issuer: 'hotdog-diaries',\n                audience: 'admin-refresh'\n            });\n            return decoded;\n        } catch (error) {\n            if (error instanceof (jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().TokenExpiredError)) {\n                throw new Error('Refresh token has expired');\n            } else if (error instanceof (jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().JsonWebTokenError)) {\n                throw new Error('Invalid refresh token');\n            } else {\n                throw new Error(`Refresh token verification failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        }\n    }\n    /**\n   * Generate both access and refresh tokens\n   */ static generateTokens(user) {\n        return {\n            accessToken: this.generateJWT(user),\n            refreshToken: this.generateRefreshToken(user)\n        };\n    }\n    /**\n   * Extract token from Authorization header\n   */ static extractTokenFromHeader(authHeader) {\n        if (!authHeader) return null;\n        const parts = authHeader.split(' ');\n        if (parts.length !== 2 || parts[0] !== 'Bearer') {\n            return null;\n        }\n        return parts[1];\n    }\n    /**\n   * Validate token format\n   */ static isValidTokenFormat(token) {\n        // Basic JWT format validation (3 parts separated by dots)\n        const parts = token.split('.');\n        return parts.length === 3 && parts.every((part)=>part.length > 0);\n    }\n    /**\n   * Get token expiry time\n   */ static getTokenExpiry(token) {\n        try {\n            const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().decode(token);\n            if (!decoded || !decoded.exp) return null;\n            return new Date(decoded.exp * 1000);\n        } catch  {\n            return null;\n        }\n    }\n    /**\n   * Check if token is expired\n   */ static isTokenExpired(token) {\n        const expiry = this.getTokenExpiry(token);\n        if (!expiry) return true;\n        return expiry.getTime() <= Date.now();\n    }\n    /**\n   * Generate secure random password\n   */ static generateSecurePassword(length = 16) {\n        const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';\n        let password = '';\n        for(let i = 0; i < length; i++){\n            password += charset.charAt(Math.floor(Math.random() * charset.length));\n        }\n        return password;\n    }\n    /**\n   * Validate password strength\n   */ static validatePasswordStrength(password) {\n        const errors = [];\n        if (password.length < 8) {\n            errors.push('Password must be at least 8 characters long');\n        }\n        if (!/[a-z]/.test(password)) {\n            errors.push('Password must contain at least one lowercase letter');\n        }\n        if (!/[A-Z]/.test(password)) {\n            errors.push('Password must contain at least one uppercase letter');\n        }\n        if (!/\\d/.test(password)) {\n            errors.push('Password must contain at least one number');\n        }\n        if (!/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)) {\n            errors.push('Password must contain at least one special character');\n        }\n        return {\n            isValid: errors.length === 0,\n            errors\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/auth.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fdashboard%2Factivity%2Froute&page=%2Fapi%2Fadmin%2Fdashboard%2Factivity%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fdashboard%2Factivity%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fdashboard%2Factivity%2Froute&page=%2Fapi%2Fadmin%2Fdashboard%2Factivity%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fdashboard%2Factivity%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_dashboard_activity_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/admin/dashboard/activity/route.ts */ \"(rsc)/./app/api/admin/dashboard/activity/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_dashboard_activity_route_ts__WEBPACK_IMPORTED_MODULE_16__]);\n_Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_dashboard_activity_route_ts__WEBPACK_IMPORTED_MODULE_16__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/admin/dashboard/activity/route\",\n        pathname: \"/api/admin/dashboard/activity\",\n        filename: \"route\",\n        bundlePath: \"app/api/admin/dashboard/activity/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"/Users/adamshaw/Development/websites/hotdog-diaries/app/api/admin/dashboard/activity/route.ts\",\n    nextConfigOutput,\n    userland: _Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_dashboard_activity_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/admin/dashboard/activity/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fdashboard%2Factivity%2Froute&page=%2Fapi%2Fadmin%2Fdashboard%2Factivity%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fdashboard%2Factivity%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./types/index.ts":
/*!************************!*\
  !*** ./types/index.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentType: () => (/* binding */ ContentType),\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   SourcePlatform: () => (/* binding */ SourcePlatform)\n/* harmony export */ });\n// Enums\nvar ContentType = /*#__PURE__*/ function(ContentType) {\n    ContentType[\"TEXT\"] = \"text\";\n    ContentType[\"IMAGE\"] = \"image\";\n    ContentType[\"VIDEO\"] = \"video\";\n    ContentType[\"MIXED\"] = \"mixed\";\n    return ContentType;\n}({});\nvar SourcePlatform = /*#__PURE__*/ function(SourcePlatform) {\n    SourcePlatform[\"REDDIT\"] = \"reddit\";\n    SourcePlatform[\"YOUTUBE\"] = \"youtube\";\n    SourcePlatform[\"FLICKR\"] = \"flickr\";\n    SourcePlatform[\"UNSPLASH\"] = \"unsplash\";\n    SourcePlatform[\"NEWS\"] = \"news\";\n    SourcePlatform[\"MASTODON\"] = \"mastodon\";\n    return SourcePlatform;\n}({});\nvar LogLevel = /*#__PURE__*/ function(LogLevel) {\n    LogLevel[\"DEBUG\"] = \"debug\";\n    LogLevel[\"INFO\"] = \"info\";\n    LogLevel[\"WARN\"] = \"warn\";\n    LogLevel[\"ERROR\"] = \"error\";\n    LogLevel[\"FATAL\"] = \"fatal\";\n    return LogLevel;\n}({});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi90eXBlcy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUEwRkEsUUFBUTtBQUNELHlDQUFLQTs7Ozs7V0FBQUE7TUFLWDtBQUVNLDRDQUFLQzs7Ozs7OztXQUFBQTtNQU9YO0FBRU0sc0NBQUtDOzs7Ozs7V0FBQUE7TUFNWCIsInNvdXJjZXMiOlsiL1VzZXJzL2FkYW1zaGF3L0RldmVsb3BtZW50L3dlYnNpdGVzL2hvdGRvZy1kaWFyaWVzL3R5cGVzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoQ2hlY2tSZXNwb25zZSB7XG4gIHN0YXR1czogJ2hlYWx0aHknIHwgJ3VuaGVhbHRoeSdcbiAgdGltZXN0YW1wOiBzdHJpbmdcbiAgc2VydmljZTogc3RyaW5nXG4gIHZlcnNpb24/OiBzdHJpbmdcbiAgdXB0aW1lPzogbnVtYmVyXG4gIGVudmlyb25tZW50Pzogc3RyaW5nXG4gIGNoZWNrcz86IHtcbiAgICBkYXRhYmFzZT86IHN0cmluZ1xuICAgIHNvY2lhbE1lZGlhU2Nhbm5lcj86IHN0cmluZ1xuICAgIGNvbnRlbnRTY2hlZHVsZXI/OiBzdHJpbmdcbiAgfVxuICBlcnJvcj86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhvdGRvZ1Bvc3Qge1xuICBpZDogc3RyaW5nXG4gIGNvbnRlbnQ6IHN0cmluZ1xuICBpbWFnZVVybD86IHN0cmluZ1xuICBzb3VyY2U6ICdyZWRkaXQnIHwgJ3lvdXR1YmUnIHwgJ2ZsaWNrcicgfCAndW5zcGxhc2gnIHwgJ25ld3MnIHwgJ21hc3RvZG9uJ1xuICBzb3VyY2VVcmw6IHN0cmluZ1xuICB0aW1lc3RhbXA6IHN0cmluZ1xuICBlbmdhZ2VtZW50OiB7XG4gICAgbGlrZXM6IG51bWJlclxuICAgIHNoYXJlczogbnVtYmVyXG4gICAgY29tbWVudHM6IG51bWJlclxuICB9XG4gIHByb2Nlc3NlZDogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdkl0ZW0ge1xuICBocmVmOiBzdHJpbmdcbiAgbGFiZWw6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwaVJlc3BvbnNlPFQgPSBhbnk+IHtcbiAgc3VjY2VzczogYm9vbGVhblxuICBkYXRhPzogVFxuICBlcnJvcj86IHN0cmluZ1xuICBtZXNzYWdlPzogc3RyaW5nXG59XG5cbi8vIERhdGFiYXNlIEVudGl0eSBUeXBlc1xuZXhwb3J0IGludGVyZmFjZSBDb250ZW50UXVldWUge1xuICBpZDogbnVtYmVyXG4gIGNvbnRlbnRfdGV4dD86IHN0cmluZ1xuICBjb250ZW50X2ltYWdlX3VybD86IHN0cmluZ1xuICBjb250ZW50X3ZpZGVvX3VybD86IHN0cmluZ1xuICBjb250ZW50X3R5cGU6IENvbnRlbnRUeXBlXG4gIHNvdXJjZV9wbGF0Zm9ybTogU291cmNlUGxhdGZvcm1cbiAgb3JpZ2luYWxfdXJsOiBzdHJpbmdcbiAgb3JpZ2luYWxfYXV0aG9yPzogc3RyaW5nXG4gIHNjcmFwZWRfYXQ6IERhdGVcbiAgY29udGVudF9oYXNoOiBzdHJpbmdcbiAgaXNfcG9zdGVkOiBib29sZWFuXG4gIHBvc3RlZF9hdD86IERhdGVcbiAgaXNfYXBwcm92ZWQ6IGJvb2xlYW5cbiAgYWRtaW5fbm90ZXM/OiBzdHJpbmdcbiAgY3JlYXRlZF9hdDogRGF0ZVxuICB1cGRhdGVkX2F0OiBEYXRlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zdGVkQ29udGVudCB7XG4gIGlkOiBudW1iZXJcbiAgY29udGVudF9xdWV1ZV9pZDogbnVtYmVyXG4gIHBvc3RlZF9hdDogRGF0ZVxuICBzY2hlZHVsZWRfdGltZT86IERhdGVcbiAgcG9zdF9vcmRlcjogbnVtYmVyXG4gIGNyZWF0ZWRfYXQ6IERhdGVcbiAgdXBkYXRlZF9hdDogRGF0ZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN5c3RlbUxvZyB7XG4gIGlkOiBudW1iZXJcbiAgbG9nX2xldmVsOiBMb2dMZXZlbFxuICBtZXNzYWdlOiBzdHJpbmdcbiAgY29tcG9uZW50OiBzdHJpbmdcbiAgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gIGNyZWF0ZWRfYXQ6IERhdGVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBZG1pblVzZXIge1xuICBpZDogbnVtYmVyXG4gIHVzZXJuYW1lOiBzdHJpbmdcbiAgcGFzc3dvcmRfaGFzaDogc3RyaW5nXG4gIGxhc3RfbG9naW4/OiBEYXRlXG4gIGNyZWF0ZWRfYXQ6IERhdGVcbiAgdXBkYXRlZF9hdDogRGF0ZVxufVxuXG4vLyBFbnVtc1xuZXhwb3J0IGVudW0gQ29udGVudFR5cGUge1xuICBURVhUID0gJ3RleHQnLFxuICBJTUFHRSA9ICdpbWFnZScsXG4gIFZJREVPID0gJ3ZpZGVvJyxcbiAgTUlYRUQgPSAnbWl4ZWQnXG59XG5cbmV4cG9ydCBlbnVtIFNvdXJjZVBsYXRmb3JtIHtcbiAgUkVERElUID0gJ3JlZGRpdCcsXG4gIFlPVVRVQkUgPSAneW91dHViZScsXG4gIEZMSUNLUiA9ICdmbGlja3InLFxuICBVTlNQTEFTSCA9ICd1bnNwbGFzaCcsXG4gIE5FV1MgPSAnbmV3cycsXG4gIE1BU1RPRE9OID0gJ21hc3RvZG9uJ1xufVxuXG5leHBvcnQgZW51bSBMb2dMZXZlbCB7XG4gIERFQlVHID0gJ2RlYnVnJyxcbiAgSU5GTyA9ICdpbmZvJyxcbiAgV0FSTiA9ICd3YXJuJyxcbiAgRVJST1IgPSAnZXJyb3InLFxuICBGQVRBTCA9ICdmYXRhbCdcbn1cblxuLy8gQVBJIFJlcXVlc3QvUmVzcG9uc2UgVHlwZXNcbmV4cG9ydCBpbnRlcmZhY2UgQ29udGVudEFwaVJlc3BvbnNlIHtcbiAgc3VjY2VzczogYm9vbGVhblxuICBkYXRhOiB7XG4gICAgY29udGVudDogUG9zdGVkQ29udGVudFtdXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgcGFnZTogbnVtYmVyXG4gICAgICBsaW1pdDogbnVtYmVyXG4gICAgICB0b3RhbDogbnVtYmVyXG4gICAgICB0b3RhbFBhZ2VzOiBudW1iZXJcbiAgICB9XG4gIH1cbiAgbWVzc2FnZT86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFiYXNlSGVhbHRoQ2hlY2sge1xuICBjb25uZWN0ZWQ6IGJvb2xlYW5cbiAgbGF0ZW5jeT86IG51bWJlclxuICBlcnJvcj86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVuaGFuY2VkSGVhbHRoUmVzcG9uc2UgZXh0ZW5kcyBIZWFsdGhDaGVja1Jlc3BvbnNlIHtcbiAgY2hlY2tzOiB7XG4gICAgZGF0YWJhc2U6IERhdGFiYXNlSGVhbHRoQ2hlY2tcbiAgICBzb2NpYWxNZWRpYVNjYW5uZXI/OiBzdHJpbmdcbiAgICBjb250ZW50U2NoZWR1bGVyPzogc3RyaW5nXG4gIH1cbn0iXSwibmFtZXMiOlsiQ29udGVudFR5cGUiLCJTb3VyY2VQbGF0Zm9ybSIsIkxvZ0xldmVsIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./types/index.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = import("pg");;

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@neondatabase","vendor-chunks/ws","vendor-chunks/semver","vendor-chunks/bcryptjs","vendor-chunks/jsonwebtoken","vendor-chunks/lodash.includes","vendor-chunks/@vercel","vendor-chunks/jws","vendor-chunks/lodash.once","vendor-chunks/jwa","vendor-chunks/node-gyp-build","vendor-chunks/lodash.isinteger","vendor-chunks/ecdsa-sig-formatter","vendor-chunks/lodash.isplainobject","vendor-chunks/ms","vendor-chunks/lodash.isstring","vendor-chunks/lodash.isnumber","vendor-chunks/lodash.isboolean","vendor-chunks/safe-buffer","vendor-chunks/buffer-equal-constant-time","vendor-chunks/bufferutil"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fdashboard%2Factivity%2Froute&page=%2Fapi%2Fadmin%2Fdashboard%2Factivity%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fdashboard%2Factivity%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();