/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/admin/youtube/status/route";
exports.ids = ["app/api/admin/youtube/status/route"];
exports.modules = {

/***/ "(rsc)/./app/api/admin/youtube/status/route.ts":
/*!***********************************************!*\
  !*** ./app/api/admin/youtube/status/route.ts ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_services_youtube__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/services/youtube */ \"(rsc)/./lib/services/youtube.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_services_youtube__WEBPACK_IMPORTED_MODULE_1__]);\n_lib_services_youtube__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nconst youtubeService = new _lib_services_youtube__WEBPACK_IMPORTED_MODULE_1__.YouTubeService();\nasync function GET(request) {\n    try {\n        const apiStatus = await youtubeService.getApiStatus();\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: {\n                isAuthenticated: apiStatus.isAuthenticated,\n                quotaUsed: apiStatus.quotaUsed,\n                quotaRemaining: apiStatus.quotaRemaining,\n                dailyQuotaLimit: apiStatus.dailyQuotaLimit,\n                quotaResetTime: apiStatus.quotaResetTime,\n                lastError: apiStatus.lastError,\n                lastRequest: apiStatus.lastRequest,\n                videosScanned: 0,\n                channelsFollowed: 0,\n                avgViews: 0 // Will be populated from database in full implementation\n            }\n        });\n    } catch (error) {\n        console.error('YouTube status error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: 'Failed to get YouTube API status',\n            details: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2FkbWluL3lvdXR1YmUvc3RhdHVzL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF1RDtBQUNBO0FBRXZELE1BQU1FLGlCQUFpQixJQUFJRCxpRUFBY0E7QUFFbEMsZUFBZUUsSUFBSUMsT0FBb0I7SUFDNUMsSUFBSTtRQUNGLE1BQU1DLFlBQVksTUFBTUgsZUFBZUksWUFBWTtRQUVuRCxPQUFPTixxREFBWUEsQ0FBQ08sSUFBSSxDQUFDO1lBQ3ZCQyxTQUFTO1lBQ1RDLE1BQU07Z0JBQ0pDLGlCQUFpQkwsVUFBVUssZUFBZTtnQkFDMUNDLFdBQVdOLFVBQVVNLFNBQVM7Z0JBQzlCQyxnQkFBZ0JQLFVBQVVPLGNBQWM7Z0JBQ3hDQyxpQkFBaUJSLFVBQVVRLGVBQWU7Z0JBQzFDQyxnQkFBZ0JULFVBQVVTLGNBQWM7Z0JBQ3hDQyxXQUFXVixVQUFVVSxTQUFTO2dCQUM5QkMsYUFBYVgsVUFBVVcsV0FBVztnQkFDbENDLGVBQWU7Z0JBQ2ZDLGtCQUFrQjtnQkFDbEJDLFVBQVUsRUFBRSx5REFBeUQ7WUFDdkU7UUFDRjtJQUVGLEVBQUUsT0FBT0MsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMseUJBQXlCQTtRQUN2QyxPQUFPcEIscURBQVlBLENBQUNPLElBQUksQ0FDdEI7WUFDRUMsU0FBUztZQUNUWSxPQUFPO1lBQ1BFLFNBQVNGLE1BQU1HLE9BQU87UUFDeEIsR0FDQTtZQUFFQyxRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL2FkYW1zaGF3L0RldmVsb3BtZW50L3dlYnNpdGVzL2hvdGRvZy1kaWFyaWVzL2FwcC9hcGkvYWRtaW4veW91dHViZS9zdGF0dXMvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJ1xuaW1wb3J0IHsgWW91VHViZVNlcnZpY2UgfSBmcm9tICdAL2xpYi9zZXJ2aWNlcy95b3V0dWJlJ1xuXG5jb25zdCB5b3V0dWJlU2VydmljZSA9IG5ldyBZb3VUdWJlU2VydmljZSgpXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBhcGlTdGF0dXMgPSBhd2FpdCB5b3V0dWJlU2VydmljZS5nZXRBcGlTdGF0dXMoKVxuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YToge1xuICAgICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGFwaVN0YXR1cy5pc0F1dGhlbnRpY2F0ZWQsXG4gICAgICAgIHF1b3RhVXNlZDogYXBpU3RhdHVzLnF1b3RhVXNlZCxcbiAgICAgICAgcXVvdGFSZW1haW5pbmc6IGFwaVN0YXR1cy5xdW90YVJlbWFpbmluZyxcbiAgICAgICAgZGFpbHlRdW90YUxpbWl0OiBhcGlTdGF0dXMuZGFpbHlRdW90YUxpbWl0LFxuICAgICAgICBxdW90YVJlc2V0VGltZTogYXBpU3RhdHVzLnF1b3RhUmVzZXRUaW1lLFxuICAgICAgICBsYXN0RXJyb3I6IGFwaVN0YXR1cy5sYXN0RXJyb3IsXG4gICAgICAgIGxhc3RSZXF1ZXN0OiBhcGlTdGF0dXMubGFzdFJlcXVlc3QsXG4gICAgICAgIHZpZGVvc1NjYW5uZWQ6IDAsIC8vIFdpbGwgYmUgcG9wdWxhdGVkIGZyb20gZGF0YWJhc2UgaW4gZnVsbCBpbXBsZW1lbnRhdGlvblxuICAgICAgICBjaGFubmVsc0ZvbGxvd2VkOiAwLCAvLyBXaWxsIGJlIHBvcHVsYXRlZCBmcm9tIGRhdGFiYXNlIGluIGZ1bGwgaW1wbGVtZW50YXRpb25cbiAgICAgICAgYXZnVmlld3M6IDAgLy8gV2lsbCBiZSBwb3B1bGF0ZWQgZnJvbSBkYXRhYmFzZSBpbiBmdWxsIGltcGxlbWVudGF0aW9uXG4gICAgICB9XG4gICAgfSlcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1lvdVR1YmUgc3RhdHVzIGVycm9yOicsIGVycm9yKVxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiAnRmFpbGVkIHRvIGdldCBZb3VUdWJlIEFQSSBzdGF0dXMnLFxuICAgICAgICBkZXRhaWxzOiBlcnJvci5tZXNzYWdlXG4gICAgICB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKVxuICB9XG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsIllvdVR1YmVTZXJ2aWNlIiwieW91dHViZVNlcnZpY2UiLCJHRVQiLCJyZXF1ZXN0IiwiYXBpU3RhdHVzIiwiZ2V0QXBpU3RhdHVzIiwianNvbiIsInN1Y2Nlc3MiLCJkYXRhIiwiaXNBdXRoZW50aWNhdGVkIiwicXVvdGFVc2VkIiwicXVvdGFSZW1haW5pbmciLCJkYWlseVF1b3RhTGltaXQiLCJxdW90YVJlc2V0VGltZSIsImxhc3RFcnJvciIsImxhc3RSZXF1ZXN0IiwidmlkZW9zU2Nhbm5lZCIsImNoYW5uZWxzRm9sbG93ZWQiLCJhdmdWaWV3cyIsImVycm9yIiwiY29uc29sZSIsImRldGFpbHMiLCJtZXNzYWdlIiwic3RhdHVzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/admin/youtube/status/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db-query-builder.ts":
/*!*********************************!*\
  !*** ./lib/db-query-builder.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeleteBuilder: () => (/* binding */ DeleteBuilder),\n/* harmony export */   InsertBuilder: () => (/* binding */ InsertBuilder),\n/* harmony export */   QueryBuilder: () => (/* binding */ QueryBuilder),\n/* harmony export */   UpdateBuilder: () => (/* binding */ UpdateBuilder),\n/* harmony export */   deleteFrom: () => (/* binding */ deleteFrom),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   update: () => (/* binding */ update)\n/* harmony export */ });\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./db */ \"(rsc)/./lib/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_db__WEBPACK_IMPORTED_MODULE_0__]);\n_db__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nclass QueryBuilder {\n    static table(tableName) {\n        const builder = new QueryBuilder();\n        builder.fromTable = tableName;\n        return builder;\n    }\n    select(fields) {\n        if (typeof fields === 'string') {\n            this.selectFields = [\n                fields\n            ];\n        } else {\n            this.selectFields = fields;\n        }\n        return this;\n    }\n    where(field, operator, value) {\n        this.whereConditions.push({\n            field,\n            operator,\n            value\n        });\n        return this;\n    }\n    whereIn(field, values) {\n        this.whereConditions.push({\n            field,\n            operator: 'IN',\n            values\n        });\n        return this;\n    }\n    whereNotIn(field, values) {\n        this.whereConditions.push({\n            field,\n            operator: 'NOT IN',\n            values\n        });\n        return this;\n    }\n    whereNull(field) {\n        this.whereConditions.push({\n            field,\n            operator: 'IS NULL'\n        });\n        return this;\n    }\n    whereNotNull(field) {\n        this.whereConditions.push({\n            field,\n            operator: 'IS NOT NULL'\n        });\n        return this;\n    }\n    orderBy(field, direction = 'ASC') {\n        this.orderByFields.push({\n            field,\n            direction\n        });\n        return this;\n    }\n    join(table, on, type = 'INNER') {\n        this.joinClauses.push({\n            type,\n            table,\n            on\n        });\n        return this;\n    }\n    leftJoin(table, on) {\n        return this.join(table, on, 'LEFT');\n    }\n    limit(count) {\n        this.limitCount = count;\n        return this;\n    }\n    offset(count) {\n        this.offsetCount = count;\n        return this;\n    }\n    build() {\n        this.parameters = [];\n        let paramIndex = 1;\n        // Build SELECT clause\n        const selectClause = `SELECT ${this.selectFields.join(', ')}`;\n        // Build FROM clause\n        let fromClause = `FROM ${this.fromTable}`;\n        // Build JOIN clauses\n        if (this.joinClauses.length > 0) {\n            fromClause += ' ' + this.joinClauses.map((join)=>`${join.type} JOIN ${join.table} ON ${join.on}`).join(' ');\n        }\n        // Build WHERE clause\n        let whereClause = '';\n        if (this.whereConditions.length > 0) {\n            const conditions = this.whereConditions.map((condition)=>{\n                switch(condition.operator){\n                    case 'IS NULL':\n                    case 'IS NOT NULL':\n                        return `${condition.field} ${condition.operator}`;\n                    case 'IN':\n                    case 'NOT IN':\n                        if (!condition.values || condition.values.length === 0) {\n                            throw new Error(`${condition.operator} requires non-empty values array`);\n                        }\n                        const placeholders = condition.values.map(()=>`$${paramIndex++}`).join(', ');\n                        this.parameters.push(...condition.values);\n                        return `${condition.field} ${condition.operator} (${placeholders})`;\n                    default:\n                        this.parameters.push(condition.value);\n                        return `${condition.field} ${condition.operator} $${paramIndex++}`;\n                }\n            });\n            whereClause = `WHERE ${conditions.join(' AND ')}`;\n        }\n        // Build ORDER BY clause\n        let orderByClause = '';\n        if (this.orderByFields.length > 0) {\n            const orderFields = this.orderByFields.map((order)=>`${order.field} ${order.direction}`).join(', ');\n            orderByClause = `ORDER BY ${orderFields}`;\n        }\n        // Build LIMIT clause\n        let limitClause = '';\n        if (this.limitCount !== undefined) {\n            limitClause = `LIMIT $${paramIndex++}`;\n            this.parameters.push(this.limitCount);\n        }\n        // Build OFFSET clause\n        let offsetClause = '';\n        if (this.offsetCount !== undefined) {\n            offsetClause = `OFFSET $${paramIndex++}`;\n            this.parameters.push(this.offsetCount);\n        }\n        // Combine all clauses\n        const query = [\n            selectClause,\n            fromClause,\n            whereClause,\n            orderByClause,\n            limitClause,\n            offsetClause\n        ].filter(Boolean).join(' ');\n        return {\n            query,\n            params: this.parameters\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.limit(1).execute();\n        return result.rows[0] || null;\n    }\n    async count() {\n        const originalSelect = this.selectFields;\n        this.selectFields = [\n            'COUNT(*) as count'\n        ];\n        const result = await this.execute();\n        this.selectFields = originalSelect;\n        return parseInt(result.rows[0]?.count || '0');\n    }\n    /**\n   * Perform an upsert operation (insert or update if exists)\n   */ async upsert(data, conflictTarget) {\n        // Use the InsertBuilder with conflict handling\n        const insertBuilder = InsertBuilder.into(this.fromTable).values(data);\n        if (conflictTarget) {\n            // For now, do an update on conflict\n            insertBuilder.onConflictDoUpdate(conflictTarget, data);\n        } else {\n            // Try to determine primary key or use 'id' as default\n            insertBuilder.onConflictDoUpdate('id', data);\n        }\n        return await insertBuilder.execute();\n    }\n    constructor(){\n        this.selectFields = [\n            '*'\n        ];\n        this.fromTable = '';\n        this.whereConditions = [];\n        this.orderByFields = [];\n        this.joinClauses = [];\n        this.parameters = [];\n    }\n}\nclass InsertBuilder {\n    static into(tableName) {\n        const builder = new InsertBuilder();\n        builder.tableName = tableName;\n        return builder;\n    }\n    values(data) {\n        if (Array.isArray(data)) {\n            this.insertData = data;\n        } else {\n            this.insertData = [\n                data\n            ];\n        }\n        return this;\n    }\n    returning(fields) {\n        if (typeof fields === 'string') {\n            this.returnFields = [\n                fields\n            ];\n        } else {\n            this.returnFields = fields;\n        }\n        return this;\n    }\n    onConflict(target, action, updateData) {\n        this.conflictTarget = target;\n        this.conflictAction = action;\n        this.updateData = updateData;\n        return this;\n    }\n    onConflictDoNothing(target) {\n        return this.onConflict(target, 'DO NOTHING');\n    }\n    onConflictDoUpdate(target, updateData) {\n        return this.onConflict(target, 'DO UPDATE', updateData);\n    }\n    build() {\n        if (this.insertData.length === 0) {\n            throw new Error('No data provided for INSERT operation');\n        }\n        // Get field names from the first record\n        const fields = Object.keys(this.insertData[0]);\n        const allValues = [];\n        // Build placeholders and collect all values\n        const valueRows = [];\n        let paramIndex = 1;\n        for (const record of this.insertData){\n            const rowPlaceholders = [];\n            for (const field of fields){\n                rowPlaceholders.push(`$${paramIndex}`);\n                allValues.push(record[field]);\n                paramIndex++;\n            }\n            valueRows.push(`(${rowPlaceholders.join(', ')})`);\n        }\n        let query = `INSERT INTO ${this.tableName} (${fields.join(', ')}) VALUES ${valueRows.join(', ')}`;\n        // Add conflict handling\n        if (this.conflictTarget && this.conflictAction) {\n            query += ` ON CONFLICT (${this.conflictTarget}) ${this.conflictAction}`;\n            if (this.conflictAction === 'DO UPDATE' && this.updateData) {\n                const updateFields = Object.keys(this.updateData);\n                const updateClause = updateFields.map((field)=>`${field} = EXCLUDED.${field}`).join(', ');\n                query += ` SET ${updateClause}`;\n            }\n        }\n        // Add RETURNING clause\n        if (this.returnFields.length > 0) {\n            query += ` RETURNING ${this.returnFields.join(', ')}`;\n        }\n        return {\n            query,\n            params: allValues\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.execute();\n        return result.rows[0] || null;\n    }\n    constructor(){\n        this.tableName = '';\n        this.insertData = [];\n        this.returnFields = [\n            '*'\n        ];\n    }\n}\nclass UpdateBuilder {\n    static table(tableName) {\n        const builder = new UpdateBuilder();\n        builder.tableName = tableName;\n        return builder;\n    }\n    set(data) {\n        this.updateData = {\n            ...this.updateData,\n            ...data\n        };\n        return this;\n    }\n    where(field, operator, value) {\n        this.whereConditions.push({\n            field,\n            operator,\n            value\n        });\n        return this;\n    }\n    returning(fields) {\n        if (typeof fields === 'string') {\n            this.returnFields = [\n                fields\n            ];\n        } else {\n            this.returnFields = fields;\n        }\n        return this;\n    }\n    build() {\n        this.parameters = [];\n        let paramIndex = 1;\n        // Build SET clause\n        const updateFields = Object.keys(this.updateData);\n        const setClause = updateFields.map((field)=>{\n            this.parameters.push(this.updateData[field]);\n            return `${field} = $${paramIndex++}`;\n        }).join(', ');\n        let query = `UPDATE ${this.tableName} SET ${setClause}`;\n        // Build WHERE clause\n        if (this.whereConditions.length > 0) {\n            const conditions = this.whereConditions.map((condition)=>{\n                if (condition.operator === 'IS NULL' || condition.operator === 'IS NOT NULL') {\n                    return `${condition.field} ${condition.operator}`;\n                }\n                this.parameters.push(condition.value);\n                return `${condition.field} ${condition.operator} $${paramIndex++}`;\n            });\n            query += ` WHERE ${conditions.join(' AND ')}`;\n        }\n        // Add RETURNING clause\n        if (this.returnFields.length > 0) {\n            query += ` RETURNING ${this.returnFields.join(', ')}`;\n        }\n        return {\n            query,\n            params: this.parameters\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.execute();\n        return result.rows[0] || null;\n    }\n    constructor(){\n        this.tableName = '';\n        this.updateData = {};\n        this.whereConditions = [];\n        this.returnFields = [\n            '*'\n        ];\n        this.parameters = [];\n    }\n}\nclass DeleteBuilder {\n    static from(tableName) {\n        const builder = new DeleteBuilder();\n        builder.tableName = tableName;\n        return builder;\n    }\n    where(field, operator, value) {\n        this.whereConditions.push({\n            field,\n            operator,\n            value\n        });\n        return this;\n    }\n    returning(fields) {\n        if (typeof fields === 'string') {\n            this.returnFields = [\n                fields\n            ];\n        } else {\n            this.returnFields = fields;\n        }\n        return this;\n    }\n    build() {\n        this.parameters = [];\n        let paramIndex = 1;\n        let query = `DELETE FROM ${this.tableName}`;\n        // Build WHERE clause\n        if (this.whereConditions.length > 0) {\n            const conditions = this.whereConditions.map((condition)=>{\n                if (condition.operator === 'IS NULL' || condition.operator === 'IS NOT NULL') {\n                    return `${condition.field} ${condition.operator}`;\n                }\n                this.parameters.push(condition.value);\n                return `${condition.field} ${condition.operator} $${paramIndex++}`;\n            });\n            query += ` WHERE ${conditions.join(' AND ')}`;\n        }\n        // Add RETURNING clause\n        if (this.returnFields.length > 0) {\n            query += ` RETURNING ${this.returnFields.join(', ')}`;\n        }\n        return {\n            query,\n            params: this.parameters\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.execute();\n        return result.rows[0] || null;\n    }\n    constructor(){\n        this.tableName = '';\n        this.whereConditions = [];\n        this.returnFields = [\n            '*'\n        ];\n        this.parameters = [];\n    }\n}\n// Export convenience functions\nconst query = QueryBuilder.table;\nconst insert = InsertBuilder.into;\nconst update = UpdateBuilder.table;\nconst deleteFrom = DeleteBuilder.from;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db-query-builder.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeDatabase: () => (/* binding */ closeDatabase),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   initializeDatabase: () => (/* binding */ initializeDatabase),\n/* harmony export */   logToDatabase: () => (/* binding */ logToDatabase),\n/* harmony export */   sql: () => (/* reexport safe */ _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__.sql)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/postgres */ \"(rsc)/./node_modules/@vercel/postgres/dist/index-node.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nclass DatabaseConnection {\n    constructor(){\n        this.pool = null;\n        this.isVercel = false;\n        this.isVercel = !!process.env.POSTGRES_URL;\n    }\n    getConfig() {\n        if (this.isVercel) {\n            return {\n                host: process.env.POSTGRES_HOST,\n                port: 5432,\n                database: process.env.POSTGRES_DATABASE,\n                user: process.env.POSTGRES_USER,\n                password: process.env.POSTGRES_PASSWORD,\n                ssl: true,\n                max: 20,\n                idleTimeoutMillis: 30000,\n                connectionTimeoutMillis: 2000\n            };\n        }\n        return {\n            host: process.env.DATABASE_HOST || 'localhost',\n            port: parseInt(process.env.DATABASE_PORT || '5432'),\n            database: process.env.DATABASE_NAME || 'hotdog_diaries_dev',\n            user: process.env.DATABASE_USER || 'postgres',\n            password: process.env.DATABASE_PASSWORD || 'password',\n            ssl: false,\n            max: 10,\n            idleTimeoutMillis: 30000,\n            connectionTimeoutMillis: 2000\n        };\n    }\n    async connect() {\n        if (this.pool) {\n            return;\n        }\n        const config = this.getConfig();\n        this.pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool(config);\n        this.pool.on('error', (err)=>{\n            console.error('Unexpected database error on idle client', err);\n        });\n        this.pool.on('connect', ()=>{\n            console.log('Database connection established');\n        });\n        this.pool.on('remove', ()=>{\n            console.log('Database connection removed');\n        });\n        try {\n            const client = await this.pool.connect();\n            await client.query('SELECT NOW()');\n            client.release();\n            console.log('Database connection successful');\n        } catch (error) {\n            console.error('Database connection failed:', error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        if (this.pool) {\n            await this.pool.end();\n            this.pool = null;\n            console.log('Database connection closed');\n        }\n    }\n    async query(text, params) {\n        if (this.isVercel) {\n            return await _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__.sql.query(text, params || []);\n        }\n        if (!this.pool) {\n            await this.connect();\n        }\n        const start = Date.now();\n        try {\n            const result = await this.pool.query(text, params);\n            const duration = Date.now() - start;\n            console.log('Query executed', {\n                text,\n                duration,\n                rows: result.rowCount\n            });\n            return result;\n        } catch (error) {\n            const duration = Date.now() - start;\n            console.error('Query error', {\n                text,\n                duration,\n                error\n            });\n            throw error;\n        }\n    }\n    async getClient() {\n        if (this.isVercel) {\n            throw new Error('Client connections not supported in Vercel environment');\n        }\n        if (!this.pool) {\n            throw new Error('Database not connected');\n        }\n        return await this.pool.connect();\n    }\n    async healthCheck() {\n        try {\n            const start = Date.now();\n            await this.query('SELECT 1 as health_check');\n            const latency = Date.now() - start;\n            return {\n                connected: true,\n                latency\n            };\n        } catch (error) {\n            return {\n                connected: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    async transaction(callback) {\n        if (this.isVercel) {\n            throw new Error('Transactions not supported in Vercel environment with @vercel/postgres');\n        }\n        const client = await this.getClient();\n        try {\n            await client.query('BEGIN');\n            const result = await callback(client);\n            await client.query('COMMIT');\n            return result;\n        } catch (error) {\n            await client.query('ROLLBACK');\n            throw error;\n        } finally{\n            client.release();\n        }\n    }\n}\nconst db = new DatabaseConnection();\nasync function initializeDatabase() {\n    try {\n        await db.connect();\n        console.log('Database initialized successfully');\n    } catch (error) {\n        console.error('Failed to initialize database:', error);\n        throw error;\n    }\n}\nasync function closeDatabase() {\n    try {\n        await db.disconnect();\n        console.log('Database closed successfully');\n    } catch (error) {\n        console.error('Failed to close database:', error);\n        throw error;\n    }\n}\nasync function logToDatabase(level, message, component, metadata) {\n    try {\n        // Convert LogLevel enum to database-compatible string\n        let dbLevel;\n        switch(level){\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.DEBUG:\n                dbLevel = 'debug';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.INFO:\n                dbLevel = 'info';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.WARN:\n                dbLevel = 'warning';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR:\n                dbLevel = 'error';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.FATAL:\n                dbLevel = 'error'; // Map FATAL to error since it's not in constraint\n                break;\n            default:\n                dbLevel = 'info';\n        }\n        await db.query(`INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n       VALUES ($1, $2, $3, $4, NOW())`, [\n            dbLevel,\n            message,\n            component,\n            metadata ? JSON.stringify(metadata) : null\n        ]);\n    } catch (error) {\n        console.error('Failed to log to database:', error);\n    }\n}\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/youtube-monitoring.ts":
/*!********************************************!*\
  !*** ./lib/services/youtube-monitoring.ts ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   YouTubeMonitoringService: () => (/* binding */ YouTubeMonitoringService),\n/* harmony export */   youtubeMonitoringService: () => (/* binding */ youtubeMonitoringService)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/db-query-builder */ \"(rsc)/./lib/db-query-builder.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_0__, _lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__]);\n([_lib_db__WEBPACK_IMPORTED_MODULE_0__, _lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nclass YouTubeMonitoringService {\n    /**\n   * Record an API request and its outcome\n   */ async recordApiRequest(success, responseTime, errorType) {\n        try {\n            this.metrics.requestCount++;\n            this.metrics.lastRequestTime = new Date();\n            if (success) {\n                this.metrics.successCount++;\n            } else {\n                this.metrics.errorCount++;\n                this.metrics.lastErrorTime = new Date();\n                this.metrics.lastErrorType = errorType;\n            }\n            // Update average response time\n            this.metrics.averageResponseTime = (this.metrics.averageResponseTime * (this.metrics.requestCount - 1) + responseTime) / this.metrics.requestCount;\n            // Store in database for historical tracking\n            await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.insert)('system_metrics').values({\n                metric_name: 'youtube_api_request',\n                metric_value: responseTime,\n                metric_unit: 'ms',\n                component: 'YouTubeService',\n                metadata: JSON.stringify({\n                    success,\n                    errorType,\n                    requestCount: this.metrics.requestCount,\n                    successRate: this.getSuccessRate()\n                }),\n                created_at: new Date()\n            });\n            // Log significant events\n            if (!success) {\n                await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.WARNING, 'YOUTUBE_API_ERROR', `YouTube API request failed: ${errorType || 'unknown error'}`, {\n                    responseTime,\n                    errorType,\n                    successRate: this.getSuccessRate(),\n                    requestCount: this.metrics.requestCount\n                });\n            }\n            // Alert on high error rates\n            if (this.metrics.requestCount >= 10 && this.getSuccessRate() < 0.8) {\n                await this.triggerAlert('high_error_rate', `YouTube API success rate dropped to ${(this.getSuccessRate() * 100).toFixed(1)}%`);\n            }\n            // Alert on high latency\n            if (responseTime > 10000) {\n                await this.triggerAlert('high_latency', `YouTube API latency is high: ${responseTime}ms`);\n            }\n        } catch (error) {\n            console.error('Failed to record YouTube API request:', error);\n        }\n    }\n    /**\n   * Record quota limit hit\n   */ async recordQuotaLimitHit(resetTime) {\n        try {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.WARNING, 'YOUTUBE_QUOTA_LIMIT_HIT', `YouTube API quota limit reached. Reset at ${resetTime.toISOString()}`, {\n                quotaUsed: this.metrics.quotaUsed,\n                resetTime: resetTime.toISOString(),\n                requestCount: this.metrics.requestCount\n            });\n            await this.triggerAlert('quota_limit', `YouTube API quota exhausted. Resets at ${resetTime.toLocaleString()}`);\n        } catch (error) {\n            console.error('Failed to record YouTube quota limit hit:', error);\n        }\n    }\n    /**\n   * Record successful scan completion\n   */ async recordScanCompletion(videosProcessed, success, errors = []) {\n        try {\n            await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.insert)('system_metrics').values({\n                metric_name: 'youtube_scan_completion',\n                metric_value: videosProcessed,\n                metric_unit: 'videos',\n                component: 'YouTubeScanningService',\n                metadata: JSON.stringify({\n                    success,\n                    videosProcessed,\n                    errorCount: errors.length,\n                    errors: errors.slice(0, 5) // Limit stored errors\n                }),\n                created_at: new Date()\n            });\n            if (success) {\n                await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.INFO, 'YOUTUBE_SCAN_SUCCESS', `YouTube scan completed successfully: ${videosProcessed} videos processed`, {\n                    videosProcessed,\n                    errorCount: errors.length\n                });\n            } else {\n                await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR, 'YOUTUBE_SCAN_FAILURE', `YouTube scan failed with ${errors.length} errors`, {\n                    videosProcessed,\n                    errors: errors.slice(0, 3)\n                });\n            }\n        } catch (error) {\n            console.error('Failed to record YouTube scan completion:', error);\n        }\n    }\n    /**\n   * Update quota usage metrics\n   */ updateQuotaUsage(used, remaining) {\n        this.metrics.quotaUsed = used;\n        this.metrics.quotaRemaining = remaining;\n    }\n    /**\n   * Get current API metrics\n   */ getMetrics() {\n        return {\n            ...this.metrics\n        };\n    }\n    /**\n   * Get health status\n   */ async getHealthMetrics() {\n        try {\n            // Get recent error logs\n            const recentErrors = await this.getRecentErrors();\n            const errorRate = this.getErrorRate();\n            const quotaUsagePercent = this.metrics.quotaUsed / (this.metrics.quotaUsed + this.metrics.quotaRemaining) * 100;\n            return {\n                isHealthy: errorRate < 0.2 && this.metrics.averageResponseTime < 5000 && quotaUsagePercent < 90,\n                uptime: this.calculateUptime(),\n                errorRate,\n                averageLatency: this.metrics.averageResponseTime,\n                quotaUsagePercent,\n                recentErrors,\n                lastSuccessfulRequest: this.metrics.lastRequestTime\n            };\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR, 'YOUTUBE_HEALTH_CHECK_ERROR', `Failed to get YouTube health metrics: ${error.message}`, {\n                error: error.message\n            });\n            return {\n                isHealthy: false,\n                uptime: 0,\n                errorRate: 1,\n                averageLatency: 0,\n                quotaUsagePercent: 0,\n                recentErrors: [\n                    error.message\n                ]\n            };\n        }\n    }\n    /**\n   * Get success rate percentage\n   */ getSuccessRate() {\n        if (this.metrics.requestCount === 0) return 1;\n        return this.metrics.successCount / this.metrics.requestCount;\n    }\n    /**\n   * Get error rate percentage  \n   */ getErrorRate() {\n        if (this.metrics.requestCount === 0) return 0;\n        return this.metrics.errorCount / this.metrics.requestCount;\n    }\n    /**\n   * Calculate service uptime based on recent successful requests\n   */ calculateUptime() {\n        if (!this.metrics.lastRequestTime) return 0;\n        const now = new Date();\n        const timeSinceLastRequest = now.getTime() - this.metrics.lastRequestTime.getTime();\n        // Consider service \"up\" if last request was within 1 hour and successful\n        if (timeSinceLastRequest < 60 * 60 * 1000 && this.getSuccessRate() > 0.5) {\n            return 99.9 // High uptime\n            ;\n        }\n        return Math.max(0, 100 - this.getErrorRate() * 100);\n    }\n    /**\n   * Get recent error messages\n   */ async getRecentErrors() {\n        try {\n            const recentLogs = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('system_logs').select([\n                'message'\n            ]).where('component', 'YouTubeService').where('log_level', 'error').where('created_at', '>', new Date(Date.now() - 60 * 60 * 1000)) // Last hour\n            .orderBy('created_at', 'desc').limit(5);\n            return recentLogs.map((log)=>log.message);\n        } catch (error) {\n            return [\n                `Failed to fetch recent errors: ${error.message}`\n            ];\n        }\n    }\n    /**\n   * Trigger monitoring alerts\n   */ async triggerAlert(alertType, message) {\n        try {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR, 'YOUTUBE_ALERT_TRIGGERED', message, {\n                alertType,\n                metrics: this.getMetrics(),\n                timestamp: new Date().toISOString()\n            });\n            // Could integrate with external alerting services here\n            console.warn(`🚨 YouTube Alert [${alertType}]: ${message}`);\n        } catch (error) {\n            console.error('Failed to trigger YouTube alert:', error);\n        }\n    }\n    /**\n   * Reset metrics (useful for testing or daily resets)\n   */ resetMetrics() {\n        this.metrics = {\n            requestCount: 0,\n            successCount: 0,\n            errorCount: 0,\n            averageResponseTime: 0,\n            quotaUsed: 0,\n            quotaRemaining: 10000\n        };\n    }\n    constructor(){\n        this.metrics = {\n            requestCount: 0,\n            successCount: 0,\n            errorCount: 0,\n            averageResponseTime: 0,\n            quotaUsed: 0,\n            quotaRemaining: 10000\n        };\n    }\n}\nconst youtubeMonitoringService = new YouTubeMonitoringService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/youtube-monitoring.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/youtube.ts":
/*!*********************************!*\
  !*** ./lib/services/youtube.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   YouTubeService: () => (/* binding */ YouTubeService),\n/* harmony export */   youtubeService: () => (/* binding */ youtubeService)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\n/* harmony import */ var _youtube_monitoring__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./youtube-monitoring */ \"(rsc)/./lib/services/youtube-monitoring.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_0__, _youtube_monitoring__WEBPACK_IMPORTED_MODULE_2__]);\n([_lib_db__WEBPACK_IMPORTED_MODULE_0__, _youtube_monitoring__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nclass YouTubeService {\n    static{\n        this.API_BASE_URL = 'https://www.googleapis.com/youtube/v3';\n    }\n    static{\n        this.DAILY_QUOTA_LIMIT = 10000; // YouTube Data API v3 free quota\n    }\n    constructor(){\n        this.apiKey = null;\n        this.quotaTracker = {\n            used: 0,\n            remaining: 10000,\n            resetTime: new Date(Date.now() + 24 * 60 * 60 * 1000) // Reset daily\n        };\n        this.apiKey = process.env.YOUTUBE_API_KEY || null;\n        if (!this.apiKey) {\n            console.warn('YouTube API key not found in environment variables');\n        }\n    }\n    /**\n   * Search YouTube for hotdog-related videos\n   */ async searchVideos(options) {\n        const startTime = Date.now();\n        try {\n            if (!this.apiKey) {\n                throw new Error('YouTube API key not configured');\n            }\n            await this.checkQuotaLimit();\n            const searchParams = new URLSearchParams({\n                part: 'snippet',\n                q: options.query,\n                type: 'video',\n                maxResults: Math.min(options.maxResults || 25, 50).toString(),\n                order: options.order || 'relevance',\n                key: this.apiKey,\n                videoDefinition: options.videoDefinition || 'any',\n                videoDuration: options.videoDuration || 'any',\n                safeSearch: 'moderate'\n            });\n            if (options.publishedAfter) {\n                searchParams.append('publishedAfter', options.publishedAfter.toISOString());\n            }\n            const searchResponse = await fetch(`${YouTubeService.API_BASE_URL}/search?${searchParams}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            });\n            if (!searchResponse.ok) {\n                const errorData = await searchResponse.json().catch(()=>({}));\n                throw new Error(`YouTube API error: ${searchResponse.status} - ${errorData.error?.message || searchResponse.statusText}`);\n            }\n            const searchData = await searchResponse.json();\n            this.updateQuotaUsage(100); // Search costs 100 quota units\n            // Get video details for additional metadata\n            const videoIds = searchData.items?.map((item)=>item.id.videoId).filter(Boolean) || [];\n            const videoDetails = videoIds.length > 0 ? await this.getVideoDetails(videoIds) : [];\n            // Process and combine data\n            const processedVideos = [];\n            for (const item of searchData.items || []){\n                if (item.id?.videoId) {\n                    const videoDetail = videoDetails.find((v)=>v.id === item.id.videoId);\n                    const processedVideo = await this.processYouTubeVideo(item, videoDetail);\n                    // Validate content for hotdog relevance\n                    if (await this.validateYouTubeContent(processedVideo)) {\n                        processedVideos.push(processedVideo);\n                    }\n                }\n            }\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.INFO, 'YOUTUBE_SEARCH_SUCCESS', `Found ${processedVideos.length} YouTube videos for query: ${options.query}`, {\n                query: options.query,\n                videosFound: processedVideos.length,\n                quotaUsed: this.quotaTracker.used\n            });\n            // Record successful request for monitoring\n            const requestTime = Date.now() - startTime;\n            await _youtube_monitoring__WEBPACK_IMPORTED_MODULE_2__.youtubeMonitoringService.recordApiRequest(true, requestTime);\n            return processedVideos;\n        } catch (error) {\n            // Record failed request for monitoring\n            const requestTime = Date.now() - startTime;\n            const errorType = error.message.includes('quota') ? 'quota_limit' : error.message.includes('key') ? 'auth_error' : 'api_error';\n            await _youtube_monitoring__WEBPACK_IMPORTED_MODULE_2__.youtubeMonitoringService.recordApiRequest(false, requestTime, errorType);\n            if (error.message.includes('quota')) {\n                await _youtube_monitoring__WEBPACK_IMPORTED_MODULE_2__.youtubeMonitoringService.recordQuotaLimitHit(this.quotaTracker.resetTime);\n            }\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'YOUTUBE_SEARCH_ERROR', `YouTube search failed: ${error.message}`, {\n                query: options.query,\n                error: error.message\n            });\n            throw new Error(`YouTube search failed: ${error.message}`);\n        }\n    }\n    /**\n   * Get detailed video information\n   */ async getVideoDetails(videoIds) {\n        if (!this.apiKey || videoIds.length === 0) {\n            return [];\n        }\n        try {\n            const detailsParams = new URLSearchParams({\n                part: 'snippet,statistics,contentDetails,status',\n                id: videoIds.join(','),\n                key: this.apiKey\n            });\n            const response = await fetch(`${YouTubeService.API_BASE_URL}/videos?${detailsParams}`, {\n                method: 'GET'\n            });\n            if (!response.ok) {\n                console.warn('Failed to get video details:', response.statusText);\n                return [];\n            }\n            const data = await response.json();\n            this.updateQuotaUsage(1); // Videos endpoint costs 1 quota unit\n            return data.items || [];\n        } catch (error) {\n            console.warn('Error fetching video details:', error.message);\n            return [];\n        }\n    }\n    /**\n   * Process YouTube video data into structured format\n   */ async processYouTubeVideo(searchItem, videoDetail) {\n        const snippet = searchItem.snippet;\n        const statistics = videoDetail?.statistics || {};\n        const contentDetails = videoDetail?.contentDetails || {};\n        return {\n            id: searchItem.id.videoId,\n            title: snippet.title || '',\n            description: snippet.description || '',\n            thumbnailUrl: snippet.thumbnails?.high?.url || snippet.thumbnails?.default?.url || '',\n            videoUrl: `https://www.youtube.com/watch?v=${searchItem.id.videoId}`,\n            embedUrl: `https://www.youtube.com/embed/${searchItem.id.videoId}`,\n            channelTitle: snippet.channelTitle || '',\n            channelId: snippet.channelId || '',\n            publishedAt: new Date(snippet.publishedAt),\n            duration: contentDetails.duration || 'PT0S',\n            viewCount: parseInt(statistics.viewCount || '0'),\n            likeCount: parseInt(statistics.likeCount || '0'),\n            commentCount: parseInt(statistics.commentCount || '0'),\n            tags: videoDetail?.snippet?.tags || [],\n            categoryId: videoDetail?.snippet?.categoryId || '0',\n            defaultLanguage: videoDetail?.snippet?.defaultLanguage,\n            isLiveBroadcast: snippet.liveBroadcastContent === 'live'\n        };\n    }\n    /**\n   * Validate YouTube content for hotdog relevance\n   */ async validateYouTubeContent(video) {\n        try {\n            // Check for hotdog-related terms in title and description\n            const hotdogTerms = [\n                'hotdog',\n                'hot dog',\n                'hotdogs',\n                'hot dogs',\n                'frankfurter',\n                'wiener',\n                'bratwurst',\n                'sausage',\n                'ballpark frank',\n                'chili dog',\n                'corn dog',\n                'grilling hotdog',\n                'hotdog recipe',\n                'hotdog review'\n            ];\n            const searchText = `${video.title} ${video.description}`.toLowerCase();\n            const hasHotdogTerm = hotdogTerms.some((term)=>searchText.includes(term));\n            if (!hasHotdogTerm) {\n                return false;\n            }\n            // Check for spam indicators\n            const spamIndicators = [\n                'clickbait',\n                'fake',\n                'scam',\n                'virus',\n                'hack',\n                'free money',\n                'get rich quick',\n                'miracle cure'\n            ];\n            const hasSpamIndicators = spamIndicators.some((indicator)=>searchText.includes(indicator));\n            if (hasSpamIndicators) {\n                return false;\n            }\n            // Prefer videos with good engagement and reasonable duration\n            const hasGoodEngagement = video.viewCount > 1000 || video.likeCount > 10;\n            const hasReasonableDuration = !video.duration.includes('PT0S') // Not zero duration\n            ;\n            const isNotLive = !video.isLiveBroadcast // Skip live streams\n            ;\n            return hasGoodEngagement && hasReasonableDuration && isNotLive;\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'YOUTUBE_VALIDATION_ERROR', `YouTube content validation failed: ${error.message}`, {\n                videoId: video.id,\n                error: error.message\n            });\n            return false;\n        }\n    }\n    /**\n   * Get hotdog-focused search terms for YouTube\n   */ getHotdogSearchTerms() {\n        return [\n            'hotdog recipe',\n            'best hotdogs',\n            'hotdog challenge',\n            'ballpark food',\n            'grilling hotdogs',\n            'hotdog review',\n            'homemade hotdogs',\n            'hotdog competition',\n            'street food hotdogs',\n            'gourmet hotdogs'\n        ];\n    }\n    /**\n   * Get YouTube API status and quota usage\n   */ async getApiStatus() {\n        try {\n            if (!this.apiKey) {\n                return {\n                    isAuthenticated: false,\n                    quotaUsed: 0,\n                    quotaRemaining: 0,\n                    quotaResetTime: new Date(),\n                    lastError: 'API key not configured'\n                };\n            }\n            // Test connection with a simple search\n            const testParams = new URLSearchParams({\n                part: 'snippet',\n                q: 'hotdog',\n                type: 'video',\n                maxResults: '1',\n                key: this.apiKey\n            });\n            const response = await fetch(`${YouTubeService.API_BASE_URL}/search?${testParams}`, {\n                method: 'GET'\n            });\n            const isAuthenticated = response.ok;\n            if (response.ok) {\n                this.updateQuotaUsage(100); // Test search costs quota\n            }\n            return {\n                isAuthenticated,\n                quotaUsed: this.quotaTracker.used,\n                quotaRemaining: this.quotaTracker.remaining,\n                quotaResetTime: this.quotaTracker.resetTime,\n                lastRequest: new Date(),\n                lastError: isAuthenticated ? undefined : `HTTP ${response.status}`\n            };\n        } catch (error) {\n            return {\n                isAuthenticated: false,\n                quotaUsed: this.quotaTracker.used,\n                quotaRemaining: this.quotaTracker.remaining,\n                quotaResetTime: this.quotaTracker.resetTime,\n                lastError: error.message,\n                lastRequest: new Date()\n            };\n        }\n    }\n    /**\n   * Check quota limit before making API calls\n   */ async checkQuotaLimit() {\n        const now = new Date();\n        // Reset quota counter if day has passed\n        if (now >= this.quotaTracker.resetTime) {\n            this.quotaTracker.used = 0;\n            this.quotaTracker.remaining = YouTubeService.DAILY_QUOTA_LIMIT;\n            this.quotaTracker.resetTime = new Date(now.getTime() + 24 * 60 * 60 * 1000);\n        }\n        if (this.quotaTracker.remaining <= 100) {\n            const waitTime = this.quotaTracker.resetTime.getTime() - now.getTime();\n            throw new Error(`YouTube API quota exceeded. Reset in ${Math.ceil(waitTime / 1000 / 60 / 60)} hours`);\n        }\n    }\n    /**\n   * Update quota usage tracking\n   */ updateQuotaUsage(units) {\n        this.quotaTracker.used += units;\n        this.quotaTracker.remaining = Math.max(0, YouTubeService.DAILY_QUOTA_LIMIT - this.quotaTracker.used);\n    }\n    /**\n   * Parse YouTube duration format (PT1M30S) to seconds\n   */ static parseDuration(duration) {\n        const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n        if (!match) return 0;\n        const hours = parseInt(match[1] || '0');\n        const minutes = parseInt(match[2] || '0');\n        const seconds = parseInt(match[3] || '0');\n        return hours * 3600 + minutes * 60 + seconds;\n    }\n    /**\n   * Format duration seconds to human readable format\n   */ static formatDuration(seconds) {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor(seconds % 3600 / 60);\n        const secs = seconds % 60;\n        if (hours > 0) {\n            return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n        } else {\n            return `${minutes}:${secs.toString().padStart(2, '0')}`;\n        }\n    }\n}\nconst youtubeService = new YouTubeService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/youtube.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fyoutube%2Fstatus%2Froute&page=%2Fapi%2Fadmin%2Fyoutube%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fyoutube%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fyoutube%2Fstatus%2Froute&page=%2Fapi%2Fadmin%2Fyoutube%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fyoutube%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_youtube_status_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/admin/youtube/status/route.ts */ \"(rsc)/./app/api/admin/youtube/status/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_youtube_status_route_ts__WEBPACK_IMPORTED_MODULE_16__]);\n_Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_youtube_status_route_ts__WEBPACK_IMPORTED_MODULE_16__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/admin/youtube/status/route\",\n        pathname: \"/api/admin/youtube/status\",\n        filename: \"route\",\n        bundlePath: \"app/api/admin/youtube/status/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"/Users/adamshaw/Development/websites/hotdog-diaries/app/api/admin/youtube/status/route.ts\",\n    nextConfigOutput,\n    userland: _Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_youtube_status_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/admin/youtube/status/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fyoutube%2Fstatus%2Froute&page=%2Fapi%2Fadmin%2Fyoutube%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fyoutube%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./types/index.ts":
/*!************************!*\
  !*** ./types/index.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentType: () => (/* binding */ ContentType),\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   SourcePlatform: () => (/* binding */ SourcePlatform)\n/* harmony export */ });\n// Enums\nvar ContentType = /*#__PURE__*/ function(ContentType) {\n    ContentType[\"TEXT\"] = \"text\";\n    ContentType[\"IMAGE\"] = \"image\";\n    ContentType[\"VIDEO\"] = \"video\";\n    ContentType[\"MIXED\"] = \"mixed\";\n    return ContentType;\n}({});\nvar SourcePlatform = /*#__PURE__*/ function(SourcePlatform) {\n    SourcePlatform[\"REDDIT\"] = \"reddit\";\n    SourcePlatform[\"YOUTUBE\"] = \"youtube\";\n    SourcePlatform[\"FLICKR\"] = \"flickr\";\n    SourcePlatform[\"UNSPLASH\"] = \"unsplash\";\n    SourcePlatform[\"NEWS\"] = \"news\";\n    SourcePlatform[\"MASTODON\"] = \"mastodon\";\n    return SourcePlatform;\n}({});\nvar LogLevel = /*#__PURE__*/ function(LogLevel) {\n    LogLevel[\"DEBUG\"] = \"debug\";\n    LogLevel[\"INFO\"] = \"info\";\n    LogLevel[\"WARN\"] = \"warn\";\n    LogLevel[\"ERROR\"] = \"error\";\n    LogLevel[\"FATAL\"] = \"fatal\";\n    return LogLevel;\n}({});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi90eXBlcy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUEwRkEsUUFBUTtBQUNELHlDQUFLQTs7Ozs7V0FBQUE7TUFLWDtBQUVNLDRDQUFLQzs7Ozs7OztXQUFBQTtNQU9YO0FBRU0sc0NBQUtDOzs7Ozs7V0FBQUE7TUFNWCIsInNvdXJjZXMiOlsiL1VzZXJzL2FkYW1zaGF3L0RldmVsb3BtZW50L3dlYnNpdGVzL2hvdGRvZy1kaWFyaWVzL3R5cGVzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoQ2hlY2tSZXNwb25zZSB7XG4gIHN0YXR1czogJ2hlYWx0aHknIHwgJ3VuaGVhbHRoeSdcbiAgdGltZXN0YW1wOiBzdHJpbmdcbiAgc2VydmljZTogc3RyaW5nXG4gIHZlcnNpb24/OiBzdHJpbmdcbiAgdXB0aW1lPzogbnVtYmVyXG4gIGVudmlyb25tZW50Pzogc3RyaW5nXG4gIGNoZWNrcz86IHtcbiAgICBkYXRhYmFzZT86IHN0cmluZ1xuICAgIHNvY2lhbE1lZGlhU2Nhbm5lcj86IHN0cmluZ1xuICAgIGNvbnRlbnRTY2hlZHVsZXI/OiBzdHJpbmdcbiAgfVxuICBlcnJvcj86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhvdGRvZ1Bvc3Qge1xuICBpZDogc3RyaW5nXG4gIGNvbnRlbnQ6IHN0cmluZ1xuICBpbWFnZVVybD86IHN0cmluZ1xuICBzb3VyY2U6ICdyZWRkaXQnIHwgJ3lvdXR1YmUnIHwgJ2ZsaWNrcicgfCAndW5zcGxhc2gnIHwgJ25ld3MnIHwgJ21hc3RvZG9uJ1xuICBzb3VyY2VVcmw6IHN0cmluZ1xuICB0aW1lc3RhbXA6IHN0cmluZ1xuICBlbmdhZ2VtZW50OiB7XG4gICAgbGlrZXM6IG51bWJlclxuICAgIHNoYXJlczogbnVtYmVyXG4gICAgY29tbWVudHM6IG51bWJlclxuICB9XG4gIHByb2Nlc3NlZDogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdkl0ZW0ge1xuICBocmVmOiBzdHJpbmdcbiAgbGFiZWw6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwaVJlc3BvbnNlPFQgPSBhbnk+IHtcbiAgc3VjY2VzczogYm9vbGVhblxuICBkYXRhPzogVFxuICBlcnJvcj86IHN0cmluZ1xuICBtZXNzYWdlPzogc3RyaW5nXG59XG5cbi8vIERhdGFiYXNlIEVudGl0eSBUeXBlc1xuZXhwb3J0IGludGVyZmFjZSBDb250ZW50UXVldWUge1xuICBpZDogbnVtYmVyXG4gIGNvbnRlbnRfdGV4dD86IHN0cmluZ1xuICBjb250ZW50X2ltYWdlX3VybD86IHN0cmluZ1xuICBjb250ZW50X3ZpZGVvX3VybD86IHN0cmluZ1xuICBjb250ZW50X3R5cGU6IENvbnRlbnRUeXBlXG4gIHNvdXJjZV9wbGF0Zm9ybTogU291cmNlUGxhdGZvcm1cbiAgb3JpZ2luYWxfdXJsOiBzdHJpbmdcbiAgb3JpZ2luYWxfYXV0aG9yPzogc3RyaW5nXG4gIHNjcmFwZWRfYXQ6IERhdGVcbiAgY29udGVudF9oYXNoOiBzdHJpbmdcbiAgaXNfcG9zdGVkOiBib29sZWFuXG4gIHBvc3RlZF9hdD86IERhdGVcbiAgaXNfYXBwcm92ZWQ6IGJvb2xlYW5cbiAgYWRtaW5fbm90ZXM/OiBzdHJpbmdcbiAgY3JlYXRlZF9hdDogRGF0ZVxuICB1cGRhdGVkX2F0OiBEYXRlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zdGVkQ29udGVudCB7XG4gIGlkOiBudW1iZXJcbiAgY29udGVudF9xdWV1ZV9pZDogbnVtYmVyXG4gIHBvc3RlZF9hdDogRGF0ZVxuICBzY2hlZHVsZWRfdGltZT86IERhdGVcbiAgcG9zdF9vcmRlcjogbnVtYmVyXG4gIGNyZWF0ZWRfYXQ6IERhdGVcbiAgdXBkYXRlZF9hdDogRGF0ZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN5c3RlbUxvZyB7XG4gIGlkOiBudW1iZXJcbiAgbG9nX2xldmVsOiBMb2dMZXZlbFxuICBtZXNzYWdlOiBzdHJpbmdcbiAgY29tcG9uZW50OiBzdHJpbmdcbiAgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gIGNyZWF0ZWRfYXQ6IERhdGVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBZG1pblVzZXIge1xuICBpZDogbnVtYmVyXG4gIHVzZXJuYW1lOiBzdHJpbmdcbiAgcGFzc3dvcmRfaGFzaDogc3RyaW5nXG4gIGxhc3RfbG9naW4/OiBEYXRlXG4gIGNyZWF0ZWRfYXQ6IERhdGVcbiAgdXBkYXRlZF9hdDogRGF0ZVxufVxuXG4vLyBFbnVtc1xuZXhwb3J0IGVudW0gQ29udGVudFR5cGUge1xuICBURVhUID0gJ3RleHQnLFxuICBJTUFHRSA9ICdpbWFnZScsXG4gIFZJREVPID0gJ3ZpZGVvJyxcbiAgTUlYRUQgPSAnbWl4ZWQnXG59XG5cbmV4cG9ydCBlbnVtIFNvdXJjZVBsYXRmb3JtIHtcbiAgUkVERElUID0gJ3JlZGRpdCcsXG4gIFlPVVRVQkUgPSAneW91dHViZScsXG4gIEZMSUNLUiA9ICdmbGlja3InLFxuICBVTlNQTEFTSCA9ICd1bnNwbGFzaCcsXG4gIE5FV1MgPSAnbmV3cycsXG4gIE1BU1RPRE9OID0gJ21hc3RvZG9uJ1xufVxuXG5leHBvcnQgZW51bSBMb2dMZXZlbCB7XG4gIERFQlVHID0gJ2RlYnVnJyxcbiAgSU5GTyA9ICdpbmZvJyxcbiAgV0FSTiA9ICd3YXJuJyxcbiAgRVJST1IgPSAnZXJyb3InLFxuICBGQVRBTCA9ICdmYXRhbCdcbn1cblxuLy8gQVBJIFJlcXVlc3QvUmVzcG9uc2UgVHlwZXNcbmV4cG9ydCBpbnRlcmZhY2UgQ29udGVudEFwaVJlc3BvbnNlIHtcbiAgc3VjY2VzczogYm9vbGVhblxuICBkYXRhOiB7XG4gICAgY29udGVudDogUG9zdGVkQ29udGVudFtdXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgcGFnZTogbnVtYmVyXG4gICAgICBsaW1pdDogbnVtYmVyXG4gICAgICB0b3RhbDogbnVtYmVyXG4gICAgICB0b3RhbFBhZ2VzOiBudW1iZXJcbiAgICB9XG4gIH1cbiAgbWVzc2FnZT86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFiYXNlSGVhbHRoQ2hlY2sge1xuICBjb25uZWN0ZWQ6IGJvb2xlYW5cbiAgbGF0ZW5jeT86IG51bWJlclxuICBlcnJvcj86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVuaGFuY2VkSGVhbHRoUmVzcG9uc2UgZXh0ZW5kcyBIZWFsdGhDaGVja1Jlc3BvbnNlIHtcbiAgY2hlY2tzOiB7XG4gICAgZGF0YWJhc2U6IERhdGFiYXNlSGVhbHRoQ2hlY2tcbiAgICBzb2NpYWxNZWRpYVNjYW5uZXI/OiBzdHJpbmdcbiAgICBjb250ZW50U2NoZWR1bGVyPzogc3RyaW5nXG4gIH1cbn0iXSwibmFtZXMiOlsiQ29udGVudFR5cGUiLCJTb3VyY2VQbGF0Zm9ybSIsIkxvZ0xldmVsIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./types/index.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = import("pg");;

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@neondatabase","vendor-chunks/ws","vendor-chunks/@vercel","vendor-chunks/node-gyp-build","vendor-chunks/bufferutil"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fyoutube%2Fstatus%2Froute&page=%2Fapi%2Fadmin%2Fyoutube%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fyoutube%2Fstatus%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();