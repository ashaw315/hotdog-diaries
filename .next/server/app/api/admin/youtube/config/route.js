/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/admin/youtube/config/route";
exports.ids = ["app/api/admin/youtube/config/route"];
exports.modules = {

/***/ "(rsc)/./app/api/admin/youtube/config/route.ts":
/*!***********************************************!*\
  !*** ./app/api/admin/youtube/config/route.ts ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   PUT: () => (/* binding */ PUT)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_services_youtube_scanning__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/services/youtube-scanning */ \"(rsc)/./lib/services/youtube-scanning.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_services_youtube_scanning__WEBPACK_IMPORTED_MODULE_1__]);\n_lib_services_youtube_scanning__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nasync function GET(request) {\n    try {\n        const config = await _lib_services_youtube_scanning__WEBPACK_IMPORTED_MODULE_1__.youtubeScanningService.getScanConfig();\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: {\n                isEnabled: config.isEnabled,\n                scanInterval: config.scanInterval,\n                maxVideosPerScan: config.maxVideosPerScan,\n                searchTerms: config.searchTerms,\n                publishedAfter: config.publishedAfter,\n                videoDuration: config.videoDuration,\n                videoDefinition: config.videoDefinition,\n                safeSearch: config.safeSearch,\n                channelIds: config.channelIds,\n                lastScanTime: config.lastScanTime?.toISOString()\n            }\n        });\n    } catch (error) {\n        console.error('YouTube config get error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: 'Failed to get YouTube configuration',\n            details: error.message\n        }, {\n            status: 500\n        });\n    }\n}\nasync function PUT(request) {\n    try {\n        const updates = await request.json();\n        // Validate the updates\n        const validatedUpdates = {};\n        if (typeof updates.isEnabled === 'boolean') {\n            validatedUpdates.isEnabled = updates.isEnabled;\n        }\n        if (typeof updates.scanInterval === 'number' && updates.scanInterval >= 60) {\n            validatedUpdates.scanInterval = updates.scanInterval;\n        }\n        if (typeof updates.maxVideosPerScan === 'number' && updates.maxVideosPerScan >= 1 && updates.maxVideosPerScan <= 50) {\n            validatedUpdates.maxVideosPerScan = updates.maxVideosPerScan;\n        }\n        if (Array.isArray(updates.searchTerms)) {\n            validatedUpdates.searchTerms = updates.searchTerms.filter((term)=>typeof term === 'string' && term.length > 0);\n        }\n        if (updates.publishedAfter && !isNaN(Date.parse(updates.publishedAfter))) {\n            validatedUpdates.publishedAfter = new Date(updates.publishedAfter);\n        }\n        if ([\n            'any',\n            'short',\n            'medium',\n            'long'\n        ].includes(updates.videoDuration)) {\n            validatedUpdates.videoDuration = updates.videoDuration;\n        }\n        if ([\n            'any',\n            'high',\n            'standard'\n        ].includes(updates.videoDefinition)) {\n            validatedUpdates.videoDefinition = updates.videoDefinition;\n        }\n        if ([\n            'none',\n            'moderate',\n            'strict'\n        ].includes(updates.safeSearch)) {\n            validatedUpdates.safeSearch = updates.safeSearch;\n        }\n        if (Array.isArray(updates.channelIds)) {\n            validatedUpdates.channelIds = updates.channelIds.filter((id)=>typeof id === 'string' && id.length > 0);\n        }\n        await _lib_services_youtube_scanning__WEBPACK_IMPORTED_MODULE_1__.youtubeScanningService.updateScanConfig(validatedUpdates);\n        const updatedConfig = await _lib_services_youtube_scanning__WEBPACK_IMPORTED_MODULE_1__.youtubeScanningService.getScanConfig();\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: {\n                isEnabled: updatedConfig.isEnabled,\n                scanInterval: updatedConfig.scanInterval,\n                maxVideosPerScan: updatedConfig.maxVideosPerScan,\n                searchTerms: updatedConfig.searchTerms,\n                publishedAfter: updatedConfig.publishedAfter,\n                videoDuration: updatedConfig.videoDuration,\n                videoDefinition: updatedConfig.videoDefinition,\n                safeSearch: updatedConfig.safeSearch,\n                channelIds: updatedConfig.channelIds,\n                lastScanTime: updatedConfig.lastScanTime?.toISOString()\n            }\n        });\n    } catch (error) {\n        console.error('YouTube config update error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: 'Failed to update YouTube configuration',\n            details: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/admin/youtube/config/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db-query-builder.ts":
/*!*********************************!*\
  !*** ./lib/db-query-builder.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeleteBuilder: () => (/* binding */ DeleteBuilder),\n/* harmony export */   InsertBuilder: () => (/* binding */ InsertBuilder),\n/* harmony export */   QueryBuilder: () => (/* binding */ QueryBuilder),\n/* harmony export */   UpdateBuilder: () => (/* binding */ UpdateBuilder),\n/* harmony export */   deleteFrom: () => (/* binding */ deleteFrom),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   update: () => (/* binding */ update)\n/* harmony export */ });\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./db */ \"(rsc)/./lib/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_db__WEBPACK_IMPORTED_MODULE_0__]);\n_db__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nclass QueryBuilder {\n    static table(tableName) {\n        const builder = new QueryBuilder();\n        builder.fromTable = tableName;\n        return builder;\n    }\n    select(fields) {\n        if (typeof fields === 'string') {\n            this.selectFields = [\n                fields\n            ];\n        } else {\n            this.selectFields = fields;\n        }\n        return this;\n    }\n    where(field, operator, value) {\n        this.whereConditions.push({\n            field,\n            operator,\n            value\n        });\n        return this;\n    }\n    whereIn(field, values) {\n        this.whereConditions.push({\n            field,\n            operator: 'IN',\n            values\n        });\n        return this;\n    }\n    whereNotIn(field, values) {\n        this.whereConditions.push({\n            field,\n            operator: 'NOT IN',\n            values\n        });\n        return this;\n    }\n    whereNull(field) {\n        this.whereConditions.push({\n            field,\n            operator: 'IS NULL'\n        });\n        return this;\n    }\n    whereNotNull(field) {\n        this.whereConditions.push({\n            field,\n            operator: 'IS NOT NULL'\n        });\n        return this;\n    }\n    orderBy(field, direction = 'ASC') {\n        this.orderByFields.push({\n            field,\n            direction\n        });\n        return this;\n    }\n    join(table, on, type = 'INNER') {\n        this.joinClauses.push({\n            type,\n            table,\n            on\n        });\n        return this;\n    }\n    leftJoin(table, on) {\n        return this.join(table, on, 'LEFT');\n    }\n    limit(count) {\n        this.limitCount = count;\n        return this;\n    }\n    offset(count) {\n        this.offsetCount = count;\n        return this;\n    }\n    build() {\n        this.parameters = [];\n        let paramIndex = 1;\n        // Build SELECT clause\n        const selectClause = `SELECT ${this.selectFields.join(', ')}`;\n        // Build FROM clause\n        let fromClause = `FROM ${this.fromTable}`;\n        // Build JOIN clauses\n        if (this.joinClauses.length > 0) {\n            fromClause += ' ' + this.joinClauses.map((join)=>`${join.type} JOIN ${join.table} ON ${join.on}`).join(' ');\n        }\n        // Build WHERE clause\n        let whereClause = '';\n        if (this.whereConditions.length > 0) {\n            const conditions = this.whereConditions.map((condition)=>{\n                switch(condition.operator){\n                    case 'IS NULL':\n                    case 'IS NOT NULL':\n                        return `${condition.field} ${condition.operator}`;\n                    case 'IN':\n                    case 'NOT IN':\n                        if (!condition.values || condition.values.length === 0) {\n                            throw new Error(`${condition.operator} requires non-empty values array`);\n                        }\n                        const placeholders = condition.values.map(()=>`$${paramIndex++}`).join(', ');\n                        this.parameters.push(...condition.values);\n                        return `${condition.field} ${condition.operator} (${placeholders})`;\n                    default:\n                        this.parameters.push(condition.value);\n                        return `${condition.field} ${condition.operator} $${paramIndex++}`;\n                }\n            });\n            whereClause = `WHERE ${conditions.join(' AND ')}`;\n        }\n        // Build ORDER BY clause\n        let orderByClause = '';\n        if (this.orderByFields.length > 0) {\n            const orderFields = this.orderByFields.map((order)=>`${order.field} ${order.direction}`).join(', ');\n            orderByClause = `ORDER BY ${orderFields}`;\n        }\n        // Build LIMIT clause\n        let limitClause = '';\n        if (this.limitCount !== undefined) {\n            limitClause = `LIMIT $${paramIndex++}`;\n            this.parameters.push(this.limitCount);\n        }\n        // Build OFFSET clause\n        let offsetClause = '';\n        if (this.offsetCount !== undefined) {\n            offsetClause = `OFFSET $${paramIndex++}`;\n            this.parameters.push(this.offsetCount);\n        }\n        // Combine all clauses\n        const query = [\n            selectClause,\n            fromClause,\n            whereClause,\n            orderByClause,\n            limitClause,\n            offsetClause\n        ].filter(Boolean).join(' ');\n        return {\n            query,\n            params: this.parameters\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.limit(1).execute();\n        return result.rows[0] || null;\n    }\n    async count() {\n        const originalSelect = this.selectFields;\n        this.selectFields = [\n            'COUNT(*) as count'\n        ];\n        const result = await this.execute();\n        this.selectFields = originalSelect;\n        return parseInt(result.rows[0]?.count || '0');\n    }\n    /**\n   * Perform an upsert operation (insert or update if exists)\n   */ async upsert(data, conflictTarget) {\n        // Use the InsertBuilder with conflict handling\n        const insertBuilder = InsertBuilder.into(this.fromTable).values(data);\n        if (conflictTarget) {\n            // For now, do an update on conflict\n            insertBuilder.onConflictDoUpdate(conflictTarget, data);\n        } else {\n            // Try to determine primary key or use 'id' as default\n            insertBuilder.onConflictDoUpdate('id', data);\n        }\n        return await insertBuilder.execute();\n    }\n    constructor(){\n        this.selectFields = [\n            '*'\n        ];\n        this.fromTable = '';\n        this.whereConditions = [];\n        this.orderByFields = [];\n        this.joinClauses = [];\n        this.parameters = [];\n    }\n}\nclass InsertBuilder {\n    static into(tableName) {\n        const builder = new InsertBuilder();\n        builder.tableName = tableName;\n        return builder;\n    }\n    values(data) {\n        if (Array.isArray(data)) {\n            this.insertData = data;\n        } else {\n            this.insertData = [\n                data\n            ];\n        }\n        return this;\n    }\n    returning(fields) {\n        if (typeof fields === 'string') {\n            this.returnFields = [\n                fields\n            ];\n        } else {\n            this.returnFields = fields;\n        }\n        return this;\n    }\n    onConflict(target, action, updateData) {\n        this.conflictTarget = target;\n        this.conflictAction = action;\n        this.updateData = updateData;\n        return this;\n    }\n    onConflictDoNothing(target) {\n        return this.onConflict(target, 'DO NOTHING');\n    }\n    onConflictDoUpdate(target, updateData) {\n        return this.onConflict(target, 'DO UPDATE', updateData);\n    }\n    build() {\n        if (this.insertData.length === 0) {\n            throw new Error('No data provided for INSERT operation');\n        }\n        // Get field names from the first record\n        const fields = Object.keys(this.insertData[0]);\n        const allValues = [];\n        // Build placeholders and collect all values\n        const valueRows = [];\n        let paramIndex = 1;\n        for (const record of this.insertData){\n            const rowPlaceholders = [];\n            for (const field of fields){\n                rowPlaceholders.push(`$${paramIndex}`);\n                allValues.push(record[field]);\n                paramIndex++;\n            }\n            valueRows.push(`(${rowPlaceholders.join(', ')})`);\n        }\n        let query = `INSERT INTO ${this.tableName} (${fields.join(', ')}) VALUES ${valueRows.join(', ')}`;\n        // Add conflict handling\n        if (this.conflictTarget && this.conflictAction) {\n            query += ` ON CONFLICT (${this.conflictTarget}) ${this.conflictAction}`;\n            if (this.conflictAction === 'DO UPDATE' && this.updateData) {\n                const updateFields = Object.keys(this.updateData);\n                const updateClause = updateFields.map((field)=>`${field} = EXCLUDED.${field}`).join(', ');\n                query += ` SET ${updateClause}`;\n            }\n        }\n        // Add RETURNING clause\n        if (this.returnFields.length > 0) {\n            query += ` RETURNING ${this.returnFields.join(', ')}`;\n        }\n        return {\n            query,\n            params: allValues\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.execute();\n        return result.rows[0] || null;\n    }\n    constructor(){\n        this.tableName = '';\n        this.insertData = [];\n        this.returnFields = [\n            '*'\n        ];\n    }\n}\nclass UpdateBuilder {\n    static table(tableName) {\n        const builder = new UpdateBuilder();\n        builder.tableName = tableName;\n        return builder;\n    }\n    set(data) {\n        this.updateData = {\n            ...this.updateData,\n            ...data\n        };\n        return this;\n    }\n    where(field, operator, value) {\n        this.whereConditions.push({\n            field,\n            operator,\n            value\n        });\n        return this;\n    }\n    returning(fields) {\n        if (typeof fields === 'string') {\n            this.returnFields = [\n                fields\n            ];\n        } else {\n            this.returnFields = fields;\n        }\n        return this;\n    }\n    build() {\n        this.parameters = [];\n        let paramIndex = 1;\n        // Build SET clause\n        const updateFields = Object.keys(this.updateData);\n        const setClause = updateFields.map((field)=>{\n            this.parameters.push(this.updateData[field]);\n            return `${field} = $${paramIndex++}`;\n        }).join(', ');\n        let query = `UPDATE ${this.tableName} SET ${setClause}`;\n        // Build WHERE clause\n        if (this.whereConditions.length > 0) {\n            const conditions = this.whereConditions.map((condition)=>{\n                if (condition.operator === 'IS NULL' || condition.operator === 'IS NOT NULL') {\n                    return `${condition.field} ${condition.operator}`;\n                }\n                this.parameters.push(condition.value);\n                return `${condition.field} ${condition.operator} $${paramIndex++}`;\n            });\n            query += ` WHERE ${conditions.join(' AND ')}`;\n        }\n        // Add RETURNING clause\n        if (this.returnFields.length > 0) {\n            query += ` RETURNING ${this.returnFields.join(', ')}`;\n        }\n        return {\n            query,\n            params: this.parameters\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.execute();\n        return result.rows[0] || null;\n    }\n    constructor(){\n        this.tableName = '';\n        this.updateData = {};\n        this.whereConditions = [];\n        this.returnFields = [\n            '*'\n        ];\n        this.parameters = [];\n    }\n}\nclass DeleteBuilder {\n    static from(tableName) {\n        const builder = new DeleteBuilder();\n        builder.tableName = tableName;\n        return builder;\n    }\n    where(field, operator, value) {\n        this.whereConditions.push({\n            field,\n            operator,\n            value\n        });\n        return this;\n    }\n    returning(fields) {\n        if (typeof fields === 'string') {\n            this.returnFields = [\n                fields\n            ];\n        } else {\n            this.returnFields = fields;\n        }\n        return this;\n    }\n    build() {\n        this.parameters = [];\n        let paramIndex = 1;\n        let query = `DELETE FROM ${this.tableName}`;\n        // Build WHERE clause\n        if (this.whereConditions.length > 0) {\n            const conditions = this.whereConditions.map((condition)=>{\n                if (condition.operator === 'IS NULL' || condition.operator === 'IS NOT NULL') {\n                    return `${condition.field} ${condition.operator}`;\n                }\n                this.parameters.push(condition.value);\n                return `${condition.field} ${condition.operator} $${paramIndex++}`;\n            });\n            query += ` WHERE ${conditions.join(' AND ')}`;\n        }\n        // Add RETURNING clause\n        if (this.returnFields.length > 0) {\n            query += ` RETURNING ${this.returnFields.join(', ')}`;\n        }\n        return {\n            query,\n            params: this.parameters\n        };\n    }\n    async execute() {\n        const { query, params } = this.build();\n        return await _db__WEBPACK_IMPORTED_MODULE_0__.db.query(query, params);\n    }\n    async first() {\n        const result = await this.execute();\n        return result.rows[0] || null;\n    }\n    constructor(){\n        this.tableName = '';\n        this.whereConditions = [];\n        this.returnFields = [\n            '*'\n        ];\n        this.parameters = [];\n    }\n}\n// Export convenience functions\nconst query = QueryBuilder.table;\nconst insert = InsertBuilder.into;\nconst update = UpdateBuilder.table;\nconst deleteFrom = DeleteBuilder.from;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db-query-builder.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeDatabase: () => (/* binding */ closeDatabase),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   initializeDatabase: () => (/* binding */ initializeDatabase),\n/* harmony export */   logToDatabase: () => (/* binding */ logToDatabase),\n/* harmony export */   sql: () => (/* reexport safe */ _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__.sql)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/postgres */ \"(rsc)/./node_modules/@vercel/postgres/dist/index-node.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nclass DatabaseConnection {\n    constructor(){\n        this.pool = null;\n        this.isVercel = false;\n        this.isVercel = !!process.env.POSTGRES_URL;\n    }\n    getConfig() {\n        if (this.isVercel) {\n            return {\n                host: process.env.POSTGRES_HOST,\n                port: 5432,\n                database: process.env.POSTGRES_DATABASE,\n                user: process.env.POSTGRES_USER,\n                password: process.env.POSTGRES_PASSWORD,\n                ssl: true,\n                max: 20,\n                idleTimeoutMillis: 30000,\n                connectionTimeoutMillis: 2000\n            };\n        }\n        return {\n            host: process.env.DATABASE_HOST || 'localhost',\n            port: parseInt(process.env.DATABASE_PORT || '5432'),\n            database: process.env.DATABASE_NAME || 'hotdog_diaries_dev',\n            user: process.env.DATABASE_USER || 'postgres',\n            password: process.env.DATABASE_PASSWORD || 'password',\n            ssl: false,\n            max: 10,\n            idleTimeoutMillis: 30000,\n            connectionTimeoutMillis: 2000\n        };\n    }\n    async connect() {\n        if (this.pool) {\n            return;\n        }\n        const config = this.getConfig();\n        this.pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool(config);\n        this.pool.on('error', (err)=>{\n            console.error('Unexpected database error on idle client', err);\n        });\n        this.pool.on('connect', ()=>{\n            console.log('Database connection established');\n        });\n        this.pool.on('remove', ()=>{\n            console.log('Database connection removed');\n        });\n        try {\n            const client = await this.pool.connect();\n            await client.query('SELECT NOW()');\n            client.release();\n            console.log('Database connection successful');\n        } catch (error) {\n            console.error('Database connection failed:', error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        if (this.pool) {\n            await this.pool.end();\n            this.pool = null;\n            console.log('Database connection closed');\n        }\n    }\n    async query(text, params) {\n        if (this.isVercel) {\n            return await _vercel_postgres__WEBPACK_IMPORTED_MODULE_1__.sql.query(text, params || []);\n        }\n        if (!this.pool) {\n            await this.connect();\n        }\n        const start = Date.now();\n        try {\n            const result = await this.pool.query(text, params);\n            const duration = Date.now() - start;\n            console.log('Query executed', {\n                text,\n                duration,\n                rows: result.rowCount\n            });\n            return result;\n        } catch (error) {\n            const duration = Date.now() - start;\n            console.error('Query error', {\n                text,\n                duration,\n                error\n            });\n            throw error;\n        }\n    }\n    async getClient() {\n        if (this.isVercel) {\n            throw new Error('Client connections not supported in Vercel environment');\n        }\n        if (!this.pool) {\n            throw new Error('Database not connected');\n        }\n        return await this.pool.connect();\n    }\n    async healthCheck() {\n        try {\n            const start = Date.now();\n            await this.query('SELECT 1 as health_check');\n            const latency = Date.now() - start;\n            return {\n                connected: true,\n                latency\n            };\n        } catch (error) {\n            return {\n                connected: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    async transaction(callback) {\n        if (this.isVercel) {\n            throw new Error('Transactions not supported in Vercel environment with @vercel/postgres');\n        }\n        const client = await this.getClient();\n        try {\n            await client.query('BEGIN');\n            const result = await callback(client);\n            await client.query('COMMIT');\n            return result;\n        } catch (error) {\n            await client.query('ROLLBACK');\n            throw error;\n        } finally{\n            client.release();\n        }\n    }\n}\nconst db = new DatabaseConnection();\nasync function initializeDatabase() {\n    try {\n        await db.connect();\n        console.log('Database initialized successfully');\n    } catch (error) {\n        console.error('Failed to initialize database:', error);\n        throw error;\n    }\n}\nasync function closeDatabase() {\n    try {\n        await db.disconnect();\n        console.log('Database closed successfully');\n    } catch (error) {\n        console.error('Failed to close database:', error);\n        throw error;\n    }\n}\nasync function logToDatabase(level, message, component, metadata) {\n    try {\n        // Convert LogLevel enum to database-compatible string\n        let dbLevel;\n        switch(level){\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.DEBUG:\n                dbLevel = 'debug';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.INFO:\n                dbLevel = 'info';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.WARN:\n                dbLevel = 'warning';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR:\n                dbLevel = 'error';\n                break;\n            case _types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.FATAL:\n                dbLevel = 'error'; // Map FATAL to error since it's not in constraint\n                break;\n            default:\n                dbLevel = 'info';\n        }\n        await db.query(`INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n       VALUES ($1, $2, $3, $4, NOW())`, [\n            dbLevel,\n            message,\n            component,\n            metadata ? JSON.stringify(metadata) : null\n        ]);\n    } catch (error) {\n        console.error('Failed to log to database:', error);\n    }\n}\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/content-processor.ts":
/*!*******************************************!*\
  !*** ./lib/services/content-processor.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentProcessor: () => (/* binding */ ContentProcessor),\n/* harmony export */   contentProcessor: () => (/* binding */ contentProcessor)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\n/* harmony import */ var _filtering__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./filtering */ \"(rsc)/./lib/services/filtering.ts\");\n/* harmony import */ var _duplicate_detection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./duplicate-detection */ \"(rsc)/./lib/services/duplicate-detection.ts\");\n/* harmony import */ var _logging__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logging */ \"(rsc)/./lib/services/logging.ts\");\n/* harmony import */ var _metrics__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./metrics */ \"(rsc)/./lib/services/metrics.ts\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_6__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_0__, _filtering__WEBPACK_IMPORTED_MODULE_2__, _duplicate_detection__WEBPACK_IMPORTED_MODULE_3__, _logging__WEBPACK_IMPORTED_MODULE_4__, _metrics__WEBPACK_IMPORTED_MODULE_5__]);\n([_lib_db__WEBPACK_IMPORTED_MODULE_0__, _filtering__WEBPACK_IMPORTED_MODULE_2__, _duplicate_detection__WEBPACK_IMPORTED_MODULE_3__, _logging__WEBPACK_IMPORTED_MODULE_4__, _metrics__WEBPACK_IMPORTED_MODULE_5__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\nclass ContentProcessor {\n    static{\n        this.DEFAULT_CONFIG = {\n            autoApprovalThreshold: 0.8,\n            autoRejectionThreshold: 0.3,\n            requireManualReview: false,\n            enableDuplicateDetection: true,\n            enableSpamFilter: true,\n            enableInappropriateFilter: true,\n            enableUnrelatedFilter: true,\n            enableRequiredTermsCheck: true\n        };\n    }\n    static{\n        this.MAX_PROCESSING_ATTEMPTS = 3;\n    }\n    static{\n        this.BATCH_SIZE = 50;\n    }\n    async processContent(contentId, config) {\n        const processingConfig = {\n            ...ContentProcessor.DEFAULT_CONFIG,\n            ...config\n        };\n        const startTime = Date.now();\n        try {\n            // Log with new monitoring system\n            await _logging__WEBPACK_IMPORTED_MODULE_4__.loggingService.logInfo('ContentProcessor', 'Starting content processing', {\n                contentId,\n                config: processingConfig\n            });\n            // Record processing start metric\n            await _metrics__WEBPACK_IMPORTED_MODULE_5__.metricsService.recordCustomMetric('content_processing_started', 1, 'count', {\n                contentId: contentId.toString()\n            });\n            // Get content from database\n            const content = await this.getContentById(contentId);\n            if (!content) {\n                throw new Error(`Content with ID ${contentId} not found`);\n            }\n            // Validate content format\n            const validation = await this.validateContent(content);\n            if (!validation.isValid) {\n                return {\n                    success: false,\n                    contentId,\n                    action: 'rejected',\n                    analysis: this.createEmptyAnalysis(),\n                    reason: `Validation failed: ${validation.errors.join(', ')}`\n                };\n            }\n            // Check for duplicates first\n            let duplicateOf;\n            if (processingConfig.enableDuplicateDetection) {\n                const duplicateCheck = await _duplicate_detection__WEBPACK_IMPORTED_MODULE_3__.duplicateDetectionService.checkForDuplicates(content);\n                if (duplicateCheck.isDuplicate && duplicateCheck.originalContentId) {\n                    duplicateOf = duplicateCheck.originalContentId;\n                    // Mark as duplicate\n                    await this.saveContentAnalysis(contentId, {\n                        ...this.createEmptyAnalysis(),\n                        duplicate_of: duplicateOf\n                    });\n                    await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.INFO, 'Duplicate content detected', 'ContentProcessor', {\n                        contentId,\n                        duplicateOf\n                    });\n                    return {\n                        success: true,\n                        contentId,\n                        action: 'duplicate',\n                        analysis: this.createEmptyAnalysis(),\n                        reason: 'Duplicate content detected',\n                        duplicateOf\n                    };\n                }\n            }\n            // Run content analysis\n            const analysis = await _filtering__WEBPACK_IMPORTED_MODULE_2__.filteringService.isValidHotdogContent(content);\n            analysis.content_id = contentId;\n            // Apply configuration filters\n            if (!processingConfig.enableSpamFilter) {\n                analysis.is_spam = false;\n            }\n            if (!processingConfig.enableInappropriateFilter) {\n                analysis.is_inappropriate = false;\n            }\n            if (!processingConfig.enableUnrelatedFilter) {\n                analysis.is_unrelated = false;\n            }\n            if (!processingConfig.enableRequiredTermsCheck) {\n                analysis.is_valid_hotdog = true;\n            }\n            // Determine action based on analysis and thresholds\n            const action = this.determineAction(analysis, processingConfig);\n            // Update content status based on action\n            await this.updateContentStatus(contentId, action, analysis);\n            // Save analysis to database\n            await this.saveContentAnalysis(contentId, analysis);\n            // Record successful processing metrics\n            const duration = Date.now() - startTime;\n            await _metrics__WEBPACK_IMPORTED_MODULE_5__.metricsService.recordContentProcessingMetric('content_processing', duration, true, 1, {\n                action,\n                confidence: analysis.confidence_score,\n                isValidHotdog: analysis.is_valid_hotdog\n            });\n            await _logging__WEBPACK_IMPORTED_MODULE_4__.loggingService.logInfo('ContentProcessor', 'Content processing completed', {\n                contentId,\n                action,\n                confidence: analysis.confidence_score,\n                isValidHotdog: analysis.is_valid_hotdog,\n                duration\n            });\n            return {\n                success: true,\n                contentId,\n                action,\n                analysis,\n                reason: this.getActionReason(action, analysis)\n            };\n        } catch (error) {\n            // Record failed processing metrics\n            const duration = Date.now() - startTime;\n            await _metrics__WEBPACK_IMPORTED_MODULE_5__.metricsService.recordContentProcessingMetric('content_processing', duration, false, 0, {\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            await _logging__WEBPACK_IMPORTED_MODULE_4__.loggingService.logError('ContentProcessor', 'Content processing failed', {\n                contentId,\n                duration,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            }, error);\n            return {\n                success: false,\n                contentId,\n                action: 'rejected',\n                analysis: this.createEmptyAnalysis(),\n                reason: `Processing failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n            };\n        }\n    }\n    async processBatch(contentIds, config) {\n        const results = [];\n        const batchSize = Math.min(contentIds.length, ContentProcessor.BATCH_SIZE);\n        const startTime = Date.now();\n        await _logging__WEBPACK_IMPORTED_MODULE_4__.loggingService.logInfo('ContentProcessor', 'Starting batch processing', {\n            totalItems: contentIds.length,\n            batchSize\n        });\n        // Record batch processing start\n        await _metrics__WEBPACK_IMPORTED_MODULE_5__.metricsService.recordCustomMetric('batch_processing_started', contentIds.length, 'count');\n        for(let i = 0; i < contentIds.length; i += batchSize){\n            const batch = contentIds.slice(i, i + batchSize);\n            const batchPromises = batch.map((id)=>this.processContent(id, config));\n            try {\n                const batchResults = await Promise.allSettled(batchPromises);\n                for (const result of batchResults){\n                    if (result.status === 'fulfilled') {\n                        results.push(result.value);\n                    } else {\n                        results.push({\n                            success: false,\n                            contentId: 0,\n                            action: 'rejected',\n                            analysis: this.createEmptyAnalysis(),\n                            reason: `Batch processing failed: ${result.reason}`\n                        });\n                    }\n                }\n            } catch (error) {\n                await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'Batch processing failed', 'ContentProcessor', {\n                    batchStart: i,\n                    batchSize: batch.length,\n                    error: error instanceof Error ? error.message : 'Unknown error'\n                });\n            }\n        }\n        // Record batch processing completion metrics\n        const duration = Date.now() - startTime;\n        const successful = results.filter((r)=>r.success).length;\n        const failed = results.filter((r)=>!r.success).length;\n        await _metrics__WEBPACK_IMPORTED_MODULE_5__.metricsService.recordContentProcessingMetric('batch_processing', duration, failed === 0, results.length, {\n            successful,\n            failed,\n            batchSize\n        });\n        await _logging__WEBPACK_IMPORTED_MODULE_4__.loggingService.logInfo('ContentProcessor', 'Batch processing completed', {\n            totalProcessed: results.length,\n            successful,\n            failed,\n            duration\n        });\n        return results;\n    }\n    async addToProcessingQueue(contentId, priority = 'medium') {\n        try {\n            await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`INSERT INTO processing_queue (content_queue_id, priority, status, attempts, created_at, updated_at)\n         VALUES ($1, $2, 'pending', 0, NOW(), NOW())`, [\n                contentId,\n                priority\n            ]);\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.INFO, 'Content added to processing queue', 'ContentProcessor', {\n                contentId,\n                priority\n            });\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'Failed to add content to processing queue', 'ContentProcessor', {\n                contentId,\n                priority,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            throw error;\n        }\n    }\n    async processQueue(maxItems = 100) {\n        try {\n            // Get pending items from queue\n            const queueItems = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`SELECT * FROM processing_queue \n         WHERE status = 'pending' \n         AND attempts < $1\n         ORDER BY \n           CASE priority \n             WHEN 'high' THEN 1 \n             WHEN 'medium' THEN 2 \n             WHEN 'low' THEN 3 \n           END,\n           created_at ASC\n         LIMIT $2`, [\n                ContentProcessor.MAX_PROCESSING_ATTEMPTS,\n                maxItems\n            ]);\n            if (queueItems.rows.length === 0) {\n                return [];\n            }\n            const results = [];\n            for (const item of queueItems.rows){\n                try {\n                    // Mark as processing\n                    await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`UPDATE processing_queue \n             SET status = 'processing', attempts = attempts + 1, updated_at = NOW() \n             WHERE id = $1`, [\n                        item.id\n                    ]);\n                    // Process content\n                    const result = await this.processContent(item.content_queue_id);\n                    results.push(result);\n                    // Mark as completed\n                    await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`UPDATE processing_queue \n             SET status = 'completed', updated_at = NOW() \n             WHERE id = $1`, [\n                        item.id\n                    ]);\n                } catch (error) {\n                    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n                    // Mark as failed or retry\n                    const status = item.attempts + 1 >= ContentProcessor.MAX_PROCESSING_ATTEMPTS ? 'failed' : 'pending';\n                    await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`UPDATE processing_queue \n             SET status = $1, last_error = $2, updated_at = NOW() \n             WHERE id = $3`, [\n                        status,\n                        errorMessage,\n                        item.id\n                    ]);\n                    await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'Queue item processing failed', 'ContentProcessor', {\n                        queueId: item.id,\n                        contentId: item.content_queue_id,\n                        attempt: item.attempts + 1,\n                        error: errorMessage\n                    });\n                }\n            }\n            return results;\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'Queue processing failed', 'ContentProcessor', {\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            return [];\n        }\n    }\n    async getProcessingStats() {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n        SELECT \n          COUNT(*) as total,\n          COUNT(*) FILTER (WHERE status = 'pending') as pending,\n          COUNT(*) FILTER (WHERE status = 'processing') as processing,\n          COUNT(*) FILTER (WHERE status = 'failed') as failed,\n          AVG(EXTRACT(EPOCH FROM (updated_at - created_at))) as avg_processing_time\n        FROM processing_queue\n        WHERE created_at >= NOW() - INTERVAL '24 hours'\n      `);\n            const stats = result.rows[0];\n            return {\n                queueSize: parseInt(stats.total),\n                pendingItems: parseInt(stats.pending),\n                processingItems: parseInt(stats.processing),\n                failedItems: parseInt(stats.failed),\n                averageProcessingTime: parseFloat(stats.avg_processing_time) || 0\n            };\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'Failed to get processing stats', 'ContentProcessor', {\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            return {\n                queueSize: 0,\n                pendingItems: 0,\n                processingItems: 0,\n                failedItems: 0,\n                averageProcessingTime: 0\n            };\n        }\n    }\n    async validateContent(content) {\n        const errors = [];\n        const warnings = [];\n        // Required fields\n        if (!content.original_url) {\n            errors.push('Original URL is required');\n        }\n        if (!content.content_text && !content.content_image_url && !content.content_video_url) {\n            errors.push('At least one content field (text, image, or video) is required');\n        }\n        if (!content.source_platform) {\n            errors.push('Source platform is required');\n        }\n        // URL validation\n        if (content.original_url && !this.isValidUrl(content.original_url)) {\n            errors.push('Invalid original URL format');\n        }\n        if (content.content_image_url && !this.isValidUrl(content.content_image_url)) {\n            errors.push('Invalid image URL format');\n        }\n        if (content.content_video_url && !this.isValidUrl(content.content_video_url)) {\n            errors.push('Invalid video URL format');\n        }\n        // Content validation\n        if (content.content_text) {\n            if (content.content_text.length < 10) {\n                warnings.push('Content text is very short');\n            }\n            if (content.content_text.length > 5000) {\n                warnings.push('Content text is very long');\n            }\n        }\n        // Platform validation\n        const validPlatforms = [\n            'reddit',\n            'instagram',\n            'facebook',\n            'tiktok'\n        ];\n        if (content.source_platform && !validPlatforms.includes(content.source_platform)) {\n            errors.push(`Invalid source platform: ${content.source_platform}`);\n        }\n        // Author validation\n        if (content.original_author && content.original_author.length > 255) {\n            warnings.push('Author name is very long');\n        }\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n    async getContentById(id) {\n        try {\n            console.log(`ContentProcessor: Getting content by ID ${id}`);\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query('SELECT * FROM content_queue WHERE id = $1', [\n                id\n            ]);\n            console.log(`ContentProcessor: Query result - found ${result.rows.length} rows`);\n            if (result.rows.length > 0) {\n                console.log(`ContentProcessor: Found content:`, {\n                    id: result.rows[0].id,\n                    content_text: result.rows[0].content_text?.substring(0, 50)\n                });\n            }\n            return result.rows.length > 0 ? result.rows[0] : null;\n        } catch (error) {\n            console.error(`ContentProcessor: Error getting content by ID ${id}:`, error);\n            throw error;\n        }\n    }\n    determineAction(analysis, config) {\n        // Immediate rejection criteria\n        if (analysis.is_spam || analysis.is_inappropriate) {\n            return 'rejected';\n        }\n        // Flag for manual review if unrelated\n        if (analysis.is_unrelated) {\n            return 'flagged';\n        }\n        // Check confidence thresholds\n        if (analysis.confidence_score >= config.autoApprovalThreshold && analysis.is_valid_hotdog) {\n            return 'approved';\n        }\n        if (analysis.confidence_score <= config.autoRejectionThreshold) {\n            return 'rejected';\n        }\n        // Flag for manual review if in between thresholds or manual review is required\n        if (config.requireManualReview) {\n            return 'flagged';\n        }\n        // Default to flagged for manual review\n        return 'flagged';\n    }\n    async updateContentStatus(contentId, action, analysis) {\n        let isApproved = false;\n        let isFlagged = false;\n        switch(action){\n            case 'approved':\n                isApproved = true;\n                break;\n            case 'rejected':\n                isApproved = false;\n                break;\n            case 'flagged':\n                isFlagged = true;\n                break;\n            case 'duplicate':\n                isApproved = false;\n                break;\n        }\n        await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`UPDATE content_queue \n       SET is_approved = $1, updated_at = NOW() \n       WHERE id = $2`, [\n            isApproved,\n            contentId\n        ]);\n        // Update analysis with flagged status\n        if (isFlagged) {\n            analysis.is_flagged = true;\n            analysis.flagged_reason = this.getActionReason(action, analysis);\n        }\n    }\n    async saveContentAnalysis(contentId, analysis) {\n        await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`INSERT INTO content_analysis (\n        content_queue_id, is_spam, is_inappropriate, is_unrelated, is_valid_hotdog,\n        confidence_score, flagged_patterns, processing_notes, similarity_hash,\n        duplicate_of, filter_results, is_flagged, flagged_reason, created_at, updated_at\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, NOW(), NOW())\n      ON CONFLICT (content_queue_id) \n      DO UPDATE SET\n        is_spam = EXCLUDED.is_spam,\n        is_inappropriate = EXCLUDED.is_inappropriate,\n        is_unrelated = EXCLUDED.is_unrelated,\n        is_valid_hotdog = EXCLUDED.is_valid_hotdog,\n        confidence_score = EXCLUDED.confidence_score,\n        flagged_patterns = EXCLUDED.flagged_patterns,\n        processing_notes = EXCLUDED.processing_notes,\n        similarity_hash = EXCLUDED.similarity_hash,\n        duplicate_of = EXCLUDED.duplicate_of,\n        filter_results = EXCLUDED.filter_results,\n        is_flagged = EXCLUDED.is_flagged,\n        flagged_reason = EXCLUDED.flagged_reason,\n        updated_at = NOW()`, [\n            contentId,\n            analysis.is_spam,\n            analysis.is_inappropriate,\n            analysis.is_unrelated,\n            analysis.is_valid_hotdog,\n            analysis.confidence_score,\n            analysis.flagged_patterns,\n            analysis.processing_notes,\n            analysis.similarity_hash,\n            analysis.duplicate_of,\n            JSON.stringify({\n                is_spam: analysis.is_spam,\n                is_inappropriate: analysis.is_inappropriate,\n                is_unrelated: analysis.is_unrelated,\n                is_valid_hotdog: analysis.is_valid_hotdog,\n                confidence_score: analysis.confidence_score\n            }),\n            analysis.is_flagged || false,\n            analysis.flagged_reason || null\n        ]);\n    }\n    getActionReason(action, analysis) {\n        switch(action){\n            case 'approved':\n                return 'Content passed all filters and meets quality standards';\n            case 'rejected':\n                if (analysis.is_spam) return 'Content detected as spam';\n                if (analysis.is_inappropriate) return 'Content contains inappropriate material';\n                if (analysis.confidence_score < 0.3) return 'Content has low confidence score';\n                return 'Content failed quality checks';\n            case 'flagged':\n                if (analysis.is_unrelated) return 'Content may be unrelated to hotdogs';\n                if (analysis.confidence_score < 0.8) return 'Content requires manual review due to low confidence';\n                return 'Content flagged for manual review';\n            case 'duplicate':\n                return 'Content identified as duplicate';\n            default:\n                return 'Unknown action';\n        }\n    }\n    createEmptyAnalysis() {\n        return {\n            is_spam: false,\n            is_inappropriate: false,\n            is_unrelated: false,\n            is_valid_hotdog: false,\n            confidence_score: 0,\n            flagged_patterns: [],\n            processing_notes: [],\n            similarity_hash: ''\n        };\n    }\n    isValidUrl(url) {\n        try {\n            new URL(url);\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    generateContentHash(content) {\n        const hashInput = [\n            content.content_text || '',\n            content.content_image_url || '',\n            content.content_video_url || '',\n            content.original_url || ''\n        ].join('|');\n        return crypto__WEBPACK_IMPORTED_MODULE_6___default().createHash('sha256').update(hashInput).digest('hex');\n    }\n}\nconst contentProcessor = new ContentProcessor();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/content-processor.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/duplicate-detection.ts":
/*!*********************************************!*\
  !*** ./lib/services/duplicate-detection.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DuplicateDetectionService: () => (/* binding */ DuplicateDetectionService),\n/* harmony export */   duplicateDetectionService: () => (/* binding */ duplicateDetectionService)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\n/* harmony import */ var _lib_utils_content_hash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/utils/content-hash */ \"(rsc)/./lib/utils/content-hash.ts\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_3__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_db__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nclass DuplicateDetectionService {\n    static{\n        this.EXACT_MATCH_THRESHOLD = 1.0;\n    }\n    static{\n        this.FUZZY_MATCH_THRESHOLD = 0.85;\n    }\n    static{\n        this.URL_SIMILARITY_THRESHOLD = 0.9;\n    }\n    static{\n        this.IMAGE_SIMILARITY_THRESHOLD = 0.95;\n    }\n    static{\n        this.VIDEO_SIMILARITY_THRESHOLD = 0.95;\n    }\n    async checkForDuplicates(content) {\n        try {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.INFO, 'Starting duplicate detection', 'DuplicateDetectionService', {\n                contentId: content.id\n            });\n            // Generate various hashes for comparison\n            const exactHash = this.generateExactHash(content);\n            const fuzzyHash = this.generateFuzzyHash(content);\n            const urlHash = this.generateUrlHash(content);\n            const imageHash = this.generateImageHash(content);\n            const videoHash = this.generateVideoHash(content);\n            // Check for exact matches first\n            const exactMatch = await this.findExactMatch(exactHash, content.id);\n            if (exactMatch) {\n                return {\n                    isDuplicate: true,\n                    originalContentId: exactMatch.id,\n                    similarityScore: 1.0,\n                    matchType: 'exact',\n                    confidence: 1.0\n                };\n            }\n            // Check for URL matches\n            const urlMatch = await this.findUrlMatch(urlHash, content.id);\n            if (urlMatch) {\n                return {\n                    isDuplicate: true,\n                    originalContentId: urlMatch.id,\n                    similarityScore: DuplicateDetectionService.URL_SIMILARITY_THRESHOLD,\n                    matchType: 'url',\n                    confidence: 0.95\n                };\n            }\n            // Check for image matches\n            if (content.content_image_url) {\n                const imageMatch = await this.findImageMatch(imageHash, content.id);\n                if (imageMatch) {\n                    return {\n                        isDuplicate: true,\n                        originalContentId: imageMatch.id,\n                        similarityScore: DuplicateDetectionService.IMAGE_SIMILARITY_THRESHOLD,\n                        matchType: 'image',\n                        confidence: 0.9\n                    };\n                }\n            }\n            // Check for video matches\n            if (content.content_video_url) {\n                const videoMatch = await this.findVideoMatch(videoHash, content.id);\n                if (videoMatch) {\n                    return {\n                        isDuplicate: true,\n                        originalContentId: videoMatch.id,\n                        similarityScore: DuplicateDetectionService.VIDEO_SIMILARITY_THRESHOLD,\n                        matchType: 'video',\n                        confidence: 0.9\n                    };\n                }\n            }\n            // Check for fuzzy text matches\n            const fuzzyMatches = await this.findFuzzyMatches(content);\n            if (fuzzyMatches.length > 0) {\n                const bestMatch = fuzzyMatches[0];\n                if (bestMatch.similarity >= DuplicateDetectionService.FUZZY_MATCH_THRESHOLD) {\n                    return {\n                        isDuplicate: true,\n                        originalContentId: bestMatch.contentId,\n                        similarityScore: bestMatch.similarity,\n                        matchType: 'fuzzy',\n                        confidence: bestMatch.similarity\n                    };\n                }\n            }\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.INFO, 'No duplicates found', 'DuplicateDetectionService', {\n                contentId: content.id\n            });\n            return {\n                isDuplicate: false,\n                similarityScore: 0,\n                matchType: 'none',\n                confidence: 0\n            };\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'Duplicate detection failed', 'DuplicateDetectionService', {\n                contentId: content.id,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            return {\n                isDuplicate: false,\n                similarityScore: 0,\n                matchType: 'none',\n                confidence: 0\n            };\n        }\n    }\n    async findSimilarContent(contentId, limit = 10) {\n        try {\n            const content = await this.getContentById(contentId);\n            if (!content) {\n                return [];\n            }\n            const fuzzyMatches = await this.findFuzzyMatches(content, limit);\n            return fuzzyMatches.map((match)=>({\n                    contentId: match.contentId,\n                    similarity: match.similarity,\n                    matchType: match.matchType,\n                    matchedField: match.matchType\n                }));\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'Failed to find similar content', 'DuplicateDetectionService', {\n                contentId,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            return [];\n        }\n    }\n    async getDuplicateClusters(limit = 50) {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n        SELECT \n          ca.duplicate_of as original_id,\n          array_agg(ca.content_queue_id) as duplicate_ids,\n          count(ca.content_queue_id) as cluster_size,\n          avg(ca.confidence_score) as avg_similarity,\n          min(ca.created_at) as created_at\n        FROM content_analysis ca\n        WHERE ca.duplicate_of IS NOT NULL\n        GROUP BY ca.duplicate_of\n        HAVING count(ca.content_queue_id) > 1\n        ORDER BY count(ca.content_queue_id) DESC, min(ca.created_at) DESC\n        LIMIT $1\n      `, [\n                limit\n            ]);\n            return result.rows.map((row)=>({\n                    originalId: row.original_id,\n                    duplicateIds: row.duplicate_ids,\n                    clusterSize: parseInt(row.cluster_size),\n                    similarity: parseFloat(row.avg_similarity),\n                    createdAt: new Date(row.created_at)\n                }));\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'Failed to get duplicate clusters', 'DuplicateDetectionService', {\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            return [];\n        }\n    }\n    async cleanupDuplicates(dryRun = true) {\n        try {\n            const clusters = await this.getDuplicateClusters(1000);\n            const errors = [];\n            let duplicatesRemoved = 0;\n            for (const cluster of clusters){\n                try {\n                    if (!dryRun) {\n                        // Keep the original and remove duplicates\n                        await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query('DELETE FROM content_queue WHERE id = ANY($1)', [\n                            cluster.duplicateIds\n                        ]);\n                        duplicatesRemoved += cluster.duplicateIds.length;\n                    } else {\n                        duplicatesRemoved += cluster.duplicateIds.length;\n                    }\n                } catch (error) {\n                    errors.push(`Failed to cleanup cluster ${cluster.originalId}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n                }\n            }\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.INFO, `Duplicate cleanup ${dryRun ? 'simulation' : 'execution'} completed`, 'DuplicateDetectionService', {\n                clustersFound: clusters.length,\n                duplicatesRemoved,\n                errors: errors.length,\n                dryRun\n            });\n            return {\n                clustersFound: clusters.length,\n                duplicatesRemoved,\n                errors\n            };\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'Duplicate cleanup failed', 'DuplicateDetectionService', {\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            return {\n                clustersFound: 0,\n                duplicatesRemoved: 0,\n                errors: [\n                    error instanceof Error ? error.message : 'Unknown error'\n                ]\n            };\n        }\n    }\n    async findExactMatch(hash, excludeId) {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`SELECT cq.* FROM content_queue cq\n       WHERE cq.content_hash = $1 \n       AND ($2 IS NULL OR cq.id != $2)\n       ORDER BY cq.created_at ASC\n       LIMIT 1`, [\n            hash,\n            excludeId\n        ]);\n        return result.rows.length > 0 ? result.rows[0] : null;\n    }\n    async findUrlMatch(urlHash, excludeId) {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`SELECT cq.* FROM content_queue cq\n       WHERE MD5(cq.original_url) = $1 \n       AND ($2 IS NULL OR cq.id != $2)\n       ORDER BY cq.created_at ASC\n       LIMIT 1`, [\n            urlHash,\n            excludeId\n        ]);\n        return result.rows.length > 0 ? result.rows[0] : null;\n    }\n    async findImageMatch(imageHash, excludeId) {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`SELECT cq.* FROM content_queue cq\n       WHERE MD5(cq.content_image_url) = $1 \n       AND cq.content_image_url IS NOT NULL\n       AND ($2 IS NULL OR cq.id != $2)\n       ORDER BY cq.created_at ASC\n       LIMIT 1`, [\n            imageHash,\n            excludeId\n        ]);\n        return result.rows.length > 0 ? result.rows[0] : null;\n    }\n    async findVideoMatch(videoHash, excludeId) {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`SELECT cq.* FROM content_queue cq\n       WHERE MD5(cq.content_video_url) = $1 \n       AND cq.content_video_url IS NOT NULL\n       AND ($2 IS NULL OR cq.id != $2)\n       ORDER BY cq.created_at ASC\n       LIMIT 1`, [\n            videoHash,\n            excludeId\n        ]);\n        return result.rows.length > 0 ? result.rows[0] : null;\n    }\n    async findFuzzyMatches(content, limit = 10) {\n        if (!content.content_text || content.content_text.length < 20) {\n            return [];\n        }\n        const fuzzyHash = this.generateFuzzyHash(content);\n        const normalizedText = this.normalizeText(content.content_text);\n        // Find content with similar fuzzy hashes\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`SELECT cq.*, ca.similarity_hash\n       FROM content_queue cq\n       LEFT JOIN content_analysis ca ON cq.id = ca.content_queue_id\n       WHERE cq.content_text IS NOT NULL\n       AND cq.id != $1\n       AND length(cq.content_text) > 20\n       ORDER BY cq.created_at DESC\n       LIMIT 200`, [\n            content.id\n        ]);\n        const matches = [];\n        for (const row of result.rows){\n            const otherNormalizedText = this.normalizeText(row.content_text);\n            const similarity = this.calculateTextSimilarity(normalizedText, otherNormalizedText);\n            if (similarity >= 0.7) {\n                matches.push({\n                    contentId: row.id,\n                    similarity,\n                    matchType: 'text'\n                });\n            }\n        }\n        // Sort by similarity and return top matches\n        matches.sort((a, b)=>b.similarity - a.similarity);\n        return matches.slice(0, limit);\n    }\n    async getContentById(id) {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query('SELECT * FROM content_queue WHERE id = $1', [\n            id\n        ]);\n        return result.rows.length > 0 ? result.rows[0] : null;\n    }\n    generateExactHash(content) {\n        const hashInput = [\n            content.content_text || '',\n            content.content_image_url || '',\n            content.content_video_url || '',\n            content.original_url || ''\n        ].join('|');\n        return crypto__WEBPACK_IMPORTED_MODULE_3___default().createHash('sha256').update(hashInput).digest('hex');\n    }\n    generateFuzzyHash(content) {\n        const normalizedText = this.normalizeText(content.content_text || '');\n        const hashInput = [\n            normalizedText,\n            content.content_image_url || '',\n            content.content_video_url || ''\n        ].join('|');\n        return crypto__WEBPACK_IMPORTED_MODULE_3___default().createHash('md5').update(hashInput).digest('hex');\n    }\n    generateUrlHash(content) {\n        return crypto__WEBPACK_IMPORTED_MODULE_3___default().createHash('md5').update(content.original_url || '').digest('hex');\n    }\n    generateImageHash(content) {\n        return crypto__WEBPACK_IMPORTED_MODULE_3___default().createHash('md5').update(content.content_image_url || '').digest('hex');\n    }\n    generateVideoHash(content) {\n        return crypto__WEBPACK_IMPORTED_MODULE_3___default().createHash('md5').update(content.content_video_url || '').digest('hex');\n    }\n    normalizeText(text) {\n        return text.toLowerCase().replace(/[^\\w\\s]/g, '') // Remove punctuation\n        .replace(/\\s+/g, ' ') // Normalize whitespace\n        .trim();\n    }\n    calculateTextSimilarity(text1, text2) {\n        if (!text1 || !text2) return 0;\n        if (text1 === text2) return 1;\n        // Use Jaccard similarity for text comparison\n        const words1 = new Set(text1.split(/\\s+/));\n        const words2 = new Set(text2.split(/\\s+/));\n        const intersection = new Set([\n            ...words1\n        ].filter((x)=>words2.has(x)));\n        const union = new Set([\n            ...words1,\n            ...words2\n        ]);\n        return intersection.size / union.size;\n    }\n    levenshteinDistance(str1, str2) {\n        const matrix = [];\n        const len1 = str1.length;\n        const len2 = str2.length;\n        for(let i = 0; i <= len1; i++){\n            matrix[i] = [\n                i\n            ];\n        }\n        for(let j = 0; j <= len2; j++){\n            matrix[0][j] = j;\n        }\n        for(let i = 1; i <= len1; i++){\n            for(let j = 1; j <= len2; j++){\n                if (str1.charAt(i - 1) === str2.charAt(j - 1)) {\n                    matrix[i][j] = matrix[i - 1][j - 1];\n                } else {\n                    matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, matrix[i][j - 1] + 1, matrix[i - 1][j] + 1);\n                }\n            }\n        }\n        return matrix[len1][len2];\n    }\n    calculateLevenshteinSimilarity(str1, str2) {\n        const maxLength = Math.max(str1.length, str2.length);\n        if (maxLength === 0) return 1;\n        const distance = this.levenshteinDistance(str1, str2);\n        return (maxLength - distance) / maxLength;\n    }\n    /**\n   * Generate content hash using the utility function\n   */ generateContentHash(content) {\n        return (0,_lib_utils_content_hash__WEBPACK_IMPORTED_MODULE_2__.generateContentHash)(content);\n    }\n}\nconst duplicateDetectionService = new DuplicateDetectionService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/duplicate-detection.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/filtering.ts":
/*!***********************************!*\
  !*** ./lib/services/filtering.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FilteringService: () => (/* binding */ FilteringService),\n/* harmony export */   filteringService: () => (/* binding */ filteringService)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_db__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nclass FilteringService {\n    static{\n        this.DEFAULT_SPAM_PATTERNS = [\n            'buy now',\n            'limited time',\n            'discount',\n            'promo code',\n            'sale',\n            'offer',\n            'deal',\n            'click here',\n            'act now',\n            'don\\'t miss',\n            'free shipping',\n            'call now',\n            'order today',\n            'special offer',\n            'best price',\n            'lowest price',\n            'save \\\\$\\\\d+',\n            'get yours',\n            'hurry',\n            'expires',\n            'bonus',\n            'win',\n            'prize',\n            'winner',\n            'congratulations',\n            'claim your',\n            'earn money',\n            'work from home',\n            'make money',\n            'get rich',\n            'investment',\n            'profit',\n            'guaranteed',\n            'risk free',\n            'no obligation',\n            'free trial',\n            'subscribe',\n            'follow us',\n            'like and share',\n            'dm me',\n            'link in bio',\n            'swipe up',\n            'check out my',\n            'follow me',\n            'instagram\\\\.com',\n            'onlyfans',\n            'cashapp',\n            'venmo',\n            'paypal\\\\.me',\n            'bitcoin',\n            'crypto',\n            'nft',\n            'affiliate',\n            'referral',\n            'commission'\n        ];\n    }\n    static{\n        this.DEFAULT_INAPPROPRIATE_PATTERNS = [\n            'fuck',\n            'shit',\n            '\\\\bdamn\\\\b',\n            '\\\\bhell\\\\b',\n            '\\\\bass\\\\b',\n            'bitch',\n            'bastard',\n            'crap',\n            'piss',\n            'cock',\n            'dick',\n            'pussy',\n            'tits',\n            'boobs',\n            'sex',\n            'porn',\n            'nude',\n            'naked',\n            'xxx',\n            'adult',\n            'escort',\n            'hookup',\n            'dating',\n            'kill',\n            'murder',\n            'suicide',\n            'die',\n            'death',\n            'violence',\n            'hate',\n            'racist',\n            'nazi',\n            'terrorism',\n            'bomb',\n            'weapon',\n            'gun',\n            'knife',\n            'drug',\n            'cocaine',\n            'heroin',\n            'marijuana',\n            'weed',\n            'cannabis',\n            'alcohol',\n            'drink',\n            'drunk',\n            'beer',\n            'wine',\n            'vodka',\n            'whiskey'\n        ];\n    }\n    static{\n        this.DEFAULT_UNRELATED_PATTERNS = [\n            'hotdog[,!\\\\s]+that\\'s amazing',\n            'hotdog[,!\\\\s]+that is amazing',\n            'hotdog[,!\\\\s]+wow',\n            'hotdog[,!\\\\s]+incredible',\n            'hotdog[,!\\\\s]+unbelievable',\n            'hotdog[,!\\\\s]+no way',\n            'hotdog[,!\\\\s]+really',\n            'hotdog[,!\\\\s]+seriously',\n            'hotdog[,!\\\\s]+damn',\n            'hotdog[,!\\\\s]+dude',\n            'hotdog[,!\\\\s]+man',\n            'hotdog[,!\\\\s]+bro',\n            'hotdog[,!\\\\s]+yo',\n            'hotdog[,!\\\\s]+wait',\n            'hotdog[,!\\\\s]+hold on',\n            'hotdog[,!\\\\s]+what',\n            'hotdog[,!\\\\s]+how',\n            'hotdog[,!\\\\s]+why',\n            'hotdog[,!\\\\s]+when',\n            'hotdog[,!\\\\s]+where',\n            'hotdog[,!\\\\s]+omg',\n            'hotdog[,!\\\\s]+oh my god',\n            'hotdog[,!\\\\s]+jesus',\n            'hotdog[,!\\\\s]+christ',\n            'hotdog[,!\\\\s]+wtf',\n            'hotdog[,!\\\\s]+lol',\n            'hotdog[,!\\\\s]+lmao',\n            'hotdog[,!\\\\s]+haha',\n            'hotdog[,!\\\\s]+this is',\n            'hotdog[,!\\\\s]+that was',\n            'hotdog[,!\\\\s]+you are',\n            'hotdog[,!\\\\s]+he is',\n            'hotdog[,!\\\\s]+she is',\n            'hotdog[,!\\\\s]+it is',\n            'hotdog[,!\\\\s]+we are',\n            'hotdog[,!\\\\s]+they are'\n        ];\n    }\n    static{\n        this.DEFAULT_REQUIRED_PATTERNS = [\n            'hot\\\\s*dog',\n            'hotdog',\n            'hot-dog',\n            'frankfurter',\n            'wiener',\n            'sausage',\n            'bratwurst',\n            'polish sausage',\n            'kielbasa',\n            'chorizo',\n            'andouille',\n            'breakfast sausage',\n            'italian sausage',\n            'coney',\n            'chili dog',\n            'corn dog',\n            'pigs in a blanket',\n            'vienna sausage',\n            'cocktail sausage',\n            'breakfast link',\n            'smoked sausage',\n            'turkey dog',\n            'veggie dog',\n            'tofu dog',\n            'plant-based dog',\n            'vegan dog',\n            'beef frank',\n            'all beef',\n            'kosher dog',\n            'hebrew national',\n            'nathan\\'s',\n            'ballpark frank',\n            'oscar mayer',\n            'johnsonville',\n            'hillshire farm',\n            'sabretts',\n            'hebrew national',\n            'dirty water dog',\n            'street dog',\n            'stadium dog',\n            'baseball dog',\n            'fair dog',\n            'carnival dog',\n            'cart dog',\n            'vendor dog',\n            'foot long',\n            'quarter pound',\n            'jumbo dog',\n            'mini dog',\n            'cocktail weenie',\n            'little smokie',\n            'pig in blanket',\n            'mustard',\n            'ketchup',\n            'relish',\n            'onions',\n            'sauerkraut',\n            'chili',\n            'cheese',\n            'bun',\n            'roll',\n            'bread',\n            'grill',\n            'bbq',\n            'barbecue',\n            'cookout',\n            'picnic',\n            'baseball game',\n            'stadium',\n            'ballpark',\n            'fair',\n            'carnival',\n            'street vendor',\n            'food truck',\n            'cart',\n            'stand'\n        ];\n    }\n    async getFilterPatterns() {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query('SELECT * FROM filter_patterns WHERE is_enabled = true ORDER BY pattern_type, created_at');\n            return result.rows;\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'Failed to get filter patterns', 'FilteringService', {\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            return [];\n        }\n    }\n    async isSpamContent(text) {\n        try {\n            const spamPatterns = await this.getPatternsByType('spam');\n            const flaggedPatterns = [];\n            let spamScore = 0;\n            const cleanText = text.toLowerCase().trim();\n            for (const pattern of spamPatterns){\n                const regex = pattern.is_regex ? new RegExp(pattern.pattern, 'i') : new RegExp(pattern.pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n                if (regex.test(cleanText)) {\n                    flaggedPatterns.push(pattern.pattern);\n                    spamScore += 1;\n                }\n            }\n            // Additional heuristic checks\n            const urlCount = (cleanText.match(/https?:\\/\\/\\S+/g) || []).length;\n            const emailCount = (cleanText.match(/\\S+@\\S+\\.\\S+/g) || []).length;\n            const phoneCount = (cleanText.match(/\\d{3}[-.]?\\d{3}[-.]?\\d{4}/g) || []).length;\n            const exclamationCount = (cleanText.match(/!/g) || []).length;\n            const capsRatio = (cleanText.match(/[A-Z]/g) || []).length / cleanText.length;\n            if (urlCount > 2) {\n                flaggedPatterns.push('excessive_urls');\n                spamScore += 2;\n            }\n            if (emailCount > 1) {\n                flaggedPatterns.push('multiple_emails');\n                spamScore += 2;\n            }\n            if (phoneCount > 0) {\n                flaggedPatterns.push('phone_number');\n                spamScore += 1;\n            }\n            if (exclamationCount > 3) {\n                flaggedPatterns.push('excessive_exclamations');\n                spamScore += 1;\n            }\n            if (capsRatio > 0.5 && cleanText.length > 10) {\n                flaggedPatterns.push('excessive_caps');\n                spamScore += 1;\n            }\n            const confidence = Math.min(spamScore / 5, 1);\n            const isSpam = confidence > 0.6;\n            return {\n                isSpam,\n                patterns: flaggedPatterns,\n                confidence\n            };\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'Failed to check spam content', 'FilteringService', {\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            return {\n                isSpam: false,\n                patterns: [],\n                confidence: 0\n            };\n        }\n    }\n    async isInappropriateContent(text) {\n        try {\n            const inappropriatePatterns = await this.getPatternsByType('inappropriate');\n            const flaggedPatterns = [];\n            let inappropriateScore = 0;\n            const cleanText = text.toLowerCase().trim();\n            for (const pattern of inappropriatePatterns){\n                const regex = pattern.is_regex ? new RegExp(pattern.pattern, 'i') : new RegExp(pattern.pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n                if (regex.test(cleanText)) {\n                    flaggedPatterns.push(pattern.pattern);\n                    inappropriateScore += 1;\n                }\n            }\n            const confidence = Math.min(inappropriateScore / 3, 1);\n            const isInappropriate = confidence > 0.3;\n            return {\n                isInappropriate,\n                patterns: flaggedPatterns,\n                confidence\n            };\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'Failed to check inappropriate content', 'FilteringService', {\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            return {\n                isInappropriate: false,\n                patterns: [],\n                confidence: 0\n            };\n        }\n    }\n    async isUnrelatedContent(text) {\n        try {\n            const unrelatedPatterns = await this.getPatternsByType('unrelated');\n            const flaggedPatterns = [];\n            let unrelatedScore = 0;\n            const cleanText = text.toLowerCase().trim();\n            for (const pattern of unrelatedPatterns){\n                const regex = pattern.is_regex ? new RegExp(pattern.pattern, 'i') : new RegExp(pattern.pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n                if (regex.test(cleanText)) {\n                    flaggedPatterns.push(pattern.pattern);\n                    unrelatedScore += 1;\n                }\n            }\n            const confidence = Math.min(unrelatedScore / 2, 1);\n            const isUnrelated = confidence > 0.5;\n            return {\n                isUnrelated,\n                patterns: flaggedPatterns,\n                confidence\n            };\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'Failed to check unrelated content', 'FilteringService', {\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            return {\n                isUnrelated: false,\n                patterns: [],\n                confidence: 0\n            };\n        }\n    }\n    async isValidHotdogContent(content) {\n        try {\n            const text = this.extractTextFromContent(content);\n            const processingNotes = [];\n            // Check for required hotdog-related terms\n            const requiredPatterns = await this.getPatternsByType('required');\n            let hasHotdogReference = false;\n            for (const pattern of requiredPatterns){\n                const regex = pattern.is_regex ? new RegExp(pattern.pattern, 'i') : new RegExp(pattern.pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n                if (regex.test(text.toLowerCase())) {\n                    hasHotdogReference = true;\n                    break;\n                }\n            }\n            if (!hasHotdogReference) {\n                processingNotes.push('No hotdog-related terms found');\n            }\n            // Run all filter checks\n            const [spamCheck, inappropriateCheck, unrelatedCheck] = await Promise.all([\n                this.isSpamContent(text),\n                this.isInappropriateContent(text),\n                this.isUnrelatedContent(text)\n            ]);\n            const flaggedPatterns = [\n                ...spamCheck.patterns,\n                ...inappropriateCheck.patterns,\n                ...unrelatedCheck.patterns\n            ];\n            // Calculate overall confidence\n            const baseConfidence = hasHotdogReference ? 0.7 : 0.3;\n            const spamPenalty = spamCheck.isSpam ? 0.3 : 0;\n            const inappropriatePenalty = inappropriateCheck.isInappropriate ? 0.5 : 0;\n            const unrelatedPenalty = unrelatedCheck.isUnrelated ? 0.4 : 0;\n            const confidence = Math.max(0, baseConfidence - spamPenalty - inappropriatePenalty - unrelatedPenalty);\n            const isValidHotdog = hasHotdogReference && !spamCheck.isSpam && !inappropriateCheck.isInappropriate && !unrelatedCheck.isUnrelated;\n            // Generate similarity hash\n            const similarityHash = this.generateSimilarityHash(text);\n            const analysis = {\n                is_spam: spamCheck.isSpam,\n                is_inappropriate: inappropriateCheck.isInappropriate,\n                is_unrelated: unrelatedCheck.isUnrelated,\n                is_valid_hotdog: isValidHotdog,\n                confidence_score: confidence,\n                flagged_patterns: flaggedPatterns,\n                processing_notes: processingNotes,\n                similarity_hash: similarityHash\n            };\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.INFO, 'Content analysis completed', 'FilteringService', {\n                analysis,\n                textLength: text.length,\n                hasHotdogReference,\n                extractedText: text.substring(0, 200),\n                baseConfidence,\n                spamPenalty,\n                inappropriatePenalty,\n                unrelatedPenalty,\n                finalConfidence: confidence,\n                spamPatterns: spamCheck.patterns,\n                inappropriatePatterns: inappropriateCheck.patterns,\n                unrelatedPatterns: unrelatedCheck.patterns\n            });\n            return analysis;\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'Failed to validate hotdog content', 'FilteringService', {\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            return {\n                is_spam: false,\n                is_inappropriate: false,\n                is_unrelated: false,\n                is_valid_hotdog: false,\n                confidence_score: 0,\n                flagged_patterns: [],\n                processing_notes: [\n                    'Analysis failed'\n                ],\n                similarity_hash: ''\n            };\n        }\n    }\n    async testFilterPattern(pattern, isRegex, testText) {\n        try {\n            let regex;\n            if (isRegex) {\n                regex = new RegExp(pattern, 'i');\n            } else {\n                regex = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n            }\n            const matches = regex.test(testText);\n            const matchedText = matches ? testText.match(regex)?.[0] : undefined;\n            return {\n                matches,\n                matchedText\n            };\n        } catch (error) {\n            return {\n                matches: false,\n                error: error instanceof Error ? error.message : 'Invalid pattern'\n            };\n        }\n    }\n    async getFilteringStats(startDate, endDate) {\n        try {\n            const dateFilter = startDate && endDate ? 'WHERE created_at >= $1 AND created_at <= $2' : 'WHERE created_at >= NOW() - INTERVAL \\'7 days\\'';\n            const params = startDate && endDate ? [\n                startDate,\n                endDate\n            ] : [];\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query(`\n        SELECT \n          COUNT(*) as total_processed,\n          COUNT(*) FILTER (WHERE is_approved = true AND is_flagged = false) as auto_approved,\n          COUNT(*) FILTER (WHERE is_approved = false AND is_flagged = false) as auto_rejected,\n          COUNT(*) FILTER (WHERE is_flagged = true) as flagged_for_review,\n          COUNT(*) FILTER (WHERE filter_results->>'is_spam' = 'true') as spam_detected,\n          COUNT(*) FILTER (WHERE filter_results->>'is_inappropriate' = 'true') as inappropriate_detected,\n          COUNT(*) FILTER (WHERE filter_results->>'is_unrelated' = 'true') as unrelated_detected,\n          COUNT(*) FILTER (WHERE duplicate_of IS NOT NULL) as duplicates_detected,\n          COUNT(*) FILTER (WHERE admin_override = true AND is_approved = true) as false_positives,\n          COUNT(*) FILTER (WHERE admin_override = true AND is_approved = false) as false_negatives\n        FROM content_analysis ${dateFilter}\n      `, params);\n            const stats = result.rows[0];\n            const totalProcessed = parseInt(stats.total_processed);\n            const falsePositives = parseInt(stats.false_positives);\n            const falseNegatives = parseInt(stats.false_negatives);\n            const accuracyRate = totalProcessed > 0 ? 1 - (falsePositives + falseNegatives) / totalProcessed : 0;\n            return {\n                total_processed: totalProcessed,\n                auto_approved: parseInt(stats.auto_approved),\n                auto_rejected: parseInt(stats.auto_rejected),\n                flagged_for_review: parseInt(stats.flagged_for_review),\n                spam_detected: parseInt(stats.spam_detected),\n                inappropriate_detected: parseInt(stats.inappropriate_detected),\n                unrelated_detected: parseInt(stats.unrelated_detected),\n                duplicates_detected: parseInt(stats.duplicates_detected),\n                false_positives: falsePositives,\n                false_negatives: falseNegatives,\n                accuracy_rate: accuracyRate\n            };\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'Failed to get filtering stats', 'FilteringService', {\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n            return {\n                total_processed: 0,\n                auto_approved: 0,\n                auto_rejected: 0,\n                flagged_for_review: 0,\n                spam_detected: 0,\n                inappropriate_detected: 0,\n                unrelated_detected: 0,\n                duplicates_detected: 0,\n                false_positives: 0,\n                false_negatives: 0,\n                accuracy_rate: 0\n            };\n        }\n    }\n    async getPatternsByType(type) {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.query('SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true', [\n                type\n            ]);\n            // If no patterns in database, use defaults\n            if (result.rows.length === 0) {\n                return await this.getDefaultPatterns(type);\n            }\n            return result.rows;\n        } catch (error) {\n            // Fall back to default patterns\n            return await this.getDefaultPatterns(type);\n        }\n    }\n    async getDefaultPatterns(type) {\n        const defaultPatterns = {\n            spam: FilteringService.DEFAULT_SPAM_PATTERNS,\n            inappropriate: FilteringService.DEFAULT_INAPPROPRIATE_PATTERNS,\n            unrelated: FilteringService.DEFAULT_UNRELATED_PATTERNS,\n            required: FilteringService.DEFAULT_REQUIRED_PATTERNS\n        };\n        const patterns = defaultPatterns[type] || [];\n        return patterns.map((pattern, index)=>({\n                id: index,\n                pattern_type: type,\n                pattern,\n                description: `Default ${type} pattern`,\n                is_regex: true,\n                is_enabled: true,\n                created_at: new Date(),\n                updated_at: new Date()\n            }));\n    }\n    extractTextFromContent(content) {\n        const textParts = [];\n        if (content.content_text) {\n            textParts.push(content.content_text);\n        }\n        if (content.original_author) {\n            textParts.push(content.original_author);\n        }\n        if (content.alt_text) {\n            textParts.push(content.alt_text);\n        }\n        if (content.caption) {\n            textParts.push(content.caption);\n        }\n        return textParts.join(' ').trim();\n    }\n    generateSimilarityHash(text) {\n        // Normalize text for similarity comparison\n        const normalized = text.toLowerCase().replace(/[^\\w\\s]/g, '') // Remove punctuation\n        .replace(/\\s+/g, ' ') // Normalize whitespace\n        .trim();\n        // Generate hash\n        return crypto__WEBPACK_IMPORTED_MODULE_2___default().createHash('md5').update(normalized).digest('hex');\n    }\n}\nconst filteringService = new FilteringService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/filtering.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/logging.ts":
/*!*********************************!*\
  !*** ./lib/services/logging.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   LoggingService: () => (/* binding */ LoggingService),\n/* harmony export */   loggingService: () => (/* binding */ loggingService)\n/* harmony export */ });\n/* harmony import */ var _lib_db_query_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/db-query-builder */ \"(rsc)/./lib/db-query-builder.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_0__, _lib_db__WEBPACK_IMPORTED_MODULE_1__]);\n([_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_0__, _lib_db__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\nvar LogLevel = /*#__PURE__*/ function(LogLevel) {\n    LogLevel[\"ERROR\"] = \"error\";\n    LogLevel[\"WARNING\"] = \"warning\";\n    LogLevel[\"INFO\"] = \"info\";\n    LogLevel[\"DEBUG\"] = \"debug\";\n    return LogLevel;\n}({});\nclass LoggingService {\n    constructor(){\n        this.maxBatchSize = 100;\n        this.flushInterval = 5000; // 5 seconds\n        this.logBuffer = [];\n        this.environment = \"development\" || 0;\n        this.startPeriodicFlush();\n    }\n    /**\n   * Log an error with context information\n   */ async logError(component, message, metadata, error, context) {\n        const logEntry = {\n            level: \"error\",\n            component,\n            message,\n            metadata: {\n                ...metadata,\n                ...error && {\n                    errorName: error.name,\n                    errorMessage: error.message,\n                    errorCode: error.code\n                }\n            },\n            timestamp: new Date(),\n            stackTrace: error?.stack,\n            userId: context?.userId,\n            sessionId: context?.sessionId,\n            requestId: context?.requestId,\n            environment: this.environment\n        };\n        await this.addToBuffer(logEntry);\n        // For errors, also log to console immediately\n        console.error(`[${component}] ${message}`, {\n            metadata,\n            stack: error?.stack,\n            timestamp: logEntry.timestamp.toISOString()\n        });\n    }\n    /**\n   * Log informational events\n   */ async logInfo(component, message, metadata, context) {\n        const logEntry = {\n            level: \"info\",\n            component,\n            message,\n            metadata,\n            timestamp: new Date(),\n            userId: context?.userId,\n            sessionId: context?.sessionId,\n            requestId: context?.requestId,\n            environment: this.environment\n        };\n        await this.addToBuffer(logEntry);\n        // Log to console in development\n        if (this.environment === 'development') {\n            console.log(`[${component}] ${message}`, metadata);\n        }\n    }\n    /**\n   * Log warning events\n   */ async logWarning(component, message, metadata, context) {\n        const logEntry = {\n            level: \"warning\",\n            component,\n            message,\n            metadata,\n            timestamp: new Date(),\n            userId: context?.userId,\n            sessionId: context?.sessionId,\n            requestId: context?.requestId,\n            environment: this.environment\n        };\n        await this.addToBuffer(logEntry);\n        // Log warnings to console\n        console.warn(`[${component}] ${message}`, metadata);\n    }\n    /**\n   * Log debug information (only in development)\n   */ async logDebug(component, message, metadata, context) {\n        if (this.environment !== 'development') {\n            return;\n        }\n        const logEntry = {\n            level: \"debug\",\n            component,\n            message,\n            metadata,\n            timestamp: new Date(),\n            userId: context?.userId,\n            sessionId: context?.sessionId,\n            requestId: context?.requestId,\n            environment: this.environment\n        };\n        await this.addToBuffer(logEntry);\n        console.debug(`[${component}] ${message}`, metadata);\n    }\n    /**\n   * Query logs with filtering options\n   */ async queryLogs(filters = {}) {\n        try {\n            const { level, component, dateRange, search, limit = 100, offset = 0, userId, requestId } = filters;\n            let queryBuilder = (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_0__.query)('system_logs').select([\n                'id',\n                'log_level as level',\n                'component',\n                'message',\n                'metadata',\n                'created_at as timestamp'\n            ]).orderBy('created_at', 'DESC');\n            // Apply filters\n            if (level && level.length > 0) {\n                queryBuilder = queryBuilder.whereIn('log_level', level);\n            }\n            if (component && component.length > 0) {\n                queryBuilder = queryBuilder.whereIn('component', component);\n            }\n            if (dateRange) {\n                queryBuilder = queryBuilder.where('created_at', '>=', dateRange.start).where('created_at', '<=', dateRange.end);\n            }\n            if (search) {\n                queryBuilder = queryBuilder.where('message', 'ILIKE', `%${search}%`);\n            }\n            if (userId) {\n                queryBuilder = queryBuilder.where('metadata', 'LIKE', `%\"userId\":\"${userId}\"%`);\n            }\n            if (requestId) {\n                queryBuilder = queryBuilder.where('metadata', 'LIKE', `%\"requestId\":\"${requestId}\"%`);\n            }\n            // Get total count\n            const countQuery = queryBuilder.clone().count('*');\n            const totalResult = await countQuery.first();\n            const total = parseInt(totalResult?.count || '0');\n            // Get paginated results\n            const results = await queryBuilder.limit(limit).offset(offset).execute();\n            const logs = results.map((row)=>{\n                const metadata = row.metadata || {};\n                return {\n                    id: row.id,\n                    level: row.level,\n                    component: row.component,\n                    message: row.message,\n                    metadata,\n                    timestamp: new Date(row.timestamp),\n                    stackTrace: metadata.stackTrace,\n                    userId: metadata.userId,\n                    sessionId: metadata.sessionId,\n                    requestId: metadata.requestId,\n                    environment: metadata.environment || 'development'\n                };\n            });\n            return {\n                logs,\n                total,\n                hasMore: offset + logs.length < total\n            };\n        } catch (error) {\n            console.error('Failed to query logs:', error);\n            throw new Error(`Log query failed: ${error.message}`);\n        }\n    }\n    /**\n   * Get log statistics\n   */ async getLogStatistics(dateRange) {\n        try {\n            let baseQuery = (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_0__.query)('system_logs');\n            if (dateRange) {\n                baseQuery = baseQuery.where('created_at', '>=', dateRange.start).where('created_at', '<=', dateRange.end);\n            }\n            // Get counts by level\n            const levelCounts = await baseQuery.clone().select([\n                'log_level'\n            ]).count('* as count').groupBy('log_level').execute();\n            const stats = {\n                totalLogs: 0,\n                errorCount: 0,\n                warningCount: 0,\n                infoCount: 0,\n                debugCount: 0\n            };\n            levelCounts.forEach((row)=>{\n                const count = parseInt(row.count);\n                stats.totalLogs += count;\n                switch(row.log_level){\n                    case \"error\":\n                        stats.errorCount = count;\n                        break;\n                    case \"warning\":\n                        stats.warningCount = count;\n                        break;\n                    case \"info\":\n                        stats.infoCount = count;\n                        break;\n                    case \"debug\":\n                        stats.debugCount = count;\n                        break;\n                }\n            });\n            // Get top components\n            const topComponents = await baseQuery.clone().select([\n                'component'\n            ]).count('* as count').groupBy('component').orderBy('count', 'DESC').limit(10).execute();\n            // Get recent errors\n            const recentErrorsQuery = await this.queryLogs({\n                level: [\n                    \"error\"\n                ],\n                limit: 10,\n                ...dateRange && {\n                    dateRange\n                }\n            });\n            return {\n                ...stats,\n                topComponents: topComponents.map((row)=>({\n                        component: row.component,\n                        count: parseInt(row.count)\n                    })),\n                recentErrors: recentErrorsQuery.logs\n            };\n        } catch (error) {\n            console.error('Failed to get log statistics:', error);\n            throw new Error(`Log statistics query failed: ${error.message}`);\n        }\n    }\n    /**\n   * Clean up old logs\n   */ async cleanupOldLogs(retentionDays = 30) {\n        try {\n            const cutoffDate = new Date();\n            cutoffDate.setDate(cutoffDate.getDate() - retentionDays);\n            const result = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_0__.query)('system_logs').where('created_at', '<', cutoffDate).delete();\n            await this.logInfo('LoggingService', `Cleaned up ${result} old log entries`, {\n                retentionDays,\n                cutoffDate: cutoffDate.toISOString()\n            });\n            return result;\n        } catch (error) {\n            await this.logError('LoggingService', 'Failed to cleanup old logs', {\n                retentionDays,\n                error: error.message\n            }, error);\n            throw error;\n        }\n    }\n    /**\n   * Export logs to JSON\n   */ async exportLogs(filters = {}) {\n        try {\n            const result = await this.queryLogs({\n                ...filters,\n                limit: 10000 // Large limit for export\n            });\n            return JSON.stringify(result.logs, null, 2);\n        } catch (error) {\n            await this.logError('LoggingService', 'Failed to export logs', {\n                filters\n            }, error);\n            throw error;\n        }\n    }\n    /**\n   * Add log entry to buffer for batch processing\n   */ async addToBuffer(logEntry) {\n        this.logBuffer.push(logEntry);\n        // If buffer is full, flush immediately\n        if (this.logBuffer.length >= this.maxBatchSize) {\n            await this.flushBuffer();\n        }\n    }\n    /**\n   * Flush log buffer to database\n   */ async flushBuffer() {\n        if (this.logBuffer.length === 0) {\n            return;\n        }\n        const logsToFlush = [\n            ...this.logBuffer\n        ];\n        this.logBuffer = [];\n        try {\n            // Ensure logs table exists (using legacy schema)\n            await this.ensureLogsTable();\n            // Insert logs in batch using actual schema columns only\n            await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_0__.insert)('system_logs').values(logsToFlush.map((log)=>({\n                    log_level: log.level,\n                    component: log.component.substring(0, 100),\n                    message: log.message,\n                    metadata: JSON.stringify({\n                        ...log.metadata || {},\n                        // Include additional fields in metadata since they don't have columns\n                        ...log.stackTrace && {\n                            stackTrace: log.stackTrace\n                        },\n                        ...log.userId && {\n                            userId: log.userId\n                        },\n                        ...log.sessionId && {\n                            sessionId: log.sessionId\n                        },\n                        ...log.requestId && {\n                            requestId: log.requestId\n                        },\n                        ...log.environment && {\n                            environment: log.environment\n                        }\n                    })\n                }))).execute();\n        } catch (error) {\n            console.error('Failed to flush log buffer:', error);\n            // Re-add logs to buffer to retry later\n            this.logBuffer.unshift(...logsToFlush);\n        }\n    }\n    /**\n   * Start periodic buffer flushing\n   */ startPeriodicFlush() {\n        if (this.flushTimer) {\n            clearInterval(this.flushTimer);\n        }\n        this.flushTimer = setInterval(async ()=>{\n            await this.flushBuffer();\n        }, this.flushInterval);\n    }\n    /**\n   * Ensure logs table exists (do nothing - table created by migration)\n   */ async ensureLogsTable() {\n        // Table is created by database migration, no need to create here\n        // Just verify it exists and is accessible\n        try {\n            await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.query(`SELECT 1 FROM system_logs LIMIT 1`);\n        } catch (error) {\n            console.error('system_logs table not accessible:', error);\n        }\n    }\n    /**\n   * Graceful shutdown - flush remaining logs\n   */ async shutdown() {\n        if (this.flushTimer) {\n            clearInterval(this.flushTimer);\n        }\n        await this.flushBuffer();\n    }\n}\n// Export singleton instance\nconst loggingService = new LoggingService();\n// Graceful shutdown handling\nif (typeof process !== 'undefined') {\n    process.on('SIGTERM', async ()=>{\n        await loggingService.shutdown();\n    });\n    process.on('SIGINT', async ()=>{\n        await loggingService.shutdown();\n    });\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/logging.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/metrics.ts":
/*!*********************************!*\
  !*** ./lib/services/metrics.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MetricsService: () => (/* binding */ MetricsService),\n/* harmony export */   metricsService: () => (/* binding */ metricsService)\n/* harmony export */ });\n/* harmony import */ var _lib_db_query_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/db-query-builder */ \"(rsc)/./lib/db-query-builder.ts\");\n/* harmony import */ var _logging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logging */ \"(rsc)/./lib/services/logging.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_0__, _logging__WEBPACK_IMPORTED_MODULE_1__, _lib_db__WEBPACK_IMPORTED_MODULE_2__]);\n([_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_0__, _logging__WEBPACK_IMPORTED_MODULE_1__, _lib_db__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nclass MetricsService {\n    constructor(){\n        this.maxBatchSize = 50;\n        this.flushInterval = 10000; // 10 seconds\n        this.metricBuffer = [];\n        this.environment = \"development\" || 0;\n        this.startPeriodicFlush();\n        this.ensureMetricsTable();\n    }\n    /**\n   * Record API response time and status\n   */ async recordAPIMetric(platform, endpoint, responseTime, statusCode, rateLimitRemaining, quotaUsed, metadata) {\n        const metric = {\n            name: 'api_response_time',\n            value: responseTime,\n            unit: 'ms',\n            timestamp: new Date(),\n            platform,\n            endpoint,\n            responseTime,\n            statusCode,\n            rateLimitRemaining,\n            quotaUsed,\n            tags: {\n                platform,\n                endpoint: endpoint.replace(/\\/\\d+/g, '/:id'),\n                status: statusCode >= 200 && statusCode < 300 ? 'success' : 'error'\n            },\n            metadata: {\n                statusCode,\n                rateLimitRemaining,\n                quotaUsed,\n                ...metadata\n            }\n        };\n        await this.addToBuffer(metric);\n    }\n    /**\n   * Record database query performance\n   */ async recordDatabaseQueryMetric(query, duration, success, rowCount, metadata) {\n        const metric = {\n            name: 'database_query_time',\n            value: duration,\n            unit: 'ms',\n            timestamp: new Date(),\n            component: 'database',\n            operation: this.normalizeQuery(query),\n            duration,\n            success,\n            tags: {\n                operation: this.normalizeQuery(query),\n                status: success ? 'success' : 'error'\n            },\n            metadata: {\n                query: query.substring(0, 500),\n                rowCount,\n                ...metadata\n            }\n        };\n        await this.addToBuffer(metric);\n    }\n    /**\n   * Record content processing performance\n   */ async recordContentProcessingMetric(operation, duration, success, itemsProcessed = 1, metadata) {\n        const metric = {\n            name: 'content_processing_time',\n            value: duration,\n            unit: 'ms',\n            timestamp: new Date(),\n            component: 'content_processor',\n            operation,\n            duration,\n            success,\n            tags: {\n                operation,\n                status: success ? 'success' : 'error'\n            },\n            metadata: {\n                itemsProcessed,\n                ...metadata\n            }\n        };\n        await this.addToBuffer(metric);\n        // Also record throughput\n        const throughputMetric = {\n            name: 'content_processing_throughput',\n            value: itemsProcessed / (duration / 1000),\n            unit: 'items/sec',\n            timestamp: new Date(),\n            metric: 'content_processed',\n            count: itemsProcessed,\n            period: 'minute',\n            tags: {\n                operation,\n                status: success ? 'success' : 'error'\n            }\n        };\n        await this.addToBuffer(throughputMetric);\n    }\n    /**\n   * Record system resource usage\n   */ async recordSystemMetrics() {\n        try {\n            // Memory metrics\n            const memoryUsage = process.memoryUsage();\n            const memoryMB = {\n                rss: Math.round(memoryUsage.rss / 1024 / 1024),\n                heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024),\n                heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024),\n                external: Math.round(memoryUsage.external / 1024 / 1024)\n            };\n            const memoryPercentage = memoryMB.heapUsed / memoryMB.heapTotal * 100;\n            await this.addToBuffer({\n                name: 'system_memory_usage',\n                value: memoryMB.heapUsed,\n                unit: 'MB',\n                timestamp: new Date(),\n                tags: {\n                    metric: 'memory',\n                    type: 'heap_used'\n                },\n                metadata: memoryMB\n            });\n            // CPU metrics\n            const cpuUsage = process.cpuUsage();\n            const cpuPercent = (cpuUsage.user + cpuUsage.system) / 1000000 * 100 // Convert to percentage\n            ;\n            await this.addToBuffer({\n                name: 'system_cpu_usage',\n                value: cpuPercent,\n                unit: 'percent',\n                timestamp: new Date(),\n                tags: {\n                    metric: 'cpu'\n                },\n                metadata: {\n                    user: Math.round(cpuUsage.user / 1000),\n                    system: Math.round(cpuUsage.system / 1000)\n                }\n            });\n            // Process uptime\n            await this.addToBuffer({\n                name: 'process_uptime',\n                value: process.uptime(),\n                unit: 'seconds',\n                timestamp: new Date(),\n                tags: {\n                    metric: 'uptime'\n                }\n            });\n        } catch (error) {\n            await _logging__WEBPACK_IMPORTED_MODULE_1__.loggingService.logError('MetricsService', 'Failed to record system metrics', {\n                error: error.message\n            }, error);\n        }\n    }\n    /**\n   * Record business KPI metrics\n   */ async recordBusinessMetric(metric, value, period = 'hour', metadata) {\n        const businessMetric = {\n            name: `business_${metric}`,\n            value,\n            unit: metric === 'error_rate' ? 'percent' : 'count',\n            timestamp: new Date(),\n            metric,\n            count: metric === 'error_rate' ? 0 : value,\n            period,\n            tags: {\n                metric,\n                period\n            },\n            metadata\n        };\n        await this.addToBuffer(businessMetric);\n    }\n    /**\n   * Record custom metric\n   */ async recordCustomMetric(name, value, unit, tags, metadata) {\n        const metric = {\n            name,\n            value,\n            unit,\n            timestamp: new Date(),\n            tags,\n            metadata\n        };\n        await this.addToBuffer(metric);\n    }\n    /**\n   * Query metrics with filtering and aggregation\n   */ async queryMetrics(filters = {}) {\n        try {\n            const { name, tags, dateRange, limit = 100, offset = 0, aggregation, groupBy } = filters;\n            let queryBuilder = (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_0__.query)('system_metrics').select([\n                'id',\n                'name',\n                'value',\n                'unit',\n                'timestamp',\n                'tags',\n                'metadata'\n            ]).orderBy('timestamp', 'DESC');\n            // Apply filters\n            if (name && name.length > 0) {\n                queryBuilder = queryBuilder.whereIn('name', name);\n            }\n            if (dateRange) {\n                queryBuilder = queryBuilder.where('timestamp', '>=', dateRange.start).where('timestamp', '<=', dateRange.end);\n            }\n            if (tags) {\n                for (const [key, value] of Object.entries(tags)){\n                    queryBuilder = queryBuilder.whereRaw(`tags->? = ?`, [\n                        key,\n                        value\n                    ]);\n                }\n            }\n            // Handle aggregation\n            if (aggregation && !groupBy) {\n                const aggregatedQuery = queryBuilder.clone();\n                let selectField;\n                switch(aggregation){\n                    case 'avg':\n                        selectField = 'AVG(value) as aggregated_value';\n                        break;\n                    case 'sum':\n                        selectField = 'SUM(value) as aggregated_value';\n                        break;\n                    case 'count':\n                        selectField = 'COUNT(*) as aggregated_value';\n                        break;\n                    case 'min':\n                        selectField = 'MIN(value) as aggregated_value';\n                        break;\n                    case 'max':\n                        selectField = 'MAX(value) as aggregated_value';\n                        break;\n                    default:\n                        selectField = 'AVG(value) as aggregated_value';\n                }\n                const aggregatedResult = await aggregatedQuery.select([\n                    selectField\n                ]).first();\n                return {\n                    metrics: [],\n                    total: 0,\n                    hasMore: false,\n                    aggregatedValue: parseFloat(aggregatedResult?.aggregated_value || '0')\n                };\n            }\n            // Get total count\n            const totalResult = await queryBuilder.clone().count('*').first();\n            const total = parseInt(totalResult?.count || '0');\n            // Get paginated results\n            const results = await queryBuilder.limit(limit).offset(offset).execute();\n            const metrics = results.map((row)=>({\n                    id: row.id,\n                    name: row.name,\n                    value: parseFloat(row.value),\n                    unit: row.unit,\n                    timestamp: new Date(row.timestamp),\n                    tags: row.tags || {},\n                    metadata: row.metadata || {}\n                }));\n            return {\n                metrics,\n                total,\n                hasMore: offset + metrics.length < total\n            };\n        } catch (error) {\n            await _logging__WEBPACK_IMPORTED_MODULE_1__.loggingService.logError('MetricsService', 'Failed to query metrics', {\n                filters,\n                error: error.message\n            }, error);\n            throw error;\n        }\n    }\n    /**\n   * Get comprehensive metrics summary\n   */ async getMetricsSummary() {\n        try {\n            const now = new Date();\n            const last24h = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n            const last1h = new Date(now.getTime() - 60 * 60 * 1000);\n            // Get total metrics count\n            const totalResult = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_0__.query)('system_metrics').count('*').first();\n            const totalMetrics = parseInt(totalResult?.count || '0');\n            // Get recent API response times\n            const apiMetrics = await this.queryMetrics({\n                name: [\n                    'api_response_time'\n                ],\n                dateRange: {\n                    start: last1h,\n                    end: now\n                },\n                limit: 1000\n            });\n            const apiResponseTimes = {\n                reddit: 0,\n                instagram: 0,\n                tiktok: 0\n            };\n            const apiCounts = {\n                reddit: 0,\n                instagram: 0,\n                tiktok: 0\n            };\n            apiMetrics.metrics.forEach((metric)=>{\n                const platform = metric.tags?.platform;\n                if (platform && apiResponseTimes.hasOwnProperty(platform)) {\n                    apiResponseTimes[platform] += metric.value;\n                    apiCounts[platform]++;\n                }\n            });\n            // Calculate averages\n            Object.keys(apiResponseTimes).forEach((platform)=>{\n                const key = platform;\n                if (apiCounts[key] > 0) {\n                    apiResponseTimes[key] = Math.round(apiResponseTimes[key] / apiCounts[key]);\n                }\n            });\n            // Get recent system metrics\n            const systemMetrics = await this.queryMetrics({\n                name: [\n                    'system_memory_usage',\n                    'system_cpu_usage'\n                ],\n                dateRange: {\n                    start: last1h,\n                    end: now\n                },\n                limit: 10\n            });\n            let memoryUsagePercent = 0;\n            let cpuUsagePercent = 0;\n            systemMetrics.metrics.forEach((metric)=>{\n                if (metric.name === 'system_memory_usage' && metric.metadata?.heapTotal) {\n                    memoryUsagePercent = Math.round(metric.value / metric.metadata.heapTotal * 100);\n                } else if (metric.name === 'system_cpu_usage') {\n                    cpuUsagePercent = Math.round(metric.value);\n                }\n            });\n            // Get business metrics\n            const contentProcessed = await this.queryMetrics({\n                name: [\n                    'business_content_processed'\n                ],\n                dateRange: {\n                    start: last24h,\n                    end: now\n                },\n                aggregation: 'sum'\n            });\n            const postsCreated = await this.queryMetrics({\n                name: [\n                    'business_posts_created'\n                ],\n                dateRange: {\n                    start: last24h,\n                    end: now\n                },\n                aggregation: 'sum'\n            });\n            const errorRate = await this.queryMetrics({\n                name: [\n                    'business_error_rate'\n                ],\n                dateRange: {\n                    start: last1h,\n                    end: now\n                },\n                aggregation: 'avg'\n            });\n            // Get current queue size from database\n            const queueResult = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_0__.query)('content_queue').where('status', 'pending').count('*').first();\n            const queueSize = parseInt(queueResult?.count || '0');\n            // Get top slow operations\n            const slowOperations = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_0__.query)('system_metrics').select([\n                'tags',\n                'AVG(value) as avg_time',\n                'COUNT(*) as count'\n            ]).where('name', 'content_processing_time').where('timestamp', '>', last24h).groupBy('tags').orderBy('avg_time', 'DESC').limit(5).execute();\n            const topSlowOperations = slowOperations.map((row)=>({\n                    operation: row.tags?.operation || 'unknown',\n                    avgResponseTime: Math.round(parseFloat(row.avg_time || '0')),\n                    count: parseInt(row.count || '0')\n                }));\n            return {\n                totalMetrics,\n                recentAPIResponseTimes: apiResponseTimes,\n                systemResources: {\n                    memoryUsagePercent,\n                    cpuUsagePercent,\n                    diskUsagePercent: 0 // TODO: Implement disk usage tracking\n                },\n                businessKPIs: {\n                    contentProcessedLast24h: Math.round(contentProcessed.aggregatedValue || 0),\n                    postsCreatedLast24h: Math.round(postsCreated.aggregatedValue || 0),\n                    errorRateLast1h: Math.round((errorRate.aggregatedValue || 0) * 100) / 100,\n                    queueSize\n                },\n                topSlowOperations\n            };\n        } catch (error) {\n            await _logging__WEBPACK_IMPORTED_MODULE_1__.loggingService.logError('MetricsService', 'Failed to get metrics summary', {\n                error: error.message\n            }, error);\n            throw error;\n        }\n    }\n    /**\n   * Clean up old metrics\n   */ async cleanupOldMetrics(retentionDays = 7) {\n        try {\n            const cutoffDate = new Date();\n            cutoffDate.setDate(cutoffDate.getDate() - retentionDays);\n            const result = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_0__.query)('system_metrics').where('timestamp', '<', cutoffDate).delete();\n            await _logging__WEBPACK_IMPORTED_MODULE_1__.loggingService.logInfo('MetricsService', `Cleaned up ${result} old metric entries`, {\n                retentionDays,\n                cutoffDate: cutoffDate.toISOString()\n            });\n            return result;\n        } catch (error) {\n            await _logging__WEBPACK_IMPORTED_MODULE_1__.loggingService.logError('MetricsService', 'Failed to cleanup old metrics', {\n                retentionDays,\n                error: error.message\n            }, error);\n            throw error;\n        }\n    }\n    /**\n   * Export metrics to JSON\n   */ async exportMetrics(filters = {}) {\n        try {\n            const result = await this.queryMetrics({\n                ...filters,\n                limit: 10000 // Large limit for export\n            });\n            return JSON.stringify(result.metrics, null, 2);\n        } catch (error) {\n            await _logging__WEBPACK_IMPORTED_MODULE_1__.loggingService.logError('MetricsService', 'Failed to export metrics', {\n                filters\n            }, error);\n            throw error;\n        }\n    }\n    /**\n   * Get real-time performance statistics\n   */ async getPerformanceStats() {\n        try {\n            const now = new Date();\n            const last5min = new Date(now.getTime() - 5 * 60 * 1000);\n            // API response times\n            const apiStats = await this.queryMetrics({\n                name: [\n                    'api_response_time'\n                ],\n                dateRange: {\n                    start: last5min,\n                    end: now\n                },\n                aggregation: 'avg'\n            });\n            // Database query times\n            const dbStats = await this.queryMetrics({\n                name: [\n                    'database_query_time'\n                ],\n                dateRange: {\n                    start: last5min,\n                    end: now\n                },\n                aggregation: 'avg'\n            });\n            // Content processing times\n            const processingStats = await this.queryMetrics({\n                name: [\n                    'content_processing_time'\n                ],\n                dateRange: {\n                    start: last5min,\n                    end: now\n                },\n                aggregation: 'avg'\n            });\n            // Success rate calculation\n            const successMetrics = await this.queryMetrics({\n                tags: {\n                    status: 'success'\n                },\n                dateRange: {\n                    start: last5min,\n                    end: now\n                }\n            });\n            const totalMetrics = await this.queryMetrics({\n                dateRange: {\n                    start: last5min,\n                    end: now\n                }\n            });\n            const successRate = totalMetrics.total > 0 ? successMetrics.total / totalMetrics.total * 100 : 100;\n            // Requests per minute\n            const requestsPerMinute = Math.round(totalMetrics.total / 5) // 5 minute window\n            ;\n            return {\n                avgAPIResponseTime: Math.round(apiStats.aggregatedValue || 0),\n                avgDatabaseQueryTime: Math.round(dbStats.aggregatedValue || 0),\n                avgContentProcessingTime: Math.round(processingStats.aggregatedValue || 0),\n                successRate: Math.round(successRate * 100) / 100,\n                requestsPerMinute\n            };\n        } catch (error) {\n            await _logging__WEBPACK_IMPORTED_MODULE_1__.loggingService.logError('MetricsService', 'Failed to get performance stats', {\n                error: error.message\n            }, error);\n            return {\n                avgAPIResponseTime: 0,\n                avgDatabaseQueryTime: 0,\n                avgContentProcessingTime: 0,\n                successRate: 0,\n                requestsPerMinute: 0\n            };\n        }\n    }\n    // Private helper methods\n    async addToBuffer(metric) {\n        this.metricBuffer.push(metric);\n        // If buffer is full, flush immediately\n        if (this.metricBuffer.length >= this.maxBatchSize) {\n            await this.flushBuffer();\n        }\n    }\n    async flushBuffer() {\n        if (this.metricBuffer.length === 0) {\n            return;\n        }\n        const metricsToFlush = [\n            ...this.metricBuffer\n        ];\n        this.metricBuffer = [];\n        try {\n            await this.ensureMetricsTable();\n            // Insert metrics in batch\n            await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_0__.insert)('system_metrics').values(metricsToFlush.map((metric)=>({\n                    name: metric.name,\n                    value: metric.value,\n                    unit: metric.unit,\n                    timestamp: metric.timestamp,\n                    tags: JSON.stringify(metric.tags || {}),\n                    metadata: JSON.stringify(metric.metadata || {}),\n                    environment: this.environment\n                }))).execute();\n        } catch (error) {\n            console.error('Failed to flush metrics buffer:', error);\n            // Re-add metrics to buffer to retry later\n            this.metricBuffer.unshift(...metricsToFlush);\n        }\n    }\n    startPeriodicFlush() {\n        if (this.flushTimer) {\n            clearInterval(this.flushTimer);\n        }\n        this.flushTimer = setInterval(async ()=>{\n            await this.flushBuffer();\n        }, this.flushInterval);\n        // Also record system metrics periodically\n        setInterval(async ()=>{\n            await this.recordSystemMetrics();\n        }, 30000); // Every 30 seconds\n    }\n    async ensureMetricsTable() {\n        try {\n            await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(`\n        CREATE TABLE IF NOT EXISTS system_metrics (\n          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n          name VARCHAR(100) NOT NULL,\n          value NUMERIC NOT NULL,\n          unit VARCHAR(50) NOT NULL,\n          timestamp TIMESTAMP WITH TIME ZONE NOT NULL,\n          tags JSONB DEFAULT '{}',\n          metadata JSONB DEFAULT '{}',  \n          environment VARCHAR(50) NOT NULL,\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        )\n      `);\n            // Create indexes for performance\n            await _lib_db__WEBPACK_IMPORTED_MODULE_2__.db.query(`\n        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n        CREATE INDEX IF NOT EXISTS idx_system_metrics_timestamp ON system_metrics(timestamp DESC);\n        CREATE INDEX IF NOT EXISTS idx_system_metrics_tags ON system_metrics USING GIN(tags);\n        CREATE INDEX IF NOT EXISTS idx_system_metrics_environment ON system_metrics(environment);\n        CREATE INDEX IF NOT EXISTS idx_system_metrics_name_timestamp ON system_metrics(name, timestamp DESC);\n      `);\n        } catch (error) {\n            console.error('Failed to ensure metrics table exists:', error);\n        }\n    }\n    normalizeQuery(query) {\n        // Normalize SQL queries for consistent metrics\n        const normalized = query.toLowerCase().replace(/\\s+/g, ' ').replace(/\\b\\d+\\b/g, '?') // Replace numbers with placeholders\n        .replace(/'[^']*'/g, '?') // Replace string literals\n        .substring(0, 100) // Limit length\n        ;\n        const operation = normalized.split(' ')[0] || 'unknown';\n        return operation;\n    }\n    /**\n   * Graceful shutdown - flush remaining metrics\n   */ async shutdown() {\n        if (this.flushTimer) {\n            clearInterval(this.flushTimer);\n        }\n        await this.flushBuffer();\n    }\n}\n// Export singleton instance\nconst metricsService = new MetricsService();\n// Graceful shutdown handling\nif (typeof process !== 'undefined') {\n    process.on('SIGTERM', async ()=>{\n        await metricsService.shutdown();\n    });\n    process.on('SIGINT', async ()=>{\n        await metricsService.shutdown();\n    });\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/metrics.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/youtube-monitoring.ts":
/*!********************************************!*\
  !*** ./lib/services/youtube-monitoring.ts ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   YouTubeMonitoringService: () => (/* binding */ YouTubeMonitoringService),\n/* harmony export */   youtubeMonitoringService: () => (/* binding */ youtubeMonitoringService)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/db-query-builder */ \"(rsc)/./lib/db-query-builder.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_0__, _lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__]);\n([_lib_db__WEBPACK_IMPORTED_MODULE_0__, _lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nclass YouTubeMonitoringService {\n    /**\n   * Record an API request and its outcome\n   */ async recordApiRequest(success, responseTime, errorType) {\n        try {\n            this.metrics.requestCount++;\n            this.metrics.lastRequestTime = new Date();\n            if (success) {\n                this.metrics.successCount++;\n            } else {\n                this.metrics.errorCount++;\n                this.metrics.lastErrorTime = new Date();\n                this.metrics.lastErrorType = errorType;\n            }\n            // Update average response time\n            this.metrics.averageResponseTime = (this.metrics.averageResponseTime * (this.metrics.requestCount - 1) + responseTime) / this.metrics.requestCount;\n            // Store in database for historical tracking\n            await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.insert)('system_metrics').values({\n                metric_name: 'youtube_api_request',\n                metric_value: responseTime,\n                metric_unit: 'ms',\n                component: 'YouTubeService',\n                metadata: JSON.stringify({\n                    success,\n                    errorType,\n                    requestCount: this.metrics.requestCount,\n                    successRate: this.getSuccessRate()\n                }),\n                created_at: new Date()\n            });\n            // Log significant events\n            if (!success) {\n                await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.WARNING, 'YOUTUBE_API_ERROR', `YouTube API request failed: ${errorType || 'unknown error'}`, {\n                    responseTime,\n                    errorType,\n                    successRate: this.getSuccessRate(),\n                    requestCount: this.metrics.requestCount\n                });\n            }\n            // Alert on high error rates\n            if (this.metrics.requestCount >= 10 && this.getSuccessRate() < 0.8) {\n                await this.triggerAlert('high_error_rate', `YouTube API success rate dropped to ${(this.getSuccessRate() * 100).toFixed(1)}%`);\n            }\n            // Alert on high latency\n            if (responseTime > 10000) {\n                await this.triggerAlert('high_latency', `YouTube API latency is high: ${responseTime}ms`);\n            }\n        } catch (error) {\n            console.error('Failed to record YouTube API request:', error);\n        }\n    }\n    /**\n   * Record quota limit hit\n   */ async recordQuotaLimitHit(resetTime) {\n        try {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.WARNING, 'YOUTUBE_QUOTA_LIMIT_HIT', `YouTube API quota limit reached. Reset at ${resetTime.toISOString()}`, {\n                quotaUsed: this.metrics.quotaUsed,\n                resetTime: resetTime.toISOString(),\n                requestCount: this.metrics.requestCount\n            });\n            await this.triggerAlert('quota_limit', `YouTube API quota exhausted. Resets at ${resetTime.toLocaleString()}`);\n        } catch (error) {\n            console.error('Failed to record YouTube quota limit hit:', error);\n        }\n    }\n    /**\n   * Record successful scan completion\n   */ async recordScanCompletion(videosProcessed, success, errors = []) {\n        try {\n            await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.insert)('system_metrics').values({\n                metric_name: 'youtube_scan_completion',\n                metric_value: videosProcessed,\n                metric_unit: 'videos',\n                component: 'YouTubeScanningService',\n                metadata: JSON.stringify({\n                    success,\n                    videosProcessed,\n                    errorCount: errors.length,\n                    errors: errors.slice(0, 5) // Limit stored errors\n                }),\n                created_at: new Date()\n            });\n            if (success) {\n                await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.INFO, 'YOUTUBE_SCAN_SUCCESS', `YouTube scan completed successfully: ${videosProcessed} videos processed`, {\n                    videosProcessed,\n                    errorCount: errors.length\n                });\n            } else {\n                await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR, 'YOUTUBE_SCAN_FAILURE', `YouTube scan failed with ${errors.length} errors`, {\n                    videosProcessed,\n                    errors: errors.slice(0, 3)\n                });\n            }\n        } catch (error) {\n            console.error('Failed to record YouTube scan completion:', error);\n        }\n    }\n    /**\n   * Update quota usage metrics\n   */ updateQuotaUsage(used, remaining) {\n        this.metrics.quotaUsed = used;\n        this.metrics.quotaRemaining = remaining;\n    }\n    /**\n   * Get current API metrics\n   */ getMetrics() {\n        return {\n            ...this.metrics\n        };\n    }\n    /**\n   * Get health status\n   */ async getHealthMetrics() {\n        try {\n            // Get recent error logs\n            const recentErrors = await this.getRecentErrors();\n            const errorRate = this.getErrorRate();\n            const quotaUsagePercent = this.metrics.quotaUsed / (this.metrics.quotaUsed + this.metrics.quotaRemaining) * 100;\n            return {\n                isHealthy: errorRate < 0.2 && this.metrics.averageResponseTime < 5000 && quotaUsagePercent < 90,\n                uptime: this.calculateUptime(),\n                errorRate,\n                averageLatency: this.metrics.averageResponseTime,\n                quotaUsagePercent,\n                recentErrors,\n                lastSuccessfulRequest: this.metrics.lastRequestTime\n            };\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR, 'YOUTUBE_HEALTH_CHECK_ERROR', `Failed to get YouTube health metrics: ${error.message}`, {\n                error: error.message\n            });\n            return {\n                isHealthy: false,\n                uptime: 0,\n                errorRate: 1,\n                averageLatency: 0,\n                quotaUsagePercent: 0,\n                recentErrors: [\n                    error.message\n                ]\n            };\n        }\n    }\n    /**\n   * Get success rate percentage\n   */ getSuccessRate() {\n        if (this.metrics.requestCount === 0) return 1;\n        return this.metrics.successCount / this.metrics.requestCount;\n    }\n    /**\n   * Get error rate percentage  \n   */ getErrorRate() {\n        if (this.metrics.requestCount === 0) return 0;\n        return this.metrics.errorCount / this.metrics.requestCount;\n    }\n    /**\n   * Calculate service uptime based on recent successful requests\n   */ calculateUptime() {\n        if (!this.metrics.lastRequestTime) return 0;\n        const now = new Date();\n        const timeSinceLastRequest = now.getTime() - this.metrics.lastRequestTime.getTime();\n        // Consider service \"up\" if last request was within 1 hour and successful\n        if (timeSinceLastRequest < 60 * 60 * 1000 && this.getSuccessRate() > 0.5) {\n            return 99.9 // High uptime\n            ;\n        }\n        return Math.max(0, 100 - this.getErrorRate() * 100);\n    }\n    /**\n   * Get recent error messages\n   */ async getRecentErrors() {\n        try {\n            const recentLogs = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_1__.query)('system_logs').select([\n                'message'\n            ]).where('component', 'YouTubeService').where('log_level', 'error').where('created_at', '>', new Date(Date.now() - 60 * 60 * 1000)) // Last hour\n            .orderBy('created_at', 'desc').limit(5);\n            return recentLogs.map((log)=>log.message);\n        } catch (error) {\n            return [\n                `Failed to fetch recent errors: ${error.message}`\n            ];\n        }\n    }\n    /**\n   * Trigger monitoring alerts\n   */ async triggerAlert(alertType, message) {\n        try {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR, 'YOUTUBE_ALERT_TRIGGERED', message, {\n                alertType,\n                metrics: this.getMetrics(),\n                timestamp: new Date().toISOString()\n            });\n            // Could integrate with external alerting services here\n            console.warn(`🚨 YouTube Alert [${alertType}]: ${message}`);\n        } catch (error) {\n            console.error('Failed to trigger YouTube alert:', error);\n        }\n    }\n    /**\n   * Reset metrics (useful for testing or daily resets)\n   */ resetMetrics() {\n        this.metrics = {\n            requestCount: 0,\n            successCount: 0,\n            errorCount: 0,\n            averageResponseTime: 0,\n            quotaUsed: 0,\n            quotaRemaining: 10000\n        };\n    }\n    constructor(){\n        this.metrics = {\n            requestCount: 0,\n            successCount: 0,\n            errorCount: 0,\n            averageResponseTime: 0,\n            quotaUsed: 0,\n            quotaRemaining: 10000\n        };\n    }\n}\nconst youtubeMonitoringService = new YouTubeMonitoringService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/youtube-monitoring.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/youtube-scanning.ts":
/*!******************************************!*\
  !*** ./lib/services/youtube-scanning.ts ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   YouTubeScanningService: () => (/* binding */ YouTubeScanningService),\n/* harmony export */   youtubeScanningService: () => (/* binding */ youtubeScanningService)\n/* harmony export */ });\n/* harmony import */ var _youtube__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./youtube */ \"(rsc)/./lib/services/youtube.ts\");\n/* harmony import */ var _filtering__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./filtering */ \"(rsc)/./lib/services/filtering.ts\");\n/* harmony import */ var _content_processor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./content-processor */ \"(rsc)/./lib/services/content-processor.ts\");\n/* harmony import */ var _duplicate_detection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./duplicate-detection */ \"(rsc)/./lib/services/duplicate-detection.ts\");\n/* harmony import */ var _youtube_monitoring__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./youtube-monitoring */ \"(rsc)/./lib/services/youtube-monitoring.ts\");\n/* harmony import */ var _lib_db_query_builder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/db-query-builder */ \"(rsc)/./lib/db-query-builder.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_youtube__WEBPACK_IMPORTED_MODULE_0__, _filtering__WEBPACK_IMPORTED_MODULE_1__, _content_processor__WEBPACK_IMPORTED_MODULE_2__, _duplicate_detection__WEBPACK_IMPORTED_MODULE_3__, _youtube_monitoring__WEBPACK_IMPORTED_MODULE_4__, _lib_db_query_builder__WEBPACK_IMPORTED_MODULE_5__, _lib_db__WEBPACK_IMPORTED_MODULE_6__]);\n([_youtube__WEBPACK_IMPORTED_MODULE_0__, _filtering__WEBPACK_IMPORTED_MODULE_1__, _content_processor__WEBPACK_IMPORTED_MODULE_2__, _duplicate_detection__WEBPACK_IMPORTED_MODULE_3__, _youtube_monitoring__WEBPACK_IMPORTED_MODULE_4__, _lib_db_query_builder__WEBPACK_IMPORTED_MODULE_5__, _lib_db__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\nclass YouTubeScanningService {\n    constructor(){\n        this.isScanning = false;\n        this.youtubeService = new _youtube__WEBPACK_IMPORTED_MODULE_0__.YouTubeService();\n        this.filteringService = new _filtering__WEBPACK_IMPORTED_MODULE_1__.FilteringService();\n        this.contentProcessor = new _content_processor__WEBPACK_IMPORTED_MODULE_2__.ContentProcessor();\n        this.duplicateDetection = new _duplicate_detection__WEBPACK_IMPORTED_MODULE_3__.DuplicateDetectionService();\n    }\n    /**\n   * Start automated YouTube scanning\n   */ async startAutomatedScanning() {\n        try {\n            const config = await this.getScanConfig();\n            if (!config.isEnabled) {\n                await (0,_lib_db__WEBPACK_IMPORTED_MODULE_6__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_7__.LogLevel.INFO, 'YOUTUBE_SCAN_DISABLED', 'YouTube scanning is disabled in configuration');\n                return;\n            }\n            // Check if YouTube API is available\n            const apiStatus = await this.youtubeService.getApiStatus();\n            if (!apiStatus.isAuthenticated) {\n                await (0,_lib_db__WEBPACK_IMPORTED_MODULE_6__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_7__.LogLevel.WARNING, 'YOUTUBE_NOT_AUTHENTICATED', 'YouTube scanning cannot start: API not authenticated');\n                return;\n            }\n            // Clear existing timer\n            if (this.scanTimer) {\n                clearInterval(this.scanTimer);\n            }\n            // Set up periodic scanning\n            const intervalMs = config.scanInterval * 60 * 1000 // Convert minutes to milliseconds\n            ;\n            this.scanTimer = setInterval(async ()=>{\n                if (!this.isScanning) {\n                    await this.performScan();\n                }\n            }, intervalMs);\n            // Perform initial scan\n            await this.performScan();\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_6__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_7__.LogLevel.INFO, 'YOUTUBE_SCAN_STARTED', `YouTube scanning started with ${config.scanInterval} minute intervals`, {\n                config\n            });\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_6__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_7__.LogLevel.ERROR, 'YOUTUBE_SCAN_START_ERROR', `Failed to start YouTube scanning: ${error.message}`, {\n                error: error.message\n            });\n            throw error;\n        }\n    }\n    /**\n   * Stop automated YouTube scanning\n   */ async stopAutomatedScanning() {\n        if (this.scanTimer) {\n            clearInterval(this.scanTimer);\n            this.scanTimer = undefined;\n        }\n        await (0,_lib_db__WEBPACK_IMPORTED_MODULE_6__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_7__.LogLevel.INFO, 'YOUTUBE_SCAN_STOPPED', 'YouTube scanning stopped');\n    }\n    /**\n   * Perform a single YouTube scan\n   */ async performScan() {\n        if (this.isScanning) {\n            throw new Error('YouTube scan already in progress');\n        }\n        this.isScanning = true;\n        const scanId = `youtube_scan_${Date.now()}`;\n        const startTime = new Date();\n        const result = {\n            scanId,\n            startTime,\n            endTime: new Date(),\n            videosFound: 0,\n            videosProcessed: 0,\n            videosApproved: 0,\n            videosRejected: 0,\n            videosFlagged: 0,\n            duplicatesFound: 0,\n            errors: [],\n            quotaUsed: 0,\n            searchTermsUsed: []\n        };\n        try {\n            const config = await this.getScanConfig();\n            if (!config.isEnabled) {\n                throw new Error('YouTube scanning is disabled');\n            }\n            // Check API status and quota\n            const apiStatus = await this.youtubeService.getApiStatus();\n            if (!apiStatus.isAuthenticated) {\n                throw new Error('YouTube API not authenticated');\n            }\n            if (apiStatus.quotaRemaining < 500) {\n                throw new Error(`YouTube API quota too low: ${apiStatus.quotaRemaining} remaining`);\n            }\n            let allVideos = [];\n            result.searchTermsUsed = config.searchTerms;\n            // Search each configured search term\n            for (const searchTerm of config.searchTerms){\n                try {\n                    const searchOptions = {\n                        query: searchTerm,\n                        maxResults: Math.floor(config.maxVideosPerScan / config.searchTerms.length),\n                        order: 'relevance',\n                        videoDuration: config.videoDuration,\n                        publishedAfter: new Date(Date.now() - config.publishedWithin * 24 * 60 * 60 * 1000)\n                    };\n                    const videos = await this.youtubeService.searchVideos(searchOptions);\n                    allVideos = allVideos.concat(videos);\n                    await (0,_lib_db__WEBPACK_IMPORTED_MODULE_6__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_7__.LogLevel.INFO, 'YOUTUBE_SEARCH_TERM_SUCCESS', `Found ${videos.length} YouTube videos for search term: ${searchTerm}`, {\n                        scanId,\n                        searchTerm,\n                        videosFound: videos.length\n                    });\n                } catch (error) {\n                    result.errors.push(`Search term \"${searchTerm}\" failed: ${error.message}`);\n                    await (0,_lib_db__WEBPACK_IMPORTED_MODULE_6__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_7__.LogLevel.ERROR, 'YOUTUBE_SEARCH_TERM_ERROR', `Search term failed: ${searchTerm} - ${error.message}`, {\n                        scanId,\n                        searchTerm,\n                        error: error.message\n                    });\n                }\n            }\n            result.videosFound = allVideos.length;\n            // Remove duplicates and filter by view count\n            const uniqueVideos = this.removeDuplicateVideos(allVideos);\n            result.duplicatesFound = allVideos.length - uniqueVideos.length;\n            // Filter by minimum view count\n            const filteredVideos = uniqueVideos.filter((video)=>video.viewCount >= config.minViewCount);\n            // Track highest viewed video\n            if (filteredVideos.length > 0) {\n                const highestViewed = filteredVideos.reduce((max, video)=>video.viewCount > max.viewCount ? video : max);\n                result.highestViewedVideo = {\n                    id: highestViewed.id,\n                    title: highestViewed.title,\n                    viewCount: highestViewed.viewCount,\n                    channelTitle: highestViewed.channelTitle\n                };\n            }\n            // Process each video through the content pipeline\n            for (const video of filteredVideos){\n                try {\n                    const processed = await this.processYouTubeVideo(video, scanId);\n                    result.videosProcessed++;\n                    switch(processed.status){\n                        case 'approved':\n                            result.videosApproved++;\n                            break;\n                        case 'rejected':\n                            result.videosRejected++;\n                            break;\n                        case 'flagged':\n                            result.videosFlagged++;\n                            break;\n                    }\n                } catch (error) {\n                    result.errors.push(`Video ${video.id} processing failed: ${error.message}`);\n                    await (0,_lib_db__WEBPACK_IMPORTED_MODULE_6__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_7__.LogLevel.ERROR, 'YOUTUBE_VIDEO_PROCESS_ERROR', `Failed to process YouTube video ${video.id}: ${error.message}`, {\n                        scanId,\n                        videoId: video.id,\n                        error: error.message\n                    });\n                }\n            }\n            // Get quota usage\n            const finalApiStatus = await this.youtubeService.getApiStatus();\n            result.quotaUsed = finalApiStatus.quotaUsed;\n            // Update scan configuration with latest scan info\n            await this.updateLastScanTime();\n            result.endTime = new Date();\n            result.nextScanTime = new Date(Date.now() + config.scanInterval * 60 * 1000);\n            // Record scan results\n            await this.recordScanResult(result);\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_6__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_7__.LogLevel.INFO, 'YOUTUBE_SCAN_COMPLETED', `YouTube scan completed: ${result.videosProcessed} processed, ${result.videosApproved} approved`, result);\n            // Record scan completion for monitoring\n            await _youtube_monitoring__WEBPACK_IMPORTED_MODULE_4__.youtubeMonitoringService.recordScanCompletion(result.videosProcessed, true, result.errors);\n            return result;\n        } catch (error) {\n            result.errors.push(error.message);\n            result.endTime = new Date();\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_6__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_7__.LogLevel.ERROR, 'YOUTUBE_SCAN_ERROR', `YouTube scan failed: ${error.message}`, {\n                scanId,\n                error: error.message\n            });\n            // Record scan failure for monitoring\n            await _youtube_monitoring__WEBPACK_IMPORTED_MODULE_4__.youtubeMonitoringService.recordScanCompletion(result.videosProcessed, false, result.errors);\n            throw error;\n        } finally{\n            this.isScanning = false;\n        }\n    }\n    /**\n   * Process a single YouTube video through the content pipeline\n   */ async processYouTubeVideo(video, scanId) {\n        try {\n            // Validate YouTube video content\n            const isValid = await this.youtubeService.validateYouTubeContent(video);\n            if (!isValid) {\n                return {\n                    status: 'rejected'\n                };\n            }\n            // Check for duplicates in existing content\n            const contentText = `${video.title}\\n${video.description}`.trim();\n            const contentHash = await this.duplicateDetection.generateContentHash(contentText);\n            const isDuplicate = await this.duplicateDetection.checkForDuplicates({\n                content_text: contentText,\n                content_video_url: video.videoUrl,\n                content_hash: contentHash\n            });\n            if (isDuplicate) {\n                return {\n                    status: 'rejected'\n                };\n            }\n            // Determine content type - videos are always mixed (video + text)\n            const contentType = 'mixed';\n            // Add to content queue\n            const contentData = {\n                content_text: contentText,\n                content_image_url: video.thumbnailUrl,\n                content_video_url: video.embedUrl,\n                content_type: contentType,\n                source_platform: 'youtube',\n                original_url: video.videoUrl,\n                original_author: video.channelTitle,\n                scraped_at: new Date(),\n                content_hash: contentHash,\n                youtube_data: JSON.stringify({\n                    video_id: video.id,\n                    channel_id: video.channelId,\n                    channel_title: video.channelTitle,\n                    published_at: video.publishedAt,\n                    duration: video.duration,\n                    view_count: video.viewCount,\n                    like_count: video.likeCount,\n                    comment_count: video.commentCount,\n                    tags: video.tags,\n                    category_id: video.categoryId,\n                    default_language: video.defaultLanguage,\n                    is_live_broadcast: video.isLiveBroadcast,\n                    scan_id: scanId\n                })\n            };\n            const insertedContent = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_5__.insert)('content_queue').values(contentData).returning([\n                'id'\n            ]).first();\n            if (!insertedContent) {\n                throw new Error('Failed to insert content into queue');\n            }\n            // Process through content processor\n            const processingResult = await this.contentProcessor.processContent(insertedContent.id, {\n                autoApprovalThreshold: 0.7,\n                autoRejectionThreshold: 0.3\n            });\n            return {\n                status: processingResult.action\n            };\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_6__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_7__.LogLevel.ERROR, 'YOUTUBE_VIDEO_PROCESS_ERROR', `Failed to process YouTube video ${video.id}: ${error.message}`, {\n                videoId: video.id,\n                scanId,\n                error: error.message,\n                video: {\n                    title: video.title.substring(0, 100),\n                    channelTitle: video.channelTitle,\n                    viewCount: video.viewCount\n                }\n            });\n            throw error;\n        }\n    }\n    /**\n   * Remove duplicate videos from array\n   */ removeDuplicateVideos(videos) {\n        const seen = new Set();\n        return videos.filter((video)=>{\n            if (seen.has(video.id)) {\n                return false;\n            }\n            seen.add(video.id);\n            return true;\n        });\n    }\n    /**\n   * Get current scan configuration\n   */ async getScanConfig() {\n        try {\n            const config = await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_5__.query)('youtube_scan_config').select('*').first();\n            if (!config) {\n                // Return default configuration\n                return {\n                    isEnabled: false,\n                    scanInterval: 120,\n                    maxVideosPerScan: 20,\n                    searchTerms: this.youtubeService.getHotdogSearchTerms(),\n                    videoDuration: 'any',\n                    publishedWithin: 7,\n                    minViewCount: 500,\n                    includeChannelIds: [],\n                    excludeChannelIds: []\n                };\n            }\n            return {\n                isEnabled: config.is_enabled,\n                scanInterval: config.scan_interval,\n                maxVideosPerScan: config.max_videos_per_scan,\n                searchTerms: config.search_terms || this.youtubeService.getHotdogSearchTerms(),\n                videoDuration: config.video_duration || 'any',\n                publishedWithin: config.published_within || 7,\n                minViewCount: config.min_view_count || 500,\n                includeChannelIds: config.include_channel_ids || [],\n                excludeChannelIds: config.exclude_channel_ids || [],\n                lastScanId: config.last_scan_id,\n                lastScanTime: config.last_scan_time ? new Date(config.last_scan_time) : undefined\n            };\n        } catch (error) {\n            // If table doesn't exist, return defaults\n            return {\n                isEnabled: false,\n                scanInterval: 120,\n                maxVideosPerScan: 20,\n                searchTerms: this.youtubeService.getHotdogSearchTerms(),\n                videoDuration: 'any',\n                publishedWithin: 7,\n                minViewCount: 500,\n                includeChannelIds: [],\n                excludeChannelIds: []\n            };\n        }\n    }\n    /**\n   * Update scan configuration\n   */ async updateScanConfig(config) {\n        try {\n            const existing = await this.getScanConfig();\n            const updated = {\n                ...existing,\n                ...config\n            };\n            await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_5__.query)('youtube_scan_config').upsert({\n                is_enabled: updated.isEnabled,\n                scan_interval: updated.scanInterval,\n                max_videos_per_scan: updated.maxVideosPerScan,\n                search_terms: updated.searchTerms,\n                video_duration: updated.videoDuration,\n                published_within: updated.publishedWithin,\n                min_view_count: updated.minViewCount,\n                include_channel_ids: updated.includeChannelIds,\n                exclude_channel_ids: updated.excludeChannelIds,\n                last_scan_id: updated.lastScanId,\n                last_scan_time: updated.lastScanTime,\n                updated_at: new Date()\n            });\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_6__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_7__.LogLevel.INFO, 'YOUTUBE_CONFIG_UPDATED', 'YouTube scan configuration updated', {\n                config: updated\n            });\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_6__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_7__.LogLevel.ERROR, 'YOUTUBE_CONFIG_UPDATE_ERROR', `Failed to update YouTube configuration: ${error.message}`, {\n                config,\n                error: error.message\n            });\n            throw error;\n        }\n    }\n    /**\n   * Update last scan time\n   */ async updateLastScanTime() {\n        await this.updateScanConfig({\n            lastScanTime: new Date()\n        });\n    }\n    /**\n   * Record scan result for analytics\n   */ async recordScanResult(result) {\n        try {\n            await (0,_lib_db_query_builder__WEBPACK_IMPORTED_MODULE_5__.insert)('youtube_scan_results').values({\n                scan_id: result.scanId,\n                start_time: result.startTime,\n                end_time: result.endTime,\n                videos_found: result.videosFound,\n                videos_processed: result.videosProcessed,\n                videos_approved: result.videosApproved,\n                videos_rejected: result.videosRejected,\n                videos_flagged: result.videosFlagged,\n                duplicates_found: result.duplicatesFound,\n                search_terms_used: result.searchTermsUsed,\n                highest_views: result.highestViewedVideo?.viewCount || 0,\n                quota_used: result.quotaUsed,\n                errors: result.errors,\n                created_at: new Date()\n            });\n        } catch (error) {\n            // Don't throw error here, just log it\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_6__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_7__.LogLevel.WARNING, 'YOUTUBE_SCAN_RESULT_RECORD_ERROR', `Failed to record YouTube scan result: ${error.message}`, {\n                scanId: result.scanId,\n                error: error.message\n            });\n        }\n    }\n    /**\n   * Test YouTube API connection\n   */ async testConnection() {\n        try {\n            const status = await this.youtubeService.getApiStatus();\n            if (status.isAuthenticated) {\n                return {\n                    success: true,\n                    message: 'YouTube API connection successful',\n                    details: status\n                };\n            } else {\n                return {\n                    success: false,\n                    message: status.lastError || 'YouTube API not authenticated',\n                    details: status\n                };\n            }\n        } catch (error) {\n            return {\n                success: false,\n                message: `Connection test failed: ${error.message}`,\n                details: {\n                    error: error.message\n                }\n            };\n        }\n    }\n}\nconst youtubeScanningService = new YouTubeScanningService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/youtube-scanning.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/youtube.ts":
/*!*********************************!*\
  !*** ./lib/services/youtube.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   YouTubeService: () => (/* binding */ YouTubeService),\n/* harmony export */   youtubeService: () => (/* binding */ youtubeService)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/types */ \"(rsc)/./types/index.ts\");\n/* harmony import */ var _youtube_monitoring__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./youtube-monitoring */ \"(rsc)/./lib/services/youtube-monitoring.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_0__, _youtube_monitoring__WEBPACK_IMPORTED_MODULE_2__]);\n([_lib_db__WEBPACK_IMPORTED_MODULE_0__, _youtube_monitoring__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nclass YouTubeService {\n    static{\n        this.API_BASE_URL = 'https://www.googleapis.com/youtube/v3';\n    }\n    static{\n        this.DAILY_QUOTA_LIMIT = 10000; // YouTube Data API v3 free quota\n    }\n    constructor(){\n        this.apiKey = null;\n        this.quotaTracker = {\n            used: 0,\n            remaining: 10000,\n            resetTime: new Date(Date.now() + 24 * 60 * 60 * 1000) // Reset daily\n        };\n        this.apiKey = process.env.YOUTUBE_API_KEY || null;\n        if (!this.apiKey) {\n            console.warn('YouTube API key not found in environment variables');\n        }\n    }\n    /**\n   * Search YouTube for hotdog-related videos\n   */ async searchVideos(options) {\n        const startTime = Date.now();\n        try {\n            if (!this.apiKey) {\n                throw new Error('YouTube API key not configured');\n            }\n            await this.checkQuotaLimit();\n            const searchParams = new URLSearchParams({\n                part: 'snippet',\n                q: options.query,\n                type: 'video',\n                maxResults: Math.min(options.maxResults || 25, 50).toString(),\n                order: options.order || 'relevance',\n                key: this.apiKey,\n                videoDefinition: options.videoDefinition || 'any',\n                videoDuration: options.videoDuration || 'any',\n                safeSearch: 'moderate'\n            });\n            if (options.publishedAfter) {\n                searchParams.append('publishedAfter', options.publishedAfter.toISOString());\n            }\n            const searchResponse = await fetch(`${YouTubeService.API_BASE_URL}/search?${searchParams}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            });\n            if (!searchResponse.ok) {\n                const errorData = await searchResponse.json().catch(()=>({}));\n                throw new Error(`YouTube API error: ${searchResponse.status} - ${errorData.error?.message || searchResponse.statusText}`);\n            }\n            const searchData = await searchResponse.json();\n            this.updateQuotaUsage(100); // Search costs 100 quota units\n            // Get video details for additional metadata\n            const videoIds = searchData.items?.map((item)=>item.id.videoId).filter(Boolean) || [];\n            const videoDetails = videoIds.length > 0 ? await this.getVideoDetails(videoIds) : [];\n            // Process and combine data\n            const processedVideos = [];\n            for (const item of searchData.items || []){\n                if (item.id?.videoId) {\n                    const videoDetail = videoDetails.find((v)=>v.id === item.id.videoId);\n                    const processedVideo = await this.processYouTubeVideo(item, videoDetail);\n                    // Validate content for hotdog relevance\n                    if (await this.validateYouTubeContent(processedVideo)) {\n                        processedVideos.push(processedVideo);\n                    }\n                }\n            }\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.INFO, 'YOUTUBE_SEARCH_SUCCESS', `Found ${processedVideos.length} YouTube videos for query: ${options.query}`, {\n                query: options.query,\n                videosFound: processedVideos.length,\n                quotaUsed: this.quotaTracker.used\n            });\n            // Record successful request for monitoring\n            const requestTime = Date.now() - startTime;\n            await _youtube_monitoring__WEBPACK_IMPORTED_MODULE_2__.youtubeMonitoringService.recordApiRequest(true, requestTime);\n            return processedVideos;\n        } catch (error) {\n            // Record failed request for monitoring\n            const requestTime = Date.now() - startTime;\n            const errorType = error.message.includes('quota') ? 'quota_limit' : error.message.includes('key') ? 'auth_error' : 'api_error';\n            await _youtube_monitoring__WEBPACK_IMPORTED_MODULE_2__.youtubeMonitoringService.recordApiRequest(false, requestTime, errorType);\n            if (error.message.includes('quota')) {\n                await _youtube_monitoring__WEBPACK_IMPORTED_MODULE_2__.youtubeMonitoringService.recordQuotaLimitHit(this.quotaTracker.resetTime);\n            }\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'YOUTUBE_SEARCH_ERROR', `YouTube search failed: ${error.message}`, {\n                query: options.query,\n                error: error.message\n            });\n            throw new Error(`YouTube search failed: ${error.message}`);\n        }\n    }\n    /**\n   * Get detailed video information\n   */ async getVideoDetails(videoIds) {\n        if (!this.apiKey || videoIds.length === 0) {\n            return [];\n        }\n        try {\n            const detailsParams = new URLSearchParams({\n                part: 'snippet,statistics,contentDetails,status',\n                id: videoIds.join(','),\n                key: this.apiKey\n            });\n            const response = await fetch(`${YouTubeService.API_BASE_URL}/videos?${detailsParams}`, {\n                method: 'GET'\n            });\n            if (!response.ok) {\n                console.warn('Failed to get video details:', response.statusText);\n                return [];\n            }\n            const data = await response.json();\n            this.updateQuotaUsage(1); // Videos endpoint costs 1 quota unit\n            return data.items || [];\n        } catch (error) {\n            console.warn('Error fetching video details:', error.message);\n            return [];\n        }\n    }\n    /**\n   * Process YouTube video data into structured format\n   */ async processYouTubeVideo(searchItem, videoDetail) {\n        const snippet = searchItem.snippet;\n        const statistics = videoDetail?.statistics || {};\n        const contentDetails = videoDetail?.contentDetails || {};\n        return {\n            id: searchItem.id.videoId,\n            title: snippet.title || '',\n            description: snippet.description || '',\n            thumbnailUrl: snippet.thumbnails?.high?.url || snippet.thumbnails?.default?.url || '',\n            videoUrl: `https://www.youtube.com/watch?v=${searchItem.id.videoId}`,\n            embedUrl: `https://www.youtube.com/embed/${searchItem.id.videoId}`,\n            channelTitle: snippet.channelTitle || '',\n            channelId: snippet.channelId || '',\n            publishedAt: new Date(snippet.publishedAt),\n            duration: contentDetails.duration || 'PT0S',\n            viewCount: parseInt(statistics.viewCount || '0'),\n            likeCount: parseInt(statistics.likeCount || '0'),\n            commentCount: parseInt(statistics.commentCount || '0'),\n            tags: videoDetail?.snippet?.tags || [],\n            categoryId: videoDetail?.snippet?.categoryId || '0',\n            defaultLanguage: videoDetail?.snippet?.defaultLanguage,\n            isLiveBroadcast: snippet.liveBroadcastContent === 'live'\n        };\n    }\n    /**\n   * Validate YouTube content for hotdog relevance\n   */ async validateYouTubeContent(video) {\n        try {\n            // Check for hotdog-related terms in title and description\n            const hotdogTerms = [\n                'hotdog',\n                'hot dog',\n                'hotdogs',\n                'hot dogs',\n                'frankfurter',\n                'wiener',\n                'bratwurst',\n                'sausage',\n                'ballpark frank',\n                'chili dog',\n                'corn dog',\n                'grilling hotdog',\n                'hotdog recipe',\n                'hotdog review'\n            ];\n            const searchText = `${video.title} ${video.description}`.toLowerCase();\n            const hasHotdogTerm = hotdogTerms.some((term)=>searchText.includes(term));\n            if (!hasHotdogTerm) {\n                return false;\n            }\n            // Check for spam indicators\n            const spamIndicators = [\n                'clickbait',\n                'fake',\n                'scam',\n                'virus',\n                'hack',\n                'free money',\n                'get rich quick',\n                'miracle cure'\n            ];\n            const hasSpamIndicators = spamIndicators.some((indicator)=>searchText.includes(indicator));\n            if (hasSpamIndicators) {\n                return false;\n            }\n            // Prefer videos with good engagement and reasonable duration\n            const hasGoodEngagement = video.viewCount > 1000 || video.likeCount > 10;\n            const hasReasonableDuration = !video.duration.includes('PT0S') // Not zero duration\n            ;\n            const isNotLive = !video.isLiveBroadcast // Skip live streams\n            ;\n            return hasGoodEngagement && hasReasonableDuration && isNotLive;\n        } catch (error) {\n            await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.logToDatabase)(_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.ERROR, 'YOUTUBE_VALIDATION_ERROR', `YouTube content validation failed: ${error.message}`, {\n                videoId: video.id,\n                error: error.message\n            });\n            return false;\n        }\n    }\n    /**\n   * Get hotdog-focused search terms for YouTube\n   */ getHotdogSearchTerms() {\n        return [\n            'hotdog recipe',\n            'best hotdogs',\n            'hotdog challenge',\n            'ballpark food',\n            'grilling hotdogs',\n            'hotdog review',\n            'homemade hotdogs',\n            'hotdog competition',\n            'street food hotdogs',\n            'gourmet hotdogs'\n        ];\n    }\n    /**\n   * Get YouTube API status and quota usage\n   */ async getApiStatus() {\n        try {\n            if (!this.apiKey) {\n                return {\n                    isAuthenticated: false,\n                    quotaUsed: 0,\n                    quotaRemaining: 0,\n                    quotaResetTime: new Date(),\n                    lastError: 'API key not configured'\n                };\n            }\n            // Test connection with a simple search\n            const testParams = new URLSearchParams({\n                part: 'snippet',\n                q: 'hotdog',\n                type: 'video',\n                maxResults: '1',\n                key: this.apiKey\n            });\n            const response = await fetch(`${YouTubeService.API_BASE_URL}/search?${testParams}`, {\n                method: 'GET'\n            });\n            const isAuthenticated = response.ok;\n            if (response.ok) {\n                this.updateQuotaUsage(100); // Test search costs quota\n            }\n            return {\n                isAuthenticated,\n                quotaUsed: this.quotaTracker.used,\n                quotaRemaining: this.quotaTracker.remaining,\n                quotaResetTime: this.quotaTracker.resetTime,\n                lastRequest: new Date(),\n                lastError: isAuthenticated ? undefined : `HTTP ${response.status}`\n            };\n        } catch (error) {\n            return {\n                isAuthenticated: false,\n                quotaUsed: this.quotaTracker.used,\n                quotaRemaining: this.quotaTracker.remaining,\n                quotaResetTime: this.quotaTracker.resetTime,\n                lastError: error.message,\n                lastRequest: new Date()\n            };\n        }\n    }\n    /**\n   * Check quota limit before making API calls\n   */ async checkQuotaLimit() {\n        const now = new Date();\n        // Reset quota counter if day has passed\n        if (now >= this.quotaTracker.resetTime) {\n            this.quotaTracker.used = 0;\n            this.quotaTracker.remaining = YouTubeService.DAILY_QUOTA_LIMIT;\n            this.quotaTracker.resetTime = new Date(now.getTime() + 24 * 60 * 60 * 1000);\n        }\n        if (this.quotaTracker.remaining <= 100) {\n            const waitTime = this.quotaTracker.resetTime.getTime() - now.getTime();\n            throw new Error(`YouTube API quota exceeded. Reset in ${Math.ceil(waitTime / 1000 / 60 / 60)} hours`);\n        }\n    }\n    /**\n   * Update quota usage tracking\n   */ updateQuotaUsage(units) {\n        this.quotaTracker.used += units;\n        this.quotaTracker.remaining = Math.max(0, YouTubeService.DAILY_QUOTA_LIMIT - this.quotaTracker.used);\n    }\n    /**\n   * Parse YouTube duration format (PT1M30S) to seconds\n   */ static parseDuration(duration) {\n        const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n        if (!match) return 0;\n        const hours = parseInt(match[1] || '0');\n        const minutes = parseInt(match[2] || '0');\n        const seconds = parseInt(match[3] || '0');\n        return hours * 3600 + minutes * 60 + seconds;\n    }\n    /**\n   * Format duration seconds to human readable format\n   */ static formatDuration(seconds) {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor(seconds % 3600 / 60);\n        const secs = seconds % 60;\n        if (hours > 0) {\n            return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n        } else {\n            return `${minutes}:${secs.toString().padStart(2, '0')}`;\n        }\n    }\n}\nconst youtubeService = new YouTubeService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/youtube.ts\n");

/***/ }),

/***/ "(rsc)/./lib/utils/content-hash.ts":
/*!***********************************!*\
  !*** ./lib/utils/content-hash.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentHasher: () => (/* binding */ ContentHasher),\n/* harmony export */   checkContentSimilarity: () => (/* binding */ checkContentSimilarity),\n/* harmony export */   generateContentHash: () => (/* binding */ generateContentHash)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nclass ContentHasher {\n    /**\n   * Generate a SHA-256 hash for content to detect duplicates\n   */ static generateHash(content) {\n        // Normalize content by removing whitespace and converting to lowercase\n        const normalizedText = content.content_text ? this.normalizeText(content.content_text) : '';\n        const normalizedImageUrl = content.content_image_url ? this.normalizeUrl(content.content_image_url) : '';\n        const normalizedVideoUrl = content.content_video_url ? this.normalizeUrl(content.content_video_url) : '';\n        const normalizedOriginalUrl = this.normalizeUrl(content.original_url);\n        // Combine all content fields for hashing\n        const combinedContent = [\n            normalizedText,\n            normalizedImageUrl,\n            normalizedVideoUrl,\n            normalizedOriginalUrl\n        ].filter(Boolean).join('|');\n        return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('sha256').update(combinedContent, 'utf8').digest('hex');\n    }\n    /**\n   * Generate a hash based only on the original URL for loose duplicate detection\n   */ static generateUrlHash(originalUrl) {\n        const normalizedUrl = this.normalizeUrl(originalUrl);\n        return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('sha256').update(normalizedUrl, 'utf8').digest('hex');\n    }\n    /**\n   * Normalize text content for consistent hashing\n   */ static normalizeText(text) {\n        return text.toLowerCase().replace(/\\s+/g, ' ') // Replace multiple whitespace with single space\n        .replace(/[^\\w\\s]/g, '') // Remove punctuation\n        .trim();\n    }\n    /**\n   * Normalize URLs for consistent hashing\n   */ static normalizeUrl(url) {\n        try {\n            const urlObj = new URL(url);\n            // Remove common tracking parameters\n            const trackingParams = [\n                'utm_source',\n                'utm_medium',\n                'utm_campaign',\n                'utm_term',\n                'utm_content',\n                'fbclid',\n                'gclid',\n                'ref',\n                'source',\n                's',\n                't',\n                'igshid'\n            ];\n            trackingParams.forEach((param)=>{\n                urlObj.searchParams.delete(param);\n            });\n            // Sort search parameters for consistency\n            urlObj.searchParams.sort();\n            // Remove fragment (hash)\n            urlObj.hash = '';\n            // Normalize path (remove trailing slashes)\n            urlObj.pathname = urlObj.pathname.replace(/\\/+$/, '') || '/';\n            return urlObj.toString().toLowerCase();\n        } catch  {\n            // If URL parsing fails, just normalize the string\n            return url.toLowerCase().trim();\n        }\n    }\n    /**\n   * Check if two content items are likely duplicates based on similarity\n   */ static areSimilar(content1, content2) {\n        // Check if URLs are exactly the same (after normalization)\n        const url1 = this.normalizeUrl(content1.original_url);\n        const url2 = this.normalizeUrl(content2.original_url);\n        if (url1 === url2) {\n            return true;\n        }\n        // Check if image/video URLs are the same\n        if (content1.content_image_url && content2.content_image_url) {\n            const img1 = this.normalizeUrl(content1.content_image_url);\n            const img2 = this.normalizeUrl(content2.content_image_url);\n            if (img1 === img2) {\n                return true;\n            }\n        }\n        if (content1.content_video_url && content2.content_video_url) {\n            const vid1 = this.normalizeUrl(content1.content_video_url);\n            const vid2 = this.normalizeUrl(content2.content_video_url);\n            if (vid1 === vid2) {\n                return true;\n            }\n        }\n        // Check text similarity if both have text content\n        if (content1.content_text && content2.content_text) {\n            const text1 = this.normalizeText(content1.content_text);\n            const text2 = this.normalizeText(content2.content_text);\n            // Consider similar if normalized text is identical or very similar\n            if (text1 === text2) {\n                return true;\n            }\n            // Check for substantial overlap (>80% similarity)\n            const similarity = this.calculateTextSimilarity(text1, text2);\n            if (similarity > 0.8) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n   * Calculate text similarity using Jaccard similarity\n   */ static calculateTextSimilarity(text1, text2) {\n        const words1 = new Set(text1.split(' ').filter((word)=>word.length > 2));\n        const words2 = new Set(text2.split(' ').filter((word)=>word.length > 2));\n        const intersection = new Set([\n            ...words1\n        ].filter((word)=>words2.has(word)));\n        const union = new Set([\n            ...words1,\n            ...words2\n        ]);\n        return union.size === 0 ? 0 : intersection.size / union.size;\n    }\n    /**\n   * Generate multiple hashes for different duplicate detection strategies\n   */ static generateMultipleHashes(content) {\n        const contentHash = this.generateHash(content);\n        const urlHash = this.generateUrlHash(content.original_url);\n        let textHash;\n        if (content.content_text) {\n            textHash = crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('sha256').update(this.normalizeText(content.content_text), 'utf8').digest('hex');\n        }\n        let mediaHash;\n        const mediaUrl = content.content_image_url || content.content_video_url;\n        if (mediaUrl) {\n            mediaHash = crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('sha256').update(this.normalizeUrl(mediaUrl), 'utf8').digest('hex');\n        }\n        return {\n            contentHash,\n            urlHash,\n            textHash,\n            mediaHash\n        };\n    }\n}\nfunction generateContentHash(content) {\n    return ContentHasher.generateHash(content);\n}\nfunction checkContentSimilarity(content1, content2) {\n    return ContentHasher.areSimilar(content1, content2);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils/content-hash.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fyoutube%2Fconfig%2Froute&page=%2Fapi%2Fadmin%2Fyoutube%2Fconfig%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fyoutube%2Fconfig%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fyoutube%2Fconfig%2Froute&page=%2Fapi%2Fadmin%2Fyoutube%2Fconfig%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fyoutube%2Fconfig%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_youtube_config_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/admin/youtube/config/route.ts */ \"(rsc)/./app/api/admin/youtube/config/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_youtube_config_route_ts__WEBPACK_IMPORTED_MODULE_16__]);\n_Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_youtube_config_route_ts__WEBPACK_IMPORTED_MODULE_16__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/admin/youtube/config/route\",\n        pathname: \"/api/admin/youtube/config\",\n        filename: \"route\",\n        bundlePath: \"app/api/admin/youtube/config/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"/Users/adamshaw/Development/websites/hotdog-diaries/app/api/admin/youtube/config/route.ts\",\n    nextConfigOutput,\n    userland: _Users_adamshaw_Development_websites_hotdog_diaries_app_api_admin_youtube_config_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/admin/youtube/config/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fyoutube%2Fconfig%2Froute&page=%2Fapi%2Fadmin%2Fyoutube%2Fconfig%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fyoutube%2Fconfig%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./types/index.ts":
/*!************************!*\
  !*** ./types/index.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentType: () => (/* binding */ ContentType),\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   SourcePlatform: () => (/* binding */ SourcePlatform)\n/* harmony export */ });\n// Enums\nvar ContentType = /*#__PURE__*/ function(ContentType) {\n    ContentType[\"TEXT\"] = \"text\";\n    ContentType[\"IMAGE\"] = \"image\";\n    ContentType[\"VIDEO\"] = \"video\";\n    ContentType[\"MIXED\"] = \"mixed\";\n    return ContentType;\n}({});\nvar SourcePlatform = /*#__PURE__*/ function(SourcePlatform) {\n    SourcePlatform[\"REDDIT\"] = \"reddit\";\n    SourcePlatform[\"YOUTUBE\"] = \"youtube\";\n    SourcePlatform[\"FLICKR\"] = \"flickr\";\n    SourcePlatform[\"UNSPLASH\"] = \"unsplash\";\n    SourcePlatform[\"NEWS\"] = \"news\";\n    SourcePlatform[\"MASTODON\"] = \"mastodon\";\n    return SourcePlatform;\n}({});\nvar LogLevel = /*#__PURE__*/ function(LogLevel) {\n    LogLevel[\"DEBUG\"] = \"debug\";\n    LogLevel[\"INFO\"] = \"info\";\n    LogLevel[\"WARN\"] = \"warn\";\n    LogLevel[\"ERROR\"] = \"error\";\n    LogLevel[\"FATAL\"] = \"fatal\";\n    return LogLevel;\n}({});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi90eXBlcy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUEwRkEsUUFBUTtBQUNELHlDQUFLQTs7Ozs7V0FBQUE7TUFLWDtBQUVNLDRDQUFLQzs7Ozs7OztXQUFBQTtNQU9YO0FBRU0sc0NBQUtDOzs7Ozs7V0FBQUE7TUFNWCIsInNvdXJjZXMiOlsiL1VzZXJzL2FkYW1zaGF3L0RldmVsb3BtZW50L3dlYnNpdGVzL2hvdGRvZy1kaWFyaWVzL3R5cGVzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoQ2hlY2tSZXNwb25zZSB7XG4gIHN0YXR1czogJ2hlYWx0aHknIHwgJ3VuaGVhbHRoeSdcbiAgdGltZXN0YW1wOiBzdHJpbmdcbiAgc2VydmljZTogc3RyaW5nXG4gIHZlcnNpb24/OiBzdHJpbmdcbiAgdXB0aW1lPzogbnVtYmVyXG4gIGVudmlyb25tZW50Pzogc3RyaW5nXG4gIGNoZWNrcz86IHtcbiAgICBkYXRhYmFzZT86IHN0cmluZ1xuICAgIHNvY2lhbE1lZGlhU2Nhbm5lcj86IHN0cmluZ1xuICAgIGNvbnRlbnRTY2hlZHVsZXI/OiBzdHJpbmdcbiAgfVxuICBlcnJvcj86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhvdGRvZ1Bvc3Qge1xuICBpZDogc3RyaW5nXG4gIGNvbnRlbnQ6IHN0cmluZ1xuICBpbWFnZVVybD86IHN0cmluZ1xuICBzb3VyY2U6ICdyZWRkaXQnIHwgJ3lvdXR1YmUnIHwgJ2ZsaWNrcicgfCAndW5zcGxhc2gnIHwgJ25ld3MnIHwgJ21hc3RvZG9uJ1xuICBzb3VyY2VVcmw6IHN0cmluZ1xuICB0aW1lc3RhbXA6IHN0cmluZ1xuICBlbmdhZ2VtZW50OiB7XG4gICAgbGlrZXM6IG51bWJlclxuICAgIHNoYXJlczogbnVtYmVyXG4gICAgY29tbWVudHM6IG51bWJlclxuICB9XG4gIHByb2Nlc3NlZDogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdkl0ZW0ge1xuICBocmVmOiBzdHJpbmdcbiAgbGFiZWw6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwaVJlc3BvbnNlPFQgPSBhbnk+IHtcbiAgc3VjY2VzczogYm9vbGVhblxuICBkYXRhPzogVFxuICBlcnJvcj86IHN0cmluZ1xuICBtZXNzYWdlPzogc3RyaW5nXG59XG5cbi8vIERhdGFiYXNlIEVudGl0eSBUeXBlc1xuZXhwb3J0IGludGVyZmFjZSBDb250ZW50UXVldWUge1xuICBpZDogbnVtYmVyXG4gIGNvbnRlbnRfdGV4dD86IHN0cmluZ1xuICBjb250ZW50X2ltYWdlX3VybD86IHN0cmluZ1xuICBjb250ZW50X3ZpZGVvX3VybD86IHN0cmluZ1xuICBjb250ZW50X3R5cGU6IENvbnRlbnRUeXBlXG4gIHNvdXJjZV9wbGF0Zm9ybTogU291cmNlUGxhdGZvcm1cbiAgb3JpZ2luYWxfdXJsOiBzdHJpbmdcbiAgb3JpZ2luYWxfYXV0aG9yPzogc3RyaW5nXG4gIHNjcmFwZWRfYXQ6IERhdGVcbiAgY29udGVudF9oYXNoOiBzdHJpbmdcbiAgaXNfcG9zdGVkOiBib29sZWFuXG4gIHBvc3RlZF9hdD86IERhdGVcbiAgaXNfYXBwcm92ZWQ6IGJvb2xlYW5cbiAgYWRtaW5fbm90ZXM/OiBzdHJpbmdcbiAgY3JlYXRlZF9hdDogRGF0ZVxuICB1cGRhdGVkX2F0OiBEYXRlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zdGVkQ29udGVudCB7XG4gIGlkOiBudW1iZXJcbiAgY29udGVudF9xdWV1ZV9pZDogbnVtYmVyXG4gIHBvc3RlZF9hdDogRGF0ZVxuICBzY2hlZHVsZWRfdGltZT86IERhdGVcbiAgcG9zdF9vcmRlcjogbnVtYmVyXG4gIGNyZWF0ZWRfYXQ6IERhdGVcbiAgdXBkYXRlZF9hdDogRGF0ZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN5c3RlbUxvZyB7XG4gIGlkOiBudW1iZXJcbiAgbG9nX2xldmVsOiBMb2dMZXZlbFxuICBtZXNzYWdlOiBzdHJpbmdcbiAgY29tcG9uZW50OiBzdHJpbmdcbiAgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gIGNyZWF0ZWRfYXQ6IERhdGVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBZG1pblVzZXIge1xuICBpZDogbnVtYmVyXG4gIHVzZXJuYW1lOiBzdHJpbmdcbiAgcGFzc3dvcmRfaGFzaDogc3RyaW5nXG4gIGxhc3RfbG9naW4/OiBEYXRlXG4gIGNyZWF0ZWRfYXQ6IERhdGVcbiAgdXBkYXRlZF9hdDogRGF0ZVxufVxuXG4vLyBFbnVtc1xuZXhwb3J0IGVudW0gQ29udGVudFR5cGUge1xuICBURVhUID0gJ3RleHQnLFxuICBJTUFHRSA9ICdpbWFnZScsXG4gIFZJREVPID0gJ3ZpZGVvJyxcbiAgTUlYRUQgPSAnbWl4ZWQnXG59XG5cbmV4cG9ydCBlbnVtIFNvdXJjZVBsYXRmb3JtIHtcbiAgUkVERElUID0gJ3JlZGRpdCcsXG4gIFlPVVRVQkUgPSAneW91dHViZScsXG4gIEZMSUNLUiA9ICdmbGlja3InLFxuICBVTlNQTEFTSCA9ICd1bnNwbGFzaCcsXG4gIE5FV1MgPSAnbmV3cycsXG4gIE1BU1RPRE9OID0gJ21hc3RvZG9uJ1xufVxuXG5leHBvcnQgZW51bSBMb2dMZXZlbCB7XG4gIERFQlVHID0gJ2RlYnVnJyxcbiAgSU5GTyA9ICdpbmZvJyxcbiAgV0FSTiA9ICd3YXJuJyxcbiAgRVJST1IgPSAnZXJyb3InLFxuICBGQVRBTCA9ICdmYXRhbCdcbn1cblxuLy8gQVBJIFJlcXVlc3QvUmVzcG9uc2UgVHlwZXNcbmV4cG9ydCBpbnRlcmZhY2UgQ29udGVudEFwaVJlc3BvbnNlIHtcbiAgc3VjY2VzczogYm9vbGVhblxuICBkYXRhOiB7XG4gICAgY29udGVudDogUG9zdGVkQ29udGVudFtdXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgcGFnZTogbnVtYmVyXG4gICAgICBsaW1pdDogbnVtYmVyXG4gICAgICB0b3RhbDogbnVtYmVyXG4gICAgICB0b3RhbFBhZ2VzOiBudW1iZXJcbiAgICB9XG4gIH1cbiAgbWVzc2FnZT86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFiYXNlSGVhbHRoQ2hlY2sge1xuICBjb25uZWN0ZWQ6IGJvb2xlYW5cbiAgbGF0ZW5jeT86IG51bWJlclxuICBlcnJvcj86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVuaGFuY2VkSGVhbHRoUmVzcG9uc2UgZXh0ZW5kcyBIZWFsdGhDaGVja1Jlc3BvbnNlIHtcbiAgY2hlY2tzOiB7XG4gICAgZGF0YWJhc2U6IERhdGFiYXNlSGVhbHRoQ2hlY2tcbiAgICBzb2NpYWxNZWRpYVNjYW5uZXI/OiBzdHJpbmdcbiAgICBjb250ZW50U2NoZWR1bGVyPzogc3RyaW5nXG4gIH1cbn0iXSwibmFtZXMiOlsiQ29udGVudFR5cGUiLCJTb3VyY2VQbGF0Zm9ybSIsIkxvZ0xldmVsIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./types/index.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = import("pg");;

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@neondatabase","vendor-chunks/ws","vendor-chunks/@vercel","vendor-chunks/node-gyp-build","vendor-chunks/bufferutil"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fyoutube%2Fconfig%2Froute&page=%2Fapi%2Fadmin%2Fyoutube%2Fconfig%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fyoutube%2Fconfig%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();