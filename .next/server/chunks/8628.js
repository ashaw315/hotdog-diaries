exports.id=8628,exports.ids=[8628],exports.modules={7462:(a,b,c)=>{"use strict";c.a(a,async(a,d)=>{try{c.d(b,{db:()=>j,rP:()=>h});var e=c(64939),f=c(83376),g=a([e]);e=(g.then?(await g)():g)[0];class i{constructor(){this.pool=null,this.isVercel=!1,this.isVercel=!!process.env.POSTGRES_URL}getConfig(){return this.isVercel?{host:process.env.POSTGRES_HOST,port:5432,database:process.env.POSTGRES_DATABASE,user:process.env.POSTGRES_USER,password:process.env.POSTGRES_PASSWORD,ssl:!0,max:20,idleTimeoutMillis:3e4,connectionTimeoutMillis:2e3}:{host:process.env.DATABASE_HOST||"localhost",port:parseInt(process.env.DATABASE_PORT||"5432"),database:process.env.DATABASE_NAME||"hotdog_diaries_dev",user:process.env.DATABASE_USER||"postgres",password:process.env.DATABASE_PASSWORD||"password",ssl:!1,max:10,idleTimeoutMillis:3e4,connectionTimeoutMillis:2e3}}async connect(){if(this.pool)return;let a=this.getConfig();this.pool=new e.Pool(a),this.pool.on("error",a=>{console.error("Unexpected database error on idle client",a)}),this.pool.on("connect",()=>{console.log("Database connection established")}),this.pool.on("remove",()=>{console.log("Database connection removed")});try{let a=await this.pool.connect();await a.query("SELECT NOW()"),a.release(),console.log("Database connection successful")}catch(a){throw console.error("Database connection failed:",a),a}}async disconnect(){this.pool&&(await this.pool.end(),this.pool=null,console.log("Database connection closed"))}async query(a,b){if(this.isVercel)return await f.ll.query(a,b||[]);this.pool||await this.connect();let c=Date.now();try{let d=await this.pool.query(a,b),e=Date.now()-c;return console.log("Query executed",{text:a,duration:e,rows:d.rowCount}),d}catch(d){let b=Date.now()-c;throw console.error("Query error",{text:a,duration:b,error:d}),d}}async getClient(){if(this.isVercel)throw Error("Client connections not supported in Vercel environment");if(!this.pool)throw Error("Database not connected");return await this.pool.connect()}async healthCheck(){try{let a=Date.now();await this.query("SELECT 1 as health_check");let b=Date.now()-a;return{connected:!0,latency:b}}catch(a){return{connected:!1,error:a instanceof Error?a.message:"Unknown error"}}}async transaction(a){if(this.isVercel)throw Error("Transactions not supported in Vercel environment with @vercel/postgres");let b=await this.getClient();try{await b.query("BEGIN");let c=await a(b);return await b.query("COMMIT"),c}catch(a){throw await b.query("ROLLBACK"),a}finally{b.release()}}}let j=new i;async function h(a,b,c,d){try{await j.query(`INSERT INTO system_logs (log_level, message, component, metadata, created_at)
       VALUES ($1, $2, $3, $4, NOW())`,[a,b,c,d?JSON.stringify(d):null])}catch(a){console.error("Failed to log to database:",a)}}d()}catch(a){d(a)}})},17605:(a,b,c)=>{"use strict";c.a(a,async(a,d)=>{try{c.d(b,{q:()=>i});var e=c(7462),f=c(35144),g=a([e]);e=(g.then?(await g)():g)[0];class h{static{this.DEFAULT_MEAL_TIMES=["08:00","10:00","12:00","15:00","18:00","20:00"]}static{this.DEFAULT_TIMEZONE="America/New_York"}async getScheduleConfig(){try{let a=await e.db.query("SELECT * FROM schedule_config ORDER BY created_at DESC LIMIT 1");if(0===a.rows.length)return await this.createDefaultScheduleConfig();return a.rows[0]}catch(a){throw await (0,e.rP)(f.$b.ERROR,"Failed to get schedule config","SchedulingService",{error:a instanceof Error?a.message:"Unknown error"}),a}}async updateScheduleConfig(a){try{let b=await this.getScheduleConfig(),c=await e.db.query(`UPDATE schedule_config 
         SET meal_times = $1, timezone = $2, is_enabled = $3, updated_at = NOW()
         WHERE id = $4
         RETURNING *`,[a.meal_times||b.meal_times,a.timezone||b.timezone,void 0!==a.is_enabled?a.is_enabled:b.is_enabled,b.id]);return await (0,e.rP)(f.$b.INFO,"Schedule config updated","SchedulingService",{updatedConfig:c.rows[0]}),c.rows[0]}catch(a){throw await (0,e.rP)(f.$b.ERROR,"Failed to update schedule config","SchedulingService",{error:a instanceof Error?a.message:"Unknown error"}),a}}async scheduleNextPost(){try{if(!(await this.getScheduleConfig()).is_enabled)return await (0,e.rP)(f.$b.INFO,"Scheduling disabled, no next post scheduled","SchedulingService"),null;let a=await this.getNextScheduledTime();if(!a)return await (0,e.rP)(f.$b.WARN,"No next scheduled time available","SchedulingService"),null;return await (0,e.rP)(f.$b.INFO,"Next post scheduled","SchedulingService",{nextScheduledTime:a}),a}catch(a){throw await (0,e.rP)(f.$b.ERROR,"Failed to schedule next post","SchedulingService",{error:a instanceof Error?a.message:"Unknown error"}),a}}async getNextScheduledTime(){try{let a=await this.getScheduleConfig(),b=new Date,c=a.timezone||h.DEFAULT_TIMEZONE,d=a.meal_times||h.DEFAULT_MEAL_TIMES,e=new Date(b.toLocaleString("en-US",{timeZone:c})),f=e.toISOString().split("T")[0];for(let a of d.sort()){let[d,e]=a.split(":").map(Number),g=new Date(`${f}T${a}:00`),h=new Date(g.toLocaleString("en-US",{timeZone:c}));if(h>b&&!await this.hasPostedAtTime(g,a))return h}let g=new Date(e);g.setDate(g.getDate()+1);let i=g.toISOString().split("T")[0],j=d.sort()[0],k=new Date(`${i}T${j}:00`);return new Date(k.toLocaleString("en-US",{timeZone:c}))}catch(a){return await (0,e.rP)(f.$b.ERROR,"Failed to get next scheduled time","SchedulingService",{error:a instanceof Error?a.message:"Unknown error"}),null}}async isPostingTime(a=5){try{let b=await this.getScheduleConfig();if(!b.is_enabled)return!1;let c=new Date,d=b.timezone||h.DEFAULT_TIMEZONE,e=b.meal_times||h.DEFAULT_MEAL_TIMES,f=new Date(c.toLocaleString("en-US",{timeZone:d})),g=f.getHours(),i=f.getMinutes();for(let b of e){let[c,d]=b.split(":").map(Number);if(Math.abs(60*g+i-(60*c+d))<=a)return!await this.hasPostedAtTime(f,b)}return!1}catch(a){return await (0,e.rP)(f.$b.ERROR,"Failed to check if posting time","SchedulingService",{error:a instanceof Error?a.message:"Unknown error"}),!1}}async selectRandomContent(){try{let a=await e.db.query(`SELECT * FROM content_queue 
         WHERE is_approved = true 
         AND is_posted = false 
         ORDER BY RANDOM() 
         LIMIT 1`);if(0===a.rows.length)return await (0,e.rP)(f.$b.WARN,"No approved content available for posting","SchedulingService"),null;let b=a.rows[0];return await (0,e.rP)(f.$b.INFO,"Random content selected for posting","SchedulingService",{contentId:b.id,contentType:b.content_type}),b}catch(a){throw await (0,e.rP)(f.$b.ERROR,"Failed to select random content","SchedulingService",{error:a instanceof Error?a.message:"Unknown error"}),a}}async getPostingSchedule(){try{let a=await this.getScheduleConfig(),b=new Date,c=a.timezone||h.DEFAULT_TIMEZONE,d=a.meal_times||h.DEFAULT_MEAL_TIMES,e=await this.getNextScheduledTime(),f=await this.isPostingTime(),g=new Date(b.toLocaleString("en-US",{timeZone:c})).toISOString().split("T")[0],i=await Promise.all(d.map(async a=>{let b=new Date(`${g}T${a}:00`),d=await this.hasPostedAtTime(b,a);return{time:a,posted:d,scheduledDate:new Date(b.toLocaleString("en-US",{timeZone:c}))}}));return{nextPostTime:e||new Date,nextMealTime:e&&d.find(a=>{let[b,c]=a.split(":").map(Number);return e.getHours()===b&&e.getMinutes()===c})||d[0],timeUntilNext:e?e.getTime()-b.getTime():0,isPostingTime:f,todaysSchedule:i.sort((a,b)=>a.time.localeCompare(b.time))}}catch(a){throw await (0,e.rP)(f.$b.ERROR,"Failed to get posting schedule","SchedulingService",{error:a instanceof Error?a.message:"Unknown error"}),a}}async pauseScheduling(){try{await this.updateScheduleConfig({is_enabled:!1}),await (0,e.rP)(f.$b.INFO,"Scheduling paused","SchedulingService")}catch(a){throw await (0,e.rP)(f.$b.ERROR,"Failed to pause scheduling","SchedulingService",{error:a instanceof Error?a.message:"Unknown error"}),a}}async resumeScheduling(){try{await this.updateScheduleConfig({is_enabled:!0}),await (0,e.rP)(f.$b.INFO,"Scheduling resumed","SchedulingService")}catch(a){throw await (0,e.rP)(f.$b.ERROR,"Failed to resume scheduling","SchedulingService",{error:a instanceof Error?a.message:"Unknown error"}),a}}async createDefaultScheduleConfig(){let a=await e.db.query(`INSERT INTO schedule_config (meal_times, timezone, is_enabled, created_at, updated_at)
       VALUES ($1, $2, $3, NOW(), NOW())
       RETURNING *`,[h.DEFAULT_MEAL_TIMES,h.DEFAULT_TIMEZONE,!0]);return await (0,e.rP)(f.$b.INFO,"Default schedule config created","SchedulingService",{config:a.rows[0]}),a.rows[0]}async hasPostedAtTime(a,b){let c=new Date(a);c.setHours(0,0,0,0);let d=new Date(a);d.setHours(23,59,59,999);let f=await e.db.query(`SELECT COUNT(*) as count FROM posted_content 
       WHERE posted_at >= $1 AND posted_at <= $2
       AND DATE_PART('hour', posted_at) = $3
       AND DATE_PART('minute', posted_at) = $4`,[c.toISOString(),d.toISOString(),...b.split(":").map(Number)]);return parseInt(f.rows[0].count)>0}}let i=new h;d()}catch(a){d(a)}})},35144:(a,b,c)=>{"use strict";c.d(b,{$b:()=>f,NR:()=>e,cM:()=>d});var d=function(a){return a.TEXT="text",a.IMAGE="image",a.VIDEO="video",a.MIXED="mixed",a}({}),e=function(a){return a.REDDIT="reddit",a.INSTAGRAM="instagram",a.FACEBOOK="facebook",a.TIKTOK="tiktok",a}({}),f=function(a){return a.DEBUG="debug",a.INFO="info",a.WARN="warn",a.ERROR="error",a.FATAL="fatal",a}({})},47990:()=>{},51673:(a,b,c)=>{"use strict";c.a(a,async(a,d)=>{try{c.d(b,{O:()=>j});var e=c(7462),f=c(35144),g=c(17605),h=a([e,g]);[e,g]=h.then?(await h)():h;class i{static{this.MIN_QUEUE_SIZE=5}static{this.CRITICAL_QUEUE_SIZE=2}async postContent(a,b=!1){try{let c=await e.db.getClient();try{await c.query("BEGIN");let d=await c.query("SELECT * FROM content_queue WHERE id = $1 AND is_approved = true AND is_posted = false",[a]);if(0===d.rows.length)return await c.query("ROLLBACK"),{success:!1,error:"Content not found or not available for posting"};let g=d.rows[0],h=await this.calculatePostOrder(),i=new Date;return await c.query("UPDATE content_queue SET is_posted = true, posted_at = $1, updated_at = NOW() WHERE id = $2",[i,a]),await c.query(`INSERT INTO posted_content (content_queue_id, posted_at, post_order, created_at, updated_at)
           VALUES ($1, $2, $3, NOW(), NOW())
           RETURNING *`,[a,i,h]),await c.query("COMMIT"),await (0,e.rP)(f.$b.INFO,"Content posted successfully","PostingService",{contentId:a,postOrder:h,contentType:g.content_type,sourcePlatform:g.source_platform,manualTrigger:b}),{success:!0,contentId:a,postOrder:h}}catch(a){throw await c.query("ROLLBACK"),a}finally{c.release()}}catch(b){return await (0,e.rP)(f.$b.ERROR,"Failed to post content","PostingService",{contentId:a,error:b instanceof Error?b.message:"Unknown error"}),{success:!1,error:b instanceof Error?b.message:"Unknown error"}}}async ensureContentAvailable(){try{let a=await this.getQueueStatus();if(0===a.totalApproved)return await (0,e.rP)(f.$b.ERROR,"No content available for posting","PostingService",{queueStatus:a}),!1;return"critical"===a.alertLevel?await (0,e.rP)(f.$b.WARN,"Critical queue level - very low content available","PostingService",{queueStatus:a}):"low"===a.alertLevel&&await (0,e.rP)(f.$b.WARN,"Low queue level - content running low","PostingService",{queueStatus:a}),!0}catch(a){return await (0,e.rP)(f.$b.ERROR,"Failed to check content availability","PostingService",{error:a instanceof Error?a.message:"Unknown error"}),!1}}async handleEmptyQueue(){try{let a=await this.getQueueStatus();0===a.totalApproved&&(await (0,e.rP)(f.$b.ERROR,"Empty queue detected - no content available for posting","PostingService",{queueStatus:a}),await g.q.pauseScheduling(),await (0,e.rP)(f.$b.INFO,"Automatic scheduling paused due to empty queue","PostingService"))}catch(a){await (0,e.rP)(f.$b.ERROR,"Failed to handle empty queue","PostingService",{error:a instanceof Error?a.message:"Unknown error"})}}async getQueueStatus(){try{let a=(await e.db.query(`
        SELECT 
          COUNT(*) FILTER (WHERE is_approved = true AND is_posted = false) as total_approved,
          COUNT(*) FILTER (WHERE is_approved = false AND is_posted = false) as total_pending,
          COUNT(*) FILTER (WHERE is_posted = true) as total_posted
        FROM content_queue
      `)).rows[0],b=parseInt(a.total_approved),c=parseInt(a.total_pending),d=parseInt(a.total_posted),f="none",g="Queue is healthy",h=!0;return 0===b?(f="critical",g="No approved content available for posting",h=!1):b<=i.CRITICAL_QUEUE_SIZE?(f="critical",g=`Critical: Only ${b} approved items remaining`,h=!1):b<=i.MIN_QUEUE_SIZE&&(f="low",g=`Low: Only ${b} approved items remaining`,h=!0),{totalApproved:b,totalPending:c,totalPosted:d,isHealthy:h,alertLevel:f,message:g}}catch(a){return await (0,e.rP)(f.$b.ERROR,"Failed to get queue status","PostingService",{error:a instanceof Error?a.message:"Unknown error"}),{totalApproved:0,totalPending:0,totalPosted:0,isHealthy:!1,alertLevel:"critical",message:"Failed to check queue status"}}}async getPostingHistory(a=10){try{return(await e.db.query(`
        SELECT 
          pc.*,
          cq.content_type,
          cq.source_platform,
          cq.content_text,
          cq.content_image_url,
          cq.content_video_url,
          cq.original_author,
          cq.original_url
        FROM posted_content pc
        JOIN content_queue cq ON pc.content_queue_id = cq.id
        ORDER BY pc.posted_at DESC
        LIMIT $1
      `,[a])).rows}catch(a){return await (0,e.rP)(f.$b.ERROR,"Failed to get posting history","PostingService",{error:a instanceof Error?a.message:"Unknown error"}),[]}}async getPostingStats(){try{let a=(await e.db.query(`
        SELECT 
          COUNT(*) FILTER (WHERE posted_at >= CURRENT_DATE) as todays_posts,
          COUNT(*) FILTER (WHERE posted_at >= CURRENT_DATE - INTERVAL '7 days') as this_weeks_posts,
          COUNT(*) FILTER (WHERE posted_at >= CURRENT_DATE - INTERVAL '30 days') as this_months_posts,
          COUNT(*) as total_posts,
          ROUND(
            COUNT(*) FILTER (WHERE posted_at >= CURRENT_DATE - INTERVAL '30 days') / 30.0, 
            2
          ) as avg_posts_per_day
        FROM posted_content
      `)).rows[0];return{todaysPosts:parseInt(a.todays_posts),thisWeeksPosts:parseInt(a.this_weeks_posts),thisMonthsPosts:parseInt(a.this_months_posts),totalPosts:parseInt(a.total_posts),avgPostsPerDay:parseFloat(a.avg_posts_per_day)}}catch(a){return await (0,e.rP)(f.$b.ERROR,"Failed to get posting stats","PostingService",{error:a instanceof Error?a.message:"Unknown error"}),{todaysPosts:0,thisWeeksPosts:0,thisMonthsPosts:0,totalPosts:0,avgPostsPerDay:0}}}async processScheduledPost(){try{if(!(await g.q.getScheduleConfig()).is_enabled)return await (0,e.rP)(f.$b.INFO,"Scheduling disabled, skipping scheduled post","PostingService"),{success:!1,error:"Scheduling is disabled"};if(!await g.q.isPostingTime())return await (0,e.rP)(f.$b.INFO,"Not posting time, skipping scheduled post","PostingService"),{success:!1,error:"Not posting time"};if(!await this.ensureContentAvailable())return await this.handleEmptyQueue(),{success:!1,error:"No content available for posting"};let a=await g.q.selectRandomContent();if(!a)return await this.handleEmptyQueue(),{success:!1,error:"Failed to select content for posting"};let b=await this.postContent(a.id,!1);return b.success&&await (0,e.rP)(f.$b.INFO,"Scheduled post processed successfully","PostingService",{contentId:a.id,postOrder:b.postOrder}),b}catch(a){return await (0,e.rP)(f.$b.ERROR,"Failed to process scheduled post","PostingService",{error:a instanceof Error?a.message:"Unknown error"}),{success:!1,error:a instanceof Error?a.message:"Unknown error"}}}async calculatePostOrder(){let a=new Date,b=new Date(a);b.setHours(0,0,0,0);let c=new Date(a);c.setHours(23,59,59,999);let d=await e.db.query(`SELECT COALESCE(MAX(post_order), 0) + 1 as next_order
       FROM posted_content
       WHERE posted_at >= $1 AND posted_at <= $2`,[b,c]);return Math.min(d.rows[0].next_order,6)}}let j=new i;d()}catch(a){d(a)}})},78335:()=>{},96487:()=>{}};