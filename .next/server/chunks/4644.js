"use strict";exports.id=4644,exports.ids=[4644],exports.modules={34644:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.d(b,{uo:()=>k});var e=c(99986),f=c(55229),g=c(59794),h=c(49526),i=a([e,f,g]);[e,f,g]=i.then?(await i)():i;class j{constructor(){this.alertThresholds=[],this.suppressionMap=new Map,this.throttleMap=new Map,this.initializeEmailTransporter(),this.initializeDefaultThresholds(),this.ensureAlertsTable()}async sendCriticalAlert(a,b,c="system_error",d,e=["email","log"]){let f={type:c,severity:"critical",title:a,message:b,metadata:d,channels:e,createdAt:new Date,acknowledged:!1,retryCount:0};await this.sendAlert(f)}async sendWarningAlert(a,b,c="performance_degradation",d,e=["email","log"]){let f={type:c,severity:"medium",title:a,message:b,metadata:d,channels:e,createdAt:new Date,acknowledged:!1,retryCount:0};await this.sendAlert(f)}async checkAlertThresholds(a){for(let b of this.alertThresholds)await this.checkThreshold(b,a)}async monitorSystemHealth(a){if(a.overallStatus===g.VQ.CRITICAL){let b=this.getCriticalChecks(a);await this.sendCriticalAlert("System Health Critical",`System health is critical. Failed checks: ${b.join(", ")}`,"system_error",{overallStatus:a.overallStatus,failedChecks:b,uptime:a.uptime,summary:a.summary})}else if(a.overallStatus===g.VQ.WARNING){let b=this.getWarningChecks(a);await this.sendWarningAlert("System Health Warning",`System health has warnings. Issues: ${b.join(", ")}`,"performance_degradation",{overallStatus:a.overallStatus,warningChecks:b,uptime:a.uptime,summary:a.summary})}await this.checkDatabaseHealth(a.checks.database),await this.checkAPIHealth(a.checks.apis),await this.checkServiceHealth(a.checks.services),await this.checkSystemResources(a.checks.system)}async manageAlertFrequency(a){let b=`${a.type}_${a.severity}`,c=this.suppressionMap.get(b);if(c&&c>new Date)return await e.RE.logInfo("AlertService","Alert suppressed",{alertType:a.type,severity:a.severity,suppressedUntil:c}),!1;let d=this.throttleMap.get(b),f=new Date;if(d)if(f.getTime()-d.windowStart.getTime()<9e5){if(d.count>=this.getMaxAlertsPerWindow(a.severity)){let c=new Date(f.getTime()+36e5);return this.suppressionMap.set(b,c),await e.RE.logWarning("AlertService","Alert throttled and suppressed",{alertType:a.type,severity:a.severity,throttleCount:d.count,suppressUntil:c}),!1}d.count++}else this.throttleMap.set(b,{count:1,windowStart:f});else this.throttleMap.set(b,{count:1,windowStart:f});return!0}async sendAlert(a){if(await this.manageAlertFrequency(a))try{let b=await this.storeAlert(a);a.id=b;let c=a.channels.map(b=>this.sendThroughChannel(a,b));await Promise.allSettled(c),await e.RE.logInfo("AlertService","Alert sent successfully",{alertId:a.id,type:a.type,severity:a.severity,channels:a.channels,title:a.title})}catch(b){await e.RE.logError("AlertService","Failed to send alert",{alert:{type:a.type,severity:a.severity,title:a.title},error:b.message},b),await this.scheduleRetry(a)}}async sendThroughChannel(a,b){switch(b){case"email":await this.sendEmailAlert(a);break;case"webhook":await this.sendWebhookAlert(a);break;case"log":await this.logAlert(a);break;case"console":this.consoleAlert(a);break;default:throw Error(`Unknown alert channel: ${b}`)}}async sendEmailAlert(a){if(!this.emailTransporter)throw Error("Email transporter not configured");let b=process.env.ADMIN_EMAIL;if(!b)throw Error("Admin email not configured");let c=`[${a.severity.toUpperCase()}] ${a.title}`,d=this.generateEmailHTML(a);await this.emailTransporter.sendMail({from:process.env.SMTP_FROM||"alerts@hotdog-diaries.com",to:b,subject:c,html:d,priority:"critical"===a.severity?"high":"normal"})}async sendWebhookAlert(a){let b=process.env.ALERT_WEBHOOK_URL;if(!b)throw Error("Webhook URL not configured");let c={alert:{id:a.id,type:a.type,severity:a.severity,title:a.title,message:a.message,metadata:a.metadata,timestamp:a.createdAt.toISOString()},source:"hotdog-diaries",environment:"production"},d=await fetch(b,{method:"POST",headers:{"Content-Type":"application/json","User-Agent":"Hotdog-Diaries-Alert-Service"},body:JSON.stringify(c)});if(!d.ok)throw Error(`Webhook failed with status ${d.status}`)}async logAlert(a){let b="critical"===a.severity?"error":"warning";"error"===b?await e.RE.logError("AlertService",a.message,{alertId:a.id,alertType:a.type,severity:a.severity,title:a.title,metadata:a.metadata}):await e.RE.logWarning("AlertService",a.message,{alertId:a.id,alertType:a.type,severity:a.severity,title:a.title,metadata:a.metadata})}consoleAlert(a){let b=`[ALERT:${a.severity.toUpperCase()}]`,c=`${b} ${a.title}: ${a.message}`;"critical"===a.severity?console.error(c,a.metadata):console.warn(c,a.metadata)}async storeAlert(a){return(await (0,f.Yr)("system_alerts").values({type:a.type,severity:a.severity,title:a.title,message:a.message,metadata:JSON.stringify(a.metadata||{}),channels:JSON.stringify(a.channels),created_at:a.createdAt,acknowledged:a.acknowledged,retry_count:a.retryCount}).returning(["id"]).first()).id}async getAlertHistory(a=100,b=0,c,d,e){let g=(0,f.P)("system_alerts").select(["id","type","severity","title","message","metadata","channels","created_at","resolved_at","acknowledged","acknowledged_by","acknowledged_at"]).orderBy("created_at","DESC");c&&c.length>0&&(g=g.whereIn("severity",c)),d&&d.length>0&&(g=g.whereIn("type",d)),e&&(g=g.where("created_at",">=",e.start).where("created_at","<=",e.end));let h=await g.clone().count("*").first(),i=parseInt(h?.count||"0"),j=(await g.limit(a).offset(b).execute()).map(a=>({id:a.id,type:a.type,severity:a.severity,title:a.title,message:a.message,metadata:a.metadata?JSON.parse(a.metadata):void 0,channels:a.channels?JSON.parse(a.channels):[],createdAt:new Date(a.created_at),resolvedAt:a.resolved_at?new Date(a.resolved_at):void 0,acknowledged:a.acknowledged,acknowledgedBy:a.acknowledged_by,acknowledgedAt:a.acknowledged_at?new Date(a.acknowledged_at):void 0,retryCount:0})),k={},l={},m=0;return j.forEach(a=>{k[a.type]=(k[a.type]||0)+1,l[a.severity]=(l[a.severity]||0)+1,a.resolvedAt&&m++}),{alerts:j,total:i,byType:k,bySeverity:l,resolvedCount:m,unresolvedCount:i-m}}async acknowledgeAlert(a,b){await (0,f.P)("system_alerts").where("id",a).update({acknowledged:!0,acknowledged_by:b,acknowledged_at:new Date}),await e.RE.logInfo("AlertService","Alert acknowledged",{alertId:a,acknowledgedBy:b})}async resolveAlert(a,b){await (0,f.P)("system_alerts").where("id",a).update({resolved_at:new Date,acknowledged:!0,acknowledged_by:b,acknowledged_at:new Date}),await e.RE.logInfo("AlertService","Alert resolved",{alertId:a,resolvedBy:b})}async testAlertSystem(){await this.sendWarningAlert("Alert System Test","This is a test alert to verify the alert system is working correctly.","system_error",{test:!0,timestamp:new Date().toISOString()})}initializeEmailTransporter(){let a=process.env.SMTP_HOST,b=process.env.SMTP_PORT,c=process.env.SMTP_USER,d=process.env.SMTP_PASS;a&&c&&d&&(this.emailTransporter=h.createTransporter({host:a,port:parseInt(b||"587"),secure:!1,auth:{user:c,pass:d}}))}initializeDefaultThresholds(){this.alertThresholds.push({metric:"queue_size",warning:100,critical:500,unit:"items",checkIntervalMinutes:5},{metric:"error_rate",warning:5,critical:10,unit:"percent",checkIntervalMinutes:5},{metric:"memory_usage",warning:80,critical:95,unit:"percent",checkIntervalMinutes:10})}async ensureAlertsTable(){}async checkThreshold(a,b){let c=b[a.metric];void 0!==c&&(c>=a.critical?await this.sendCriticalAlert(`${a.metric} Critical`,`${a.metric} has reached critical level: ${c}${a.unit}`,"performance_degradation",{metric:a.metric,value:c,threshold:a.critical,unit:a.unit}):c>=a.warning&&await this.sendWarningAlert(`${a.metric} Warning`,`${a.metric} has reached warning level: ${c}${a.unit}`,"performance_degradation",{metric:a.metric,value:c,threshold:a.warning,unit:a.unit}))}getCriticalChecks(a){let b=[],{checks:c}=a;return c.database.status===g.VQ.CRITICAL&&b.push("Database"),c.apis.reddit.status===g.VQ.CRITICAL&&b.push("Reddit API"),c.apis.instagram.status===g.VQ.CRITICAL&&b.push("Instagram API"),c.apis.tiktok.status===g.VQ.CRITICAL&&b.push("TikTok API"),c.services.contentQueue.status===g.VQ.CRITICAL&&b.push("Content Queue"),c.services.scheduler.status===g.VQ.CRITICAL&&b.push("Scheduler"),b}getWarningChecks(a){let b=[],{checks:c}=a;return c.database.status===g.VQ.WARNING&&b.push("Database"),c.apis.reddit.status===g.VQ.WARNING&&b.push("Reddit API"),c.apis.instagram.status===g.VQ.WARNING&&b.push("Instagram API"),c.apis.tiktok.status===g.VQ.WARNING&&b.push("TikTok API"),c.services.contentQueue.status===g.VQ.WARNING&&b.push("Content Queue"),c.services.scheduler.status===g.VQ.WARNING&&b.push("Scheduler"),b}async checkDatabaseHealth(a){a.status===g.VQ.CRITICAL&&await this.sendCriticalAlert("Database Critical","Database is not responding or has critical issues","database_issue",{databaseCheck:a})}async checkAPIHealth(a){for(let[b,c]of Object.entries(a))c.status===g.VQ.CRITICAL&&await this.sendCriticalAlert(`${b} API Critical`,`${b} API is not responding or authentication failed`,"api_failure",{platform:b,apiCheck:c})}async checkServiceHealth(a){a.contentQueue.status===g.VQ.CRITICAL&&await this.sendCriticalAlert("Content Queue Critical","Content queue has critical issues","queue_issue",{queueCheck:a.contentQueue}),a.scheduler.status===g.VQ.CRITICAL&&await this.sendCriticalAlert("Scheduler Critical","Content scheduler is not working","scheduler_failure",{schedulerCheck:a.scheduler})}async checkSystemResources(a){a.memory.status===g.VQ.CRITICAL&&await this.sendCriticalAlert("Memory Critical","System memory usage is critical","resource_exhaustion",{memoryCheck:a.memory})}getMaxAlertsPerWindow(a){switch(a){case"critical":return 3;case"high":return 5;case"medium":default:return 10;case"low":return 20}}generateEmailHTML(a){return`
      <html>
        <body style="font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5;">
          <div style="max-width: 600px; margin: 0 auto; background-color: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
            <div style="background-color: ${this.getSeverityColor(a.severity)}; color: white; padding: 20px;">
              <h1 style="margin: 0; font-size: 24px;">${a.title}</h1>
              <p style="margin: 5px 0 0 0; opacity: 0.9;">Severity: ${a.severity.toUpperCase()}</p>
            </div>
            <div style="padding: 20px;">
              <h2 style="color: #333; margin-top: 0;">Alert Details</h2>
              <p style="color: #666; line-height: 1.6;">${a.message}</p>
              
              <div style="background-color: #f8f9fa; padding: 15px; border-radius: 4px; margin: 20px 0;">
                <h3 style="margin-top: 0; color: #333;">Alert Information</h3>
                <p><strong>Type:</strong> ${a.type}</p>
                <p><strong>Time:</strong> ${a.createdAt.toLocaleString()}</p>
                <p><strong>Alert ID:</strong> ${a.id||"N/A"}</p>
              </div>
              
              ${a.metadata?`
                <div style="background-color: #f8f9fa; padding: 15px; border-radius: 4px;">
                  <h3 style="margin-top: 0; color: #333;">Additional Details</h3>
                  <pre style="background-color: #e9ecef; padding: 10px; border-radius: 4px; overflow-x: auto; font-size: 12px;">${JSON.stringify(a.metadata,null,2)}</pre>
                </div>
              `:""}
              
              <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid #eee; text-align: center; color: #666; font-size: 12px;">
                <p>This alert was generated by Hotdog Diaries monitoring system.</p>
                <p>Environment: production</p>
              </div>
            </div>
          </div>
        </body>
      </html>
    `}getSeverityColor(a){switch(a){case"critical":return"#dc3545";case"high":return"#fd7e14";case"medium":return"#ffc107";case"low":return"#17a2b8";default:return"#6c757d"}}async scheduleRetry(a){let b=Math.min(1e3*Math.pow(2,a.retryCount),3e5);setTimeout(async()=>{a.retryCount<3&&(a.retryCount++,await this.sendAlert(a))},b)}}let k=new j;d()}catch(a){d(a)}})}};