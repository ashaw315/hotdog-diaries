name: Post-Remediation Validation
on:
  repository_dispatch:
    types:
      - post-remediation-check
  workflow_dispatch:
    inputs:
      manual_trigger:
        description: Manually trigger post-remediation validation
        required: false
        type: boolean
        default: false
env:
  NODE_OPTIONS: --max-old-space-size=4096
jobs:
  validate-remediation:
    name: Validate Phase 3 Remediation Results
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1
      - name: üìä Extract Remediation Context
        id: context
        run: |
          echo "üîç Extracting remediation context from dispatch payload..."

          # Extract data from repository_dispatch payload
          SECURITY_IMPROVEMENT="${{ github.event.client_payload.security_improvement }}"
          BUILD_DIAGNOSTICS="${{ github.event.client_payload.build_diagnostics }}"
          TRIGGERED_BY="${{ github.event.client_payload.triggered_by }}"
          COMMIT_SHA="${{ github.event.client_payload.commit_sha }}"
          REMEDIATION_TIME="${{ github.event.client_payload.remediation_timestamp }}"

          # Set defaults for manual triggers
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            SECURITY_IMPROVEMENT="unknown"
            BUILD_DIAGNOSTICS="unknown"
            TRIGGERED_BY="manual"
            COMMIT_SHA="${{ github.sha }}"
            REMEDIATION_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          fi

          echo "security_improvement=$SECURITY_IMPROVEMENT" >> $GITHUB_OUTPUT
          echo "build_diagnostics=$BUILD_DIAGNOSTICS" >> $GITHUB_OUTPUT
          echo "triggered_by=$TRIGGERED_BY" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "remediation_time=$REMEDIATION_TIME" >> $GITHUB_OUTPUT

          echo "üìã Remediation Context:"
          echo "- Security Improvement: $SECURITY_IMPROVEMENT"
          echo "- Build Diagnostics: $BUILD_DIAGNOSTICS"
          echo "- Triggered By: $TRIGGERED_BY"
          echo "- Commit SHA: $COMMIT_SHA"
          echo "- Remediation Time: $REMEDIATION_TIME"
      - name: Setup Node.js with caching
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: npm
      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --no-fund
          npm install --no-save tsx
      - name: üß™ Re-run CI Health Checks
        id: health-recheck
        run: |
          echo "üß™ Re-running CI health checks to validate remediation..."

          # Run the critical failure gatekeeper in report-only mode
          npx tsx scripts/checkCriticalFailures.ts --report-only || true

          # Extract health metrics from the report
          if [[ -f "reports/ci-health-gate.md" ]]; then
            echo "health_report_generated=true" >> $GITHUB_OUTPUT
            
            # Extract confidence score
            if grep -q "Confidence Score:" reports/ci-health-gate.md; then
              CONFIDENCE=$(grep "Confidence Score:" reports/ci-health-gate.md | head -1 | grep -oE '[0-9]+' || echo "0")
              echo "confidence_score=$CONFIDENCE" >> $GITHUB_OUTPUT
              echo "üìä Current confidence score: $CONFIDENCE/100"
            fi
            
            # Check CI readiness
            if grep -q "CI Readiness: ‚úÖ Ready" reports/ci-health-gate.md; then
              echo "ci_ready=true" >> $GITHUB_OUTPUT
              echo "‚úÖ CI is ready to proceed"
            else
              echo "ci_ready=false" >> $GITHUB_OUTPUT
              echo "‚ùå CI is still blocked"
            fi
            
            # Check for remaining blockers
            BLOCKERS=$(grep -c "Blocking Issues:" reports/ci-health-gate.md || echo "0")
            echo "blocking_issues=$BLOCKERS" >> $GITHUB_OUTPUT
          else
            echo "health_report_generated=false" >> $GITHUB_OUTPUT
            echo "ci_ready=false" >> $GITHUB_OUTPUT
            echo "confidence_score=0" >> $GITHUB_OUTPUT
          fi
      - name: üîç Validate Specific Components
        id: component-validation
        run: |
          echo "üîç Validating specific components after remediation..."

          # Test lint status
          echo "üìù Testing lint status..."
          if npm run lint:check 2>/dev/null || true; then
            echo "lint_status=pass" >> $GITHUB_OUTPUT
            echo "‚úÖ Lint checks passing"
          else
            echo "lint_status=fail" >> $GITHUB_OUTPUT
            echo "‚ùå Lint checks still failing"
          fi

          # Test security status (basic check)
          echo "üîí Testing security status..."
          if npm audit --audit-level=critical 2>/dev/null; then
            echo "security_status=pass" >> $GITHUB_OUTPUT
            echo "‚úÖ No critical security vulnerabilities"
          else
            echo "security_status=fail" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Critical security vulnerabilities remain"
          fi

          # Test build status
          echo "üèóÔ∏è Testing build status..."
          if timeout 120 npm run build 2>/dev/null; then
            echo "build_status=pass" >> $GITHUB_OUTPUT
            echo "‚úÖ Build completed successfully"
          else
            echo "build_status=fail" >> $GITHUB_OUTPUT
            echo "‚ùå Build still failing"
          fi
      - name: üìà Calculate Remediation Effectiveness
        id: effectiveness
        run: |
          echo "üìà Calculating remediation effectiveness..."

          # Get current health metrics
          CONFIDENCE="${{ steps.health-recheck.outputs.confidence_score }}"
          CI_READY="${{ steps.health-recheck.outputs.ci_ready }}"
          LINT_STATUS="${{ steps.component-validation.outputs.lint_status }}"
          SECURITY_STATUS="${{ steps.component-validation.outputs.security_status }}"
          BUILD_STATUS="${{ steps.component-validation.outputs.build_status }}"

          # Calculate effectiveness score
          EFFECTIVENESS=0

          # Base score from confidence
          if [[ "$CONFIDENCE" =~ ^[0-9]+$ ]]; then
            EFFECTIVENESS=$CONFIDENCE
          fi

          # Bonus points for component health
          [[ "$LINT_STATUS" == "pass" ]] && EFFECTIVENESS=$((EFFECTIVENESS + 5))
          [[ "$SECURITY_STATUS" == "pass" ]] && EFFECTIVENESS=$((EFFECTIVENESS + 10))
          [[ "$BUILD_STATUS" == "pass" ]] && EFFECTIVENESS=$((EFFECTIVENESS + 15))
          [[ "$CI_READY" == "true" ]] && EFFECTIVENESS=$((EFFECTIVENESS + 20))

          # Cap at 100
          [[ $EFFECTIVENESS -gt 100 ]] && EFFECTIVENESS=100

          echo "effectiveness_score=$EFFECTIVENESS" >> $GITHUB_OUTPUT
          echo "üìä Remediation effectiveness: $EFFECTIVENESS/100"

          # Determine overall status
          if [[ $EFFECTIVENESS -ge 80 && "$CI_READY" == "true" ]]; then
            echo "overall_status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Remediation was highly effective"
          elif [[ $EFFECTIVENESS -ge 60 ]]; then
            echo "overall_status=partial" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Remediation was partially effective"
          else
            echo "overall_status=failed" >> $GITHUB_OUTPUT
            echo "‚ùå Remediation was not effective"
          fi
      - name: üö® Check Rollback Requirements
        id: rollback-check
        if: steps.effectiveness.outputs.effectiveness_score < 30
        run: |
          echo "üö® Checking if rollback is required..."

          EFFECTIVENESS="${{ steps.effectiveness.outputs.effectiveness_score }}"
          CI_READY="${{ steps.health-recheck.outputs.ci_ready }}"

          echo "Current effectiveness: $EFFECTIVENESS/100"
          echo "CI Ready: $CI_READY"

          # Determine if rollback is needed
          if [[ $EFFECTIVENESS -lt 30 && "$CI_READY" == "false" ]]; then
            echo "rollback_required=true" >> $GITHUB_OUTPUT
            echo "üö® ROLLBACK REQUIRED: Health critically low after remediation"
            echo "rollback_reason=Health score $EFFECTIVENESS < 30 and CI still blocked" >> $GITHUB_OUTPUT
          else
            echo "rollback_required=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No rollback required"
          fi
      - name: üìä Generate Validation Summary
        run: >
          echo "üìä Post-Remediation Validation Summary" >> $GITHUB_STEP_SUMMARY

          echo "=======================================" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY


          echo "### üéØ Remediation Context" >> $GITHUB_STEP_SUMMARY

          echo "- **Triggered By:** ${{ steps.context.outputs.triggered_by }}" >> $GITHUB_STEP_SUMMARY

          echo "- **Commit SHA:** ${{ steps.context.outputs.commit_sha }}" >> $GITHUB_STEP_SUMMARY

          echo "- **Remediation Time:** ${{ steps.context.outputs.remediation_time }}" >> $GITHUB_STEP_SUMMARY

          echo "- **Security Improvement:** ${{ steps.context.outputs.security_improvement }}" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY


          echo "### üìà Validation Results" >> $GITHUB_STEP_SUMMARY

          echo "- **Overall Status:** ${{ steps.effectiveness.outputs.overall_status }}" >> $GITHUB_STEP_SUMMARY

          echo "- **Effectiveness Score:** ${{ steps.effectiveness.outputs.effectiveness_score }}/100" >>
          $GITHUB_STEP_SUMMARY

          echo "- **Confidence Score:** ${{ steps.health-recheck.outputs.confidence_score }}/100" >>
          $GITHUB_STEP_SUMMARY

          echo "- **CI Ready:** ${{ steps.health-recheck.outputs.ci_ready == 'true' && '‚úÖ Yes' || '‚ùå No' }}" >>
          $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY


          echo "### üîç Component Status" >> $GITHUB_STEP_SUMMARY

          echo "- **Lint:** ${{ steps.component-validation.outputs.lint_status == 'pass' && '‚úÖ Pass' || '‚ùå Fail' }}" >>
          $GITHUB_STEP_SUMMARY

          echo "- **Security:** ${{ steps.component-validation.outputs.security_status == 'pass' && '‚úÖ Pass' || '‚ùå Fail'
          }}" >> $GITHUB_STEP_SUMMARY

          echo "- **Build:** ${{ steps.component-validation.outputs.build_status == 'pass' && '‚úÖ Pass' || '‚ùå Fail' }}"
          >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY


          if [[ "${{ steps.rollback-check.outputs.rollback_required }}" == "true" ]]; then
            echo "### üö® Rollback Required" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** ${{ steps.rollback-check.outputs.rollback_reason }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi


          echo "### üìã Next Actions" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.effectiveness.outputs.overall_status }}" == "success" ]]; then
            echo "‚úÖ **Remediation successful** - CI can proceed normally" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.effectiveness.outputs.overall_status }}" == "partial" ]]; then
            echo "‚ö†Ô∏è **Partial success** - Review remaining issues and consider manual fixes" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Remediation failed** - Manual intervention required" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ steps.rollback-check.outputs.rollback_required }}" == "true" ]]; then
              echo "üö® **Consider rollback** - Health critically low" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      - name: Upload Post-Remediation Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: post-remediation-validation-reports
          path: |
            reports/ci-health-gate.md
            reports/build-diagnostics.md
            reports/security-deep-fix.md
          retention-days: 30
      - name: üìù Update Original PR with Validation Results
        if: github.event_name == 'repository_dispatch' && github.event.client_payload.commit_sha
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          echo "üìù Updating original PR with validation results..."


          # Find PR associated with the commit SHA

          COMMIT_SHA="${{ steps.context.outputs.commit_sha }}"


          # Create validation results comment

          cat > validation_comment.md << EOF

          ## üß™ Post-Remediation Validation Results


          **Validation Time:** $(date -u +%Y-%m-%dT%H:%M:%SZ)  

          **Triggered By:** ${{ steps.context.outputs.triggered_by }}


          ### üìä Results Summary

          - **Overall Status:** ${{ steps.effectiveness.outputs.overall_status == 'success' && '‚úÖ Success' ||
          steps.effectiveness.outputs.overall_status == 'partial' && '‚ö†Ô∏è Partial' || '‚ùå Failed' }}

          - **Effectiveness Score:** ${{ steps.effectiveness.outputs.effectiveness_score }}/100

          - **CI Ready:** ${{ steps.health-recheck.outputs.ci_ready == 'true' && '‚úÖ Yes' || '‚ùå No' }}


          ### üîç Component Validation

          - **Lint:** ${{ steps.component-validation.outputs.lint_status == 'pass' && '‚úÖ' || '‚ùå' }}

          - **Security:** ${{ steps.component-validation.outputs.security_status == 'pass' && '‚úÖ' || '‚ùå' }}

          - **Build:** ${{ steps.component-validation.outputs.build_status == 'pass' && '‚úÖ' || '‚ùå' }}


          ${{ steps.rollback-check.outputs.rollback_required == 'true' && '### üö® Rollback Required\n**Reason:** Health
          critically low after remediation\n' || '' }}


          > **Note:** This validation ran independently after Phase 3 auto-healing completed.

          EOF


          echo "‚úÖ Validation results prepared for PR update"
      - name: üéØ Final Validation Status
        run: |
          echo "üéØ Post-Remediation Validation Complete"
          echo "======================================="
          echo ""
          echo "üìä Overall Status: ${{ steps.effectiveness.outputs.overall_status }}"
          echo "üìà Effectiveness: ${{ steps.effectiveness.outputs.effectiveness_score }}/100"
          echo "üöÄ CI Ready: ${{ steps.health-recheck.outputs.ci_ready }}"
          echo ""

          if [[ "${{ steps.effectiveness.outputs.overall_status }}" == "success" ]]; then
            echo "‚úÖ Phase 3 auto-healing was successful!"
            echo "üéâ CI pipeline can proceed normally"
            exit 0
          elif [[ "${{ steps.effectiveness.outputs.overall_status }}" == "partial" ]]; then
            echo "‚ö†Ô∏è Phase 3 auto-healing was partially successful"
            echo "üîß Some manual intervention may be needed"
            exit 0
          else
            echo "‚ùå Phase 3 auto-healing was not effective"
            echo "üö® Manual intervention required"
            if [[ "${{ steps.rollback-check.outputs.rollback_required }}" == "true" ]]; then
              echo "üîÑ Consider rollback due to critically low health"
            fi
            exit 1
          fi
    needs: guard
    concurrency:
      group: validate-remediation-${{ github.ref }}
      cancel-in-progress: true
  guard:
    uses: ./.github/workflows/_posting-guard.yml
permissions:
  contents: read
