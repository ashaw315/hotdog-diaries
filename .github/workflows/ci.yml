name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  stability-check:
    name: CI Stability & Auto-Healing
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    outputs:
      ci-ready: ${{ steps.gatekeeper.outputs.ci-ready }}
      auto-fixes-applied: ${{ steps.gatekeeper.outputs.auto-fixes-applied }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üß© Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üß† Install tsx (temporary CI dependency)
        run: npm install --no-save tsx

      - name: üõ°Ô∏è Run Critical Failure Gatekeeper
        id: gatekeeper
        run: |
          echo "üõ°Ô∏è Running CI Stability & Auto-Healing System..."
          
          # Run the gatekeeper system
          npx tsx scripts/checkCriticalFailures.ts || GATEKEEPER_EXIT=$?
          
          # Check if auto-fixes were applied
          if [ -f "reports/ci-health-gate.md" ]; then
            AUTO_FIXES=$(grep -c "Auto-Fixes Applied" reports/ci-health-gate.md || echo "0")
            echo "auto-fixes-applied=$AUTO_FIXES" >> $GITHUB_OUTPUT
            
            # Check CI readiness from report
            if grep -q "CI Readiness: ‚úÖ Ready" reports/ci-health-gate.md; then
              echo "ci-ready=true" >> $GITHUB_OUTPUT
              echo "‚úÖ CI stability check passed"
            else
              echo "ci-ready=false" >> $GITHUB_OUTPUT
              echo "‚ùå CI stability check failed"
            fi
          else
            echo "ci-ready=false" >> $GITHUB_OUTPUT
            echo "auto-fixes-applied=0" >> $GITHUB_OUTPUT
          fi
          
          # Exit with gatekeeper result
          exit ${GATEKEEPER_EXIT:-0}

      - name: Upload stability reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-stability-reports
          path: |
            reports/ci-health-gate.md
            reports/lint-auto-fix.md
            reports/security-audit.md
          retention-days: 30

      - name: Commit auto-fixes
        if: steps.gatekeeper.outputs.auto-fixes-applied != '0'
        run: |
          echo "üîß Auto-fixes were applied, committing changes..."
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Auto-Fix"
          
          # Stage any auto-fix changes
          git add -A
          
          # Commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "fix: auto-fix lint and security issues
            
            - Applied ${{ steps.gatekeeper.outputs.auto-fixes-applied }} automatic fixes
            - Generated by CI Stability & Auto-Healing System
            - Safe fixes only: no breaking changes applied
            
            [skip ci]"
            
            # Push changes back to the branch
            git push
            echo "‚úÖ Auto-fixes committed and pushed"
          else
            echo "‚ÑπÔ∏è No changes to commit"
          fi

      - name: Post stability summary
        if: always()
        run: |
          echo "üìä CI Stability Check Summary:"
          echo "- CI Ready: ${{ steps.gatekeeper.outputs.ci-ready }}"
          echo "- Auto-fixes Applied: ${{ steps.gatekeeper.outputs.auto-fixes-applied }}"
          echo ""
          echo "üìÑ Detailed reports available in artifacts"

  phase3-auto-healing:
    name: Phase 3 Auto-Healing
    needs: stability-check
    if: failure() && needs.stability-check.outputs.ci-ready == 'false'
    uses: ./.github/workflows/phase3-auto-healing.yml
    with:
      trigger_deep_remediation: true
    secrets: inherit

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: stability-check
    if: needs.stability-check.outputs.ci-ready == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: "ESLint Check (Baseline: 800 warnings max)"
        run: npm run lint:ci

      - name: TypeScript Check (Non-blocking baseline)
        run: npm run type-check

      - name: Run unit tests
        run: npm test

      - name: Run unit tests with coverage
        run: npm run test:coverage

  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: stability-check
    if: needs.stability-check.outputs.ci-ready == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: nextjs-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            nextjs-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"

  e2e-smoke:
    name: E2E Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [stability-check, test, build]
    if: needs.stability-check.outputs.ci-ready == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers if cache miss
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          echo "üé≠ Installing Playwright browsers (cache miss)..."
          echo "This step saves 8-10 minutes on subsequent runs"
          npx playwright install --with-deps
          echo "‚úÖ Playwright browsers installed successfully"

      - name: Verify Playwright cache
        run: |
          echo "üîç Playwright cache verification:"
          du -sh ~/.cache/ms-playwright 2>/dev/null || echo "No cache directory found"
          echo "Cache hit: ${{ steps.playwright-cache.outputs.cache-hit }}"
          if [ "${{ steps.playwright-cache.outputs.cache-hit }}" = true ]; then
            echo "‚úÖ Cache hit - saved ~8-10 minutes of installation time"
          else
            echo "‚ÑπÔ∏è Cache miss - first run or dependency changes detected"
          fi

      - name: Create test environment
        run: |
          echo "DATABASE_URL_SQLITE=./test_hotdog_diaries.db" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-jwt-secret-for-e2e-testing-${{ github.sha }}" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_CI=true" >> $GITHUB_ENV

      - name: Verify CI Environment Vars
        run: |
          echo "üîç Verifying CI environment configuration:"
          echo "NEXT_PUBLIC_CI=$NEXT_PUBLIC_CI"
          echo "CI=$CI"
          echo "NODE_ENV=$NODE_ENV"
          echo "Expected: Minimal admin shell should render, no API polling should occur"

      - name: Build application for E2E tests
        run: npm run build
        env:
          DATABASE_URL_SQLITE: ./test_hotdog_diaries.db
          NODE_ENV: test
          CI: true
          NEXT_PUBLIC_CI: true

      - name: Initialize test database
        run: |
          npm run db:init || echo "Database init attempted"
          npm run admin:create || echo "Admin user creation attempted"

      - name: Run E2E smoke tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://127.0.0.1:3000
          CI: true
          NEXT_PUBLIC_CI: true
          NODE_ENV: test

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: stability-check
    if: needs.stability-check.outputs.ci-ready == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Enhanced Security Validation
        run: |
          echo "üîí Running enhanced security validation..."
          
          # The stability check already ran security auto-fix
          # Here we validate the current state and check for any new issues
          
          echo "üìä Current vulnerability status:"
          npm audit --audit-level=moderate || echo "Vulnerabilities found - checking if within acceptable thresholds"
          
          echo ""
          echo "üîç Checking for critical/high vulnerabilities:"
          if npm audit --audit-level=high; then
            echo "‚úÖ No critical or high-severity vulnerabilities"
          else
            echo "‚ö†Ô∏è Critical or high vulnerabilities detected"
            echo "Note: Auto-fixes may have been applied in stability-check phase"
            
            # Show summary for manual review
            npm audit --audit-level=critical || echo "Critical vulnerabilities require immediate attention"
          fi

      - name: Security summary
        if: always()
        run: |
          echo "üìã Security audit completed"
          echo "See ci-stability-reports artifact for detailed security analysis"