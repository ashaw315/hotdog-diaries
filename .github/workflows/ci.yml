name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: "ESLint Check (Baseline: 800 warnings max)"
        run: npm run lint:ci

      - name: TypeScript Check (Non-blocking baseline)
        run: npm run type-check

      - name: Run unit tests
        run: npm test

      - name: Run unit tests with coverage
        run: npm run test:coverage

  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: nextjs-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            nextjs-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"

  e2e-smoke:
    name: E2E Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test, build]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers if cache miss
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          echo "üé≠ Installing Playwright browsers (cache miss)..."
          echo "This step saves 8-10 minutes on subsequent runs"
          npx playwright install --with-deps
          echo "‚úÖ Playwright browsers installed successfully"

      - name: Verify Playwright cache
        run: |
          echo "üîç Playwright cache verification:"
          du -sh ~/.cache/ms-playwright 2>/dev/null || echo "No cache directory found"
          echo "Cache hit: ${{ steps.playwright-cache.outputs.cache-hit }}"
          if [ "${{ steps.playwright-cache.outputs.cache-hit }}" = true ]; then
            echo "‚úÖ Cache hit - saved ~8-10 minutes of installation time"
          else
            echo "‚ÑπÔ∏è Cache miss - first run or dependency changes detected"
          fi

      - name: Create test environment
        run: |
          echo "DATABASE_URL_SQLITE=./test_hotdog_diaries.db" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-jwt-secret-for-e2e-testing-${{ github.sha }}" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_CI=true" >> $GITHUB_ENV

      - name: Verify CI Environment Vars
        run: |
          echo "üîç Verifying CI environment configuration:"
          echo "NEXT_PUBLIC_CI=$NEXT_PUBLIC_CI"
          echo "CI=$CI"
          echo "NODE_ENV=$NODE_ENV"
          echo "Expected: Minimal admin shell should render, no API polling should occur"

      - name: Build application for E2E tests
        run: npm run build
        env:
          DATABASE_URL_SQLITE: ./test_hotdog_diaries.db
          NODE_ENV: test
          CI: true
          NEXT_PUBLIC_CI: true

      - name: Initialize test database
        run: |
          npm run db:init || echo "Database init attempted"
          npm run admin:create || echo "Admin user creation attempted"

      - name: Run E2E smoke tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://127.0.0.1:3000
          CI: true
          NEXT_PUBLIC_CI: true
          NODE_ENV: test

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for known vulnerabilities
        run: npm audit --audit-level=high || echo "High-severity vulnerabilities found, review required"