name: Content Scanners

on:
  schedule:
    # Staggered schedule to avoid API rate limits
    - cron: '0 */4 * * *'     # Every 4 hours for high-volume platforms
    - cron: '30 */6 * * *'    # Every 6 hours for medium-volume platforms  
    - cron: '15 */8 * * *'    # Every 8 hours for low-volume platforms
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to scan (comma-separated: reddit,youtube,giphy,imgur,bluesky,tumblr,lemmy,pixabay,niche)'
        type: string
        default: 'all'
      max-posts:
        description: 'Maximum posts per platform'
        type: number
        default: 50
  workflow_call:
    inputs:
      platforms:
        description: 'Platforms to scan'
        type: string
        default: 'all'
      max-posts:
        description: 'Maximum posts per platform'
        type: number
        default: 50

concurrency:
  group: scanners-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel scanning jobs

env:
  NODE_ENV: production
  CI: true

jobs:
  plan-scans:
    name: Plan Demand-Driven Scans
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      matrix: ${{ steps.plan.outputs.matrix }}
      reason: ${{ steps.plan.outputs.reason }}
      has_work: ${{ steps.plan.outputs.has_work }}
    env:
      TARGET_URL: ${{ vars.SITE_URL || secrets.SITE_URL || 'https://hotdog-diaries.vercel.app' }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_V2 != '' && secrets.SUPABASE_SERVICE_ROLE_KEY_V2 || secrets.SUPABASE_SERVICE_ROLE_KEY }}
      SCAN_MIN_PER_PLATFORM: ${{ vars.SCAN_MIN_PER_PLATFORM || '40' }}
      SCAN_MAX_PER_PLATFORM: ${{ vars.SCAN_MAX_PER_PLATFORM || '120' }}
      SCAN_GLOBAL_MAX: ${{ vars.SCAN_GLOBAL_MAX || '800' }}
      SCAN_COOLDOWN_MIN: ${{ vars.SCAN_COOLDOWN_MIN || '180' }}
      MIN_CONF: ${{ vars.MIN_CONF || '0.70' }}
      MIN_CANDIDATES: ${{ vars.MIN_CANDIDATES || '20' }}
      PLATFORM_ALLOW: ${{ vars.PLATFORM_ALLOW || 'reddit,youtube,giphy,imgur,bluesky,tumblr,lemmy,pixabay' }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies for planner tests..."
          npm ci --prefer-offline --no-audit --no-fund
          
      - name: Runtime policy guard
        id: policy-guard
        run: |
          echo "🛡️ Running runtime policy enforcement..."
          
          # Verify planner tests pass before allowing scans
          if ! npm run test:planner --silent >/dev/null 2>&1; then
            echo "❌ POLICY VIOLATION: Planner contract tests failed"
            echo "🚨 Blocking scan execution for safety"
            echo "policy-violation=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ Policy guard passed - planner behavior validated"
          echo "policy-violation=false" >> $GITHUB_OUTPUT
          
      - name: Build scan plan
        id: plan
        if: steps.policy-guard.outputs.policy-violation == 'false'
        run: |
          echo "🔍 Analyzing queue depths and planning scans..."
          node scripts/scan-plan.mjs 2>&1 | tee plan_stdout.txt || true
          
          # Check if matrix has any work
          if [ -f scan_matrix.json ]; then
            matrix=$(cat scan_matrix.json)
            has_work=$(echo "$matrix" | jq -r 'if .include | length > 0 then "true" else "false" end')
          else
            matrix='{"include":[]}'
            has_work='false'
          fi
          
          # Output for next job
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "has_work=$has_work" >> $GITHUB_OUTPUT
          
          # Handle policy guard results
          policy_status="Unknown"
          if [ "${{ steps.policy-guard.outputs.policy-violation }}" = "true" ]; then
            policy_status="❌ VIOLATION - Scan blocked"
            echo "reason=policy_violation" >> $GITHUB_OUTPUT
          elif [ "${{ steps.policy-guard.outputs.policy-violation }}" = "false" ]; then
            policy_status="✅ Passed"
          fi
          
          # Summary for UI
          echo "## 📊 Scan Planning Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Policy Guard:** $policy_status" >> $GITHUB_STEP_SUMMARY
          
          if [ -f scan_plan.json ]; then
            reason=$(jq -r '.analysis.reason // "unknown"' scan_plan.json)
            echo "reason=$reason" >> $GITHUB_OUTPUT
            echo "**Reason:** $reason" >> $GITHUB_STEP_SUMMARY
            echo "**Platforms to scan:** $(echo "$matrix" | jq -r '.include | length')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "$has_work" = "true" ]; then
              echo "### Platforms Needing Content" >> $GITHUB_STEP_SUMMARY
              echo "| Platform | Desired Posts |" >> $GITHUB_STEP_SUMMARY
              echo "|----------|---------------|" >> $GITHUB_STEP_SUMMARY
              echo "$matrix" | jq -r '.include[] | "| \(.platform) | \(.desired) |"' >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ All platforms have sufficient content queued!" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**Status:** Scan planning blocked due to policy violation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **SAFETY BLOCK**: Planner contract tests failed. Scans are disabled until issues are resolved." >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Upload plan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-plan-${{ github.run_number }}
          path: |
            scan_plan.json
            scan_matrix.json
            plan_stdout.txt
          retention-days: 7
          if-no-files-found: ignore

  determine-platforms:
    name: Determine Scan Strategy (Legacy)
    runs-on: ubuntu-latest
    timeout-minutes: 2
    if: ${{ github.event_name == 'workflow_dispatch' && (inputs.platforms != '' && inputs.platforms != 'demand-driven') }}
    outputs:
      platforms: ${{ steps.strategy.outputs.platforms }}
      schedule-type: ${{ steps.strategy.outputs.schedule-type }}
    steps:
      - name: Determine scan strategy
        id: strategy
        run: |
          PLATFORMS="${{ inputs.platforms || 'all' }}"
          SCHEDULE_TYPE="manual"
          
          # Determine platforms based on trigger
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            SCHEDULE_TYPE="scheduled"
            
            # Determine which platforms based on cron time
            HOUR=$(date +%H)
            MINUTE=$(date +%M)
            
            if [[ $MINUTE -eq 0 ]]; then
              # Every 4 hours (0, 4, 8, 12, 16, 20) - high volume
              PLATFORMS="reddit,youtube,giphy"
              echo "🔄 High-volume scan: reddit,youtube,giphy"
            elif [[ $MINUTE -eq 30 ]]; then
              # Every 6 hours (00:30, 06:30, 12:30, 18:30) - medium volume  
              PLATFORMS="imgur,bluesky,tumblr"
              echo "🔄 Medium-volume scan: imgur,bluesky,tumblr"
            elif [[ $MINUTE -eq 15 ]]; then
              # Every 8 hours (00:15, 08:15, 16:15) - low volume
              PLATFORMS="lemmy,pixabay,niche"
              echo "🔄 Low-volume scan: lemmy,pixabay,niche"
            fi
          fi
          
          if [[ "$PLATFORMS" == "all" ]]; then
            PLATFORMS="reddit,youtube,giphy,imgur,bluesky,tumblr,lemmy,pixabay,niche"
          fi
          
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "schedule-type=$SCHEDULE_TYPE" >> $GITHUB_OUTPUT
          echo "Selected platforms: $PLATFORMS"

  demand-driven-scan:
    name: Scan Content (Demand-Driven)
    runs-on: ubuntu-latest
    needs: plan-scans
    if: ${{ needs.plan-scans.outputs.has_work == 'true' }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      max-parallel: 3  # Limit parallel jobs to avoid rate limits
      matrix: ${{ fromJSON(needs.plan-scans.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js with cache
        uses: ./.github/actions/setup-node
        with:
          node-version: '20'
          cache-key-suffix: 'scanner-${{ matrix.platform }}'
          
      - name: Setup Supabase environment
        uses: ./.github/actions/setup-supabase-rest
        with:
          supabase-url: ${{ secrets.SUPABASE_URL }}
          supabase-service-key: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_V2 != '' && secrets.SUPABASE_SERVICE_ROLE_KEY_V2 || secrets.SUPABASE_SERVICE_ROLE_KEY }}
          database-url: ${{ secrets.DATABASE_URL }}
          
      - name: Platform-specific setup
        run: |
          echo "🔧 Setting up environment for ${{ matrix.platform }}..."
          echo "📊 Target: ${{ matrix.desired }} posts"
          
          case "${{ matrix.platform }}" in
            reddit)
              echo "REDDIT_CLIENT_ID=${{ secrets.REDDIT_CLIENT_ID }}" >> $GITHUB_ENV
              echo "REDDIT_CLIENT_SECRET=${{ secrets.REDDIT_CLIENT_SECRET }}" >> $GITHUB_ENV
              ;;
            youtube)
              echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> $GITHUB_ENV
              ;;
            giphy)
              echo "GIPHY_API_KEY=${{ secrets.GIPHY_API_KEY }}" >> $GITHUB_ENV
              ;;
            imgur)
              echo "IMGUR_CLIENT_ID=${{ secrets.IMGUR_CLIENT_ID }}" >> $GITHUB_ENV
              ;;
            bluesky)
              echo "BLUESKY_IDENTIFIER=${{ secrets.BLUESKY_IDENTIFIER }}" >> $GITHUB_ENV
              echo "BLUESKY_APP_PASSWORD=${{ secrets.BLUESKY_APP_PASSWORD }}" >> $GITHUB_ENV
              ;;
            pixabay)
              echo "PIXABAY_API_KEY=${{ secrets.PIXABAY_API_KEY }}" >> $GITHUB_ENV
              ;;
            tumblr)
              echo "TUMBLR_API_KEY=${{ secrets.TUMBLR_API_KEY }}" >> $GITHUB_ENV
              ;;
          esac
          
      - name: Scan platform content
        id: scan
        run: |
          echo "📡 Scanning ${{ matrix.platform }} for hotdog content..."
          echo "🎯 Targeting ${{ matrix.desired }} posts based on queue deficit"
          
          # Use the desired count from the planning phase
          MAX_POSTS="${{ matrix.desired }}"
          
          case "${{ matrix.platform }}" in
            reddit)
              npm run scan:reddit -- --max-posts=$MAX_POSTS || true
              ;;
            youtube)
              npm run scan:youtube -- --max-posts=$MAX_POSTS || true
              ;;
            giphy)
              npm run scan:giphy -- --max-posts=$MAX_POSTS || true
              ;;
            imgur)
              npm run scan:imgur -- --max-posts=$MAX_POSTS || true
              ;;
            bluesky)
              npm run scan:bluesky -- --max-posts=$MAX_POSTS || true
              ;;
            tumblr)
              npm run scan:tumblr -- --max-posts=$MAX_POSTS || true
              ;;
            lemmy)
              npm run scan:lemmy -- --max-posts=$MAX_POSTS || true
              ;;
            pixabay)
              npm run scan:pixabay -- --max-posts=$MAX_POSTS || true
              ;;
            *)
              echo "❌ Unknown platform: ${{ matrix.platform }}"
              ;;
          esac
          
          echo "✅ Scan completed for ${{ matrix.platform }}"
          
      - name: Upload scan logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-logs-${{ matrix.platform }}-${{ github.run_number }}
          path: |
            logs/scan-*.log
            reports/scan-*.json
          retention-days: 3
          if-no-files-found: ignore

  scan:
    name: Scan Content (Legacy)
    runs-on: ubuntu-latest
    needs: determine-platforms
    if: ${{ needs.determine-platforms.outputs.platforms != '' }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      max-parallel: 3  # Limit parallel jobs to avoid rate limits
      matrix:
        platform: ${{ fromJSON(format('[{0}]', replace(replace(needs.determine-platforms.outputs.platforms, ' ', ''), ',', '","'))) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js with cache
        uses: ./.github/actions/setup-node
        with:
          node-version: '20'
          cache-key-suffix: 'scanner-${{ matrix.platform }}'
          
      - name: Setup Supabase environment
        uses: ./.github/actions/setup-supabase-rest
        with:
          supabase-url: ${{ secrets.SUPABASE_URL }}
          supabase-service-key: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_V2 != '' && secrets.SUPABASE_SERVICE_ROLE_KEY_V2 || secrets.SUPABASE_SERVICE_ROLE_KEY }}
          database-url: ${{ secrets.DATABASE_URL }}
          
      - name: Platform-specific setup
        run: |
          echo "🔧 Setting up environment for ${{ matrix.platform }}..."
          
          case "${{ matrix.platform }}" in
            reddit)
              echo "REDDIT_CLIENT_ID=${{ secrets.REDDIT_CLIENT_ID }}" >> $GITHUB_ENV
              echo "REDDIT_CLIENT_SECRET=${{ secrets.REDDIT_CLIENT_SECRET }}" >> $GITHUB_ENV
              ;;
            youtube)
              echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> $GITHUB_ENV
              ;;
            giphy)
              echo "GIPHY_API_KEY=${{ secrets.GIPHY_API_KEY }}" >> $GITHUB_ENV
              ;;
            imgur)
              echo "IMGUR_CLIENT_ID=${{ secrets.IMGUR_CLIENT_ID }}" >> $GITHUB_ENV
              ;;
            bluesky)
              echo "BLUESKY_IDENTIFIER=${{ secrets.BLUESKY_IDENTIFIER }}" >> $GITHUB_ENV
              echo "BLUESKY_APP_PASSWORD=${{ secrets.BLUESKY_APP_PASSWORD }}" >> $GITHUB_ENV
              ;;
            pixabay)
              echo "PIXABAY_API_KEY=${{ secrets.PIXABAY_API_KEY }}" >> $GITHUB_ENV
              ;;
            niche)
              # Niche platforms may use multiple APIs
              echo "LEMMY_INSTANCE_URL=${{ secrets.LEMMY_INSTANCE_URL }}" >> $GITHUB_ENV
              echo "TUMBLR_API_KEY=${{ secrets.TUMBLR_API_KEY }}" >> $GITHUB_ENV
              ;;
          esac
          
      - name: Scan platform content
        id: scan
        run: |
          echo "📡 Scanning ${{ matrix.platform }} for hotdog content..."
          
          MAX_POSTS="${{ inputs.max-posts || 50 }}"
          
          case "${{ matrix.platform }}" in
            reddit)
              npm run scan:reddit -- --max-posts=$MAX_POSTS
              ;;
            youtube)
              npm run scan:youtube -- --max-posts=$MAX_POSTS
              ;;
            giphy)
              npm run scan:giphy -- --max-posts=$MAX_POSTS
              ;;
            imgur)
              npm run scan:imgur -- --max-posts=$MAX_POSTS
              ;;
            bluesky)
              npm run scan:bluesky -- --max-posts=$MAX_POSTS
              ;;
            tumblr)
              npm run scan:tumblr -- --max-posts=$MAX_POSTS
              ;;
            lemmy)
              npm run scan:lemmy -- --max-posts=$MAX_POSTS
              ;;
            pixabay)
              npm run scan:pixabay -- --max-posts=$MAX_POSTS
              ;;
            niche)
              # Scan multiple niche platforms with smaller limits
              npm run scan:niche-platforms -- --max-posts=20
              ;;
            *)
              echo "❌ Unknown platform: ${{ matrix.platform }}"
              exit 1
              ;;
          esac
          
          echo "✅ Scan completed for ${{ matrix.platform }}"
          
      - name: Upload scan logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-logs-${{ matrix.platform }}
          path: |
            logs/scan-*.log
            reports/scan-*.json
          retention-days: 3
          if-no-files-found: ignore

  summary:
    name: Scan Summary
    runs-on: ubuntu-latest
    needs: [plan-scans, demand-driven-scan, determine-platforms, scan]
    if: always() && !cancelled()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js with cache
        uses: ./.github/actions/setup-node
        with:
          node-version: '20'
          cache-key-suffix: 'scanner-summary'
          
      - name: Setup Supabase environment
        uses: ./.github/actions/setup-supabase-rest
        with:
          supabase-url: ${{ secrets.SUPABASE_URL }}
          supabase-service-key: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_V2 != '' && secrets.SUPABASE_SERVICE_ROLE_KEY_V2 || secrets.SUPABASE_SERVICE_ROLE_KEY }}
          database-url: ${{ secrets.DATABASE_URL }}
          
      - name: Generate scan summary
        run: |
          echo "📊 Generating content scan summary..."
          npm run scan:summary || echo "Summary generation completed"
          
      - name: Create GitHub step summary
        run: |
          echo "## 📡 Content Scanner Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
          # Check if demand-driven or legacy
          if [ "${{ needs.plan-scans.outputs.reason }}" != "" ]; then
            echo "**Mode:** Demand-Driven" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** ${{ needs.plan-scans.outputs.reason }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Mode:** Legacy/Manual" >> $GITHUB_STEP_SUMMARY
            echo "**Schedule Type:** ${{ needs.determine-platforms.outputs.schedule-type }}" >> $GITHUB_STEP_SUMMARY
            echo "**Platforms:** ${{ needs.determine-platforms.outputs.platforms }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          
          # Create a simplified status report
          PLATFORMS=($(echo "${{ needs.determine-platforms.outputs.platforms }}" | tr ',' ' '))
          for platform in "${PLATFORMS[@]}"; do
            STATUS="unknown"
            # This is simplified - you'd need to extract actual results
            echo "| $platform | $STATUS | Scan attempted |" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📈 **Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Content will be queued for review and scheduling" >> $GITHUB_STEP_SUMMARY
          echo "- Check admin dashboard for new content" >> $GITHUB_STEP_SUMMARY
          
      - name: Upload summary report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-summary-report
          path: |
            reports/scan-summary.json
            reports/scan-summary.md
          retention-days: 7
          if-no-files-found: ignore

  rate-limit-check:
    name: Rate Limit Health Check
    runs-on: ubuntu-latest
    needs: scan
    if: always()
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js with cache
        uses: ./.github/actions/setup-node
        with:
          node-version: '20'
          cache-key-suffix: 'rate-limit-check'
          
      - name: Check API rate limits
        run: |
          echo "🔍 Checking API rate limit status..."
          
          # Check rate limits for various APIs
          echo "API Rate Limit Status:" >> rate-limit-report.md
          echo "=====================" >> rate-limit-report.md
          echo "" >> rate-limit-report.md
          
          # This would ideally query actual rate limit status
          echo "- Reddit API: $(date)" >> rate-limit-report.md
          echo "- YouTube API: $(date)" >> rate-limit-report.md
          echo "- Giphy API: $(date)" >> rate-limit-report.md
          echo "- Imgur API: $(date)" >> rate-limit-report.md
          echo "" >> rate-limit-report.md
          echo "Generated at: $(date)" >> rate-limit-report.md
          
          echo "✅ Rate limit check completed"
          
      - name: Upload rate limit report
        uses: actions/upload-artifact@v4
        with:
          name: rate-limit-report
          path: rate-limit-report.md
          retention-days: 1