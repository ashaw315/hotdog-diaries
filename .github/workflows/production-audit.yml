name: 🔍 Production Audit

on:
  schedule:
    # Run every Tuesday at 9:00 AM UTC (5:00 AM EST) - offset from weekly smoke test
    - cron: '0 9 * * 2'
  
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run audit even if recent run exists'
        required: false
        type: boolean
        default: false
      audit_window_days:
        description: 'Number of days to audit (default: 7)'
        required: false
        type: number
        default: 7

env:
  PRODUCTION_URL: https://hotdog-diaries.vercel.app
  GITHUB_REPO: ${{ github.repository }}

jobs:
  production-audit:
    name: 🔍 7-Day Production Health Audit
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    permissions:
      contents: read
      actions: read
      issues: write  # For creating issues on critical failures
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Install dependencies
        run: |
          # Install required tools for audit script
          sudo apt-get update
          sudo apt-get install -y bc jq curl
          
      - name: 🔐 Configure environment
        run: |
          echo "APP_ORIGIN=${{ env.PRODUCTION_URL }}" >> $GITHUB_ENV
          echo "GITHUB_REPO=${{ env.GITHUB_REPO }}" >> $GITHUB_ENV
          
          # Validate required secrets are available
          if [[ -z "${{ secrets.PRODUCTION_AUTH_TOKEN }}" ]]; then
            echo "❌ PRODUCTION_AUTH_TOKEN secret not configured"
            exit 1
          fi
          
          if [[ -z "${{ secrets.SUPABASE_URL }}" ]]; then
            echo "❌ SUPABASE_URL secret not configured"  
            exit 1
          fi
          
          if [[ -z "${{ secrets.SUPABASE_SERVICE_KEY }}" ]]; then
            echo "❌ SUPABASE_SERVICE_KEY secret not configured"
            exit 1
          fi
          
          echo "✅ All required secrets available"
          
      - name: 🔍 Run production audit
        id: audit
        env:
          AUTH_TOKEN: ${{ secrets.PRODUCTION_AUTH_TOKEN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Starting 7-day production audit..."
          echo "Target: $APP_ORIGIN"
          echo "Repository: $GITHUB_REPO"
          echo ""
          
          # Make audit script executable
          chmod +x scripts/production-audit.sh
          
          # Run audit and capture exit code
          set +e  # Don't exit on failure, we want to capture results
          
          if scripts/production-audit.sh; then
            AUDIT_EXIT_CODE=0
            echo "✅ Production audit completed successfully"
          else
            AUDIT_EXIT_CODE=$?
            echo "❌ Production audit detected issues (exit code: $AUDIT_EXIT_CODE)"
          fi
          
          echo "AUDIT_EXIT_CODE=$AUDIT_EXIT_CODE" >> $GITHUB_ENV
          
          # Check if artifacts were generated
          if [[ -d "prod_audit_artifacts" ]]; then
            echo "📊 Audit artifacts generated:"
            ls -la prod_audit_artifacts/
            
            # Extract key metrics for summary
            if [[ -f "prod_audit_artifacts/production_audit_$(date +%F).md" ]]; then
              echo "📋 Audit report available"
              
              # Extract summary information if available
              if grep -q "Total posts (7d):" prod_audit_artifacts/production_audit_*.md; then
                TOTAL_POSTS=$(grep "Total posts (7d):" prod_audit_artifacts/production_audit_*.md | grep -o '[0-9]\+' | head -1)
                echo "TOTAL_POSTS=${TOTAL_POSTS:-0}" >> $GITHUB_ENV
              fi
              
              if grep -q "Platform diversity:" prod_audit_artifacts/production_audit_*.md; then
                PLATFORM_COUNT=$(grep "Platform diversity:" prod_audit_artifacts/production_audit_*.md | grep -o '[0-9]\+' | head -1)
                echo "PLATFORM_COUNT=${PLATFORM_COUNT:-0}" >> $GITHUB_ENV
              fi
            fi
          else
            echo "⚠️ No audit artifacts generated"
          fi
          
      - name: 📤 Upload audit artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: production-audit-${{ github.run_number }}
          path: prod_audit_artifacts/
          retention-days: 90
          compression-level: 6
          
      - name: 📤 Upload latest audit (overwrites)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: production-audit-latest
          path: prod_audit_artifacts/
          retention-days: 365
          compression-level: 6
          
      - name: 📊 Generate audit summary
        if: always()
        run: |
          echo "## 🔍 Production Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u -Iseconds)" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** $APP_ORIGIN" >> $GITHUB_STEP_SUMMARY
          echo "**Audit Window:** 7 days" >> $GITHUB_STEP_SUMMARY
          echo "**Exit Code:** ${AUDIT_EXIT_CODE:-unknown}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Status badge
          if [[ "${AUDIT_EXIT_CODE:-1}" -eq 0 ]]; then
            echo "**Status:** 🟢 **HEALTHY** - No issues detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** 🔴 **ISSUES DETECTED** - Requires attention" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Key Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Posts (7d) | ${TOTAL_POSTS:-N/A} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unique Platforms | ${PLATFORM_COUNT:-N/A} |" >> $GITHUB_STEP_SUMMARY
          echo "| Audit Status | $([ "${AUDIT_EXIT_CODE:-1}" -eq 0 ] && echo "✅ Passed" || echo "❌ Failed") |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add artifacts info
          echo "### 📁 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest:** \`production-audit-latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Versioned:** \`production-audit-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Include audit report summary if available
          if [[ -f prod_audit_artifacts/production_audit_*.md ]]; then
            echo "### 📋 Audit Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            head -20 prod_audit_artifacts/production_audit_*.md | grep -E "^(#|##|\*|-|[0-9])" >> $GITHUB_STEP_SUMMARY || echo "Report preview not available" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: 🚨 Create issue on critical failure
        if: failure() && env.AUDIT_EXIT_CODE == '1' && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const issueTitle = `🚨 Production Audit Failed - ${new Date().toISOString().split('T')[0]}`;
            const issueBody = `# Production Audit Failure Report
            
            The weekly production audit detected critical issues on ${new Date().toISOString()}.
            
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Target Environment:** ${{ env.APP_ORIGIN }}
            **Audit Window:** 7 days
            
            ## Failure Details
            
            - **Audit Exit Code:** ${{ env.AUDIT_EXIT_CODE }}
            - **Total Posts (7d):** ${{ env.TOTAL_POSTS || 'N/A' }}
            - **Platform Diversity:** ${{ env.PLATFORM_COUNT || 'N/A' }} unique platforms
            
            ## Investigation Steps
            
            1. 🔍 Download audit artifacts: \`production-audit-${{ github.run_number }}\`
            2. 📊 Review the generated markdown report for detailed findings
            3. 🏥 Check the [admin dashboard](${{ env.APP_ORIGIN }}/admin)
            4. 📈 Review [system metrics](${{ env.APP_ORIGIN }}/api/system/metrics)
            5. 📋 Consult the [SRE runbook](./docs/runbook.md) for incident response
            
            ## Common Issues to Check
            
            - **Platform Diversity:** Is one platform dominating content (>60% share)?
            - **Content Queue:** Is the queue running low on approved content?
            - **Forecast Integrity:** Are there mismatches between API and database?
            - **CI Health:** Are GitHub Actions workflows failing repeatedly?
            - **Database Issues:** Are there connection or query problems?
            
            ## Immediate Actions
            
            - [ ] Download and review audit artifacts
            - [ ] Check admin dashboard for obvious issues
            - [ ] Review recent deployment logs
            - [ ] Verify all API keys and secrets are valid
            - [ ] Run manual smoke tests if needed
            - [ ] Apply fixes and re-run audit to verify resolution
            - [ ] Close this issue when resolved
            
            ---
            
            This issue was automatically created by the Production Audit workflow.
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['critical', 'production', 'audit-failure', 'auto-created']
            });
            
      - name: ✅ Success notification
        if: success()
        run: |
          echo "🎉 Production audit completed successfully!"
          echo ""
          echo "📊 Audit summary:"
          echo "  - Target: $APP_ORIGIN"
          echo "  - Window: 7 days"
          echo "  - Posts: ${TOTAL_POSTS:-N/A}"
          echo "  - Platforms: ${PLATFORM_COUNT:-N/A}"
          echo "  - Status: ✅ Healthy"
          echo ""
          echo "🔍 Production system is operating within normal parameters."