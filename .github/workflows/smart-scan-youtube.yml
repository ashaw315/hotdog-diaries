name: Smart Scan YouTube (Threshold-Based)

on:
  schedule:
    - cron: '0 4,12,20 * * *'  # 3 times daily - prioritized for underrepresented platform
  workflow_dispatch:
    inputs:
      force_override:
        description: 'Force scan even if thresholds met'
        required: false
        default: 'false'
        type: boolean
      max_posts:
        description: 'Maximum posts to scan'
        required: false
        default: '50'
        type: string

jobs:
  smart-scan-youtube:
    runs-on: ubuntu-latest
    steps:
      - name: Smart Threshold Check and Scan
        run: |
          echo "üé¨ Smart scanning YouTube (underrepresented platform priority)..."
          
          FORCE_OVERRIDE="${{ github.event.inputs.force_override || 'false' }}"
          MAX_POSTS="${{ github.event.inputs.max_posts || '50' }}"
          
          echo "üîß Parameters: force_override=$FORCE_OVERRIDE, max_posts=$MAX_POSTS"
          echo "üéØ Note: YouTube is an underrepresented platform - lower thresholds apply"
          
          RESULT=$(curl -L -X POST "${{ secrets.SITE_URL }}/api/admin/smart-scan" \
            -H "Authorization: Bearer ${{ secrets.AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"platform\": \"youtube\",
              \"forceOverride\": $FORCE_OVERRIDE,
              \"maxPosts\": $MAX_POSTS
            }" \
            --silent --show-error --retry 2)
          
          if [ $? -eq 0 ]; then
            SKIPPED=$(echo "$RESULT" | jq -r '.skipped // false')
            SCANNED=$(echo "$RESULT" | jq -r '.scanned // false')
            REASON=$(echo "$RESULT" | jq -r '.reason // "unknown"')
            
            if [ "$SKIPPED" = "true" ]; then
              READY_TO_POST=$(echo "$RESULT" | jq -r '.currentStats.readyToPost // 0')
              APPROVED=$(echo "$RESULT" | jq -r '.currentStats.approved // 0')
              echo "‚è≠Ô∏è YouTube scan SKIPPED: $REASON"
              echo "üìä Current content: $READY_TO_POST ready to post, $APPROVED approved"
              echo "‚úÖ Rare for YouTube - content levels unexpectedly high!"
            elif [ "$SCANNED" = "true" ]; then
              FOUND=$(echo "$RESULT" | jq -r '.scanResult.data.videosFound // 0')
              APPROVED_NEW=$(echo "$RESULT" | jq -r '.scanResult.data.videosApproved // 0')
              echo "‚úÖ YouTube scan COMPLETED: $REASON"
              echo "üìà Results: Found $FOUND, approved $APPROVED_NEW new videos"
              echo "üéØ YouTube scanning prioritized due to underrepresentation"
            else
              echo "‚ùì Unexpected response from smart scan"
              echo "$RESULT" | jq -r '.message // "No message"'
            fi
          else
            echo "‚ùå Smart scan check failed (possibly quota exceeded)"
            echo "‚ö†Ô∏è YouTube API quotas are limited - this is expected occasionally"
          fi
      
      - name: Handle Quota or Scan Issues
        if: failure()
        run: |
          echo "‚ùå Smart YouTube scan failed"
          echo "üí° Common causes: API quota exceeded, temporary service issues"
          echo "üîÑ Will retry on next scheduled run in ~8 hours"