name: Secret Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly secret audit every Monday at 9 AM UTC
    - cron: '0 9 * * 1'

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    name: Validate Secret Strength & Environment Variables
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js with pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.3
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Validate secret strength
        env:
          # Core application secrets required by living workflows
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
          SITE_URL: ${{ secrets.SITE_URL }}
          # Platform API secrets for content scanners
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          # Optional/legacy secrets (warn only)
          CRON_TOKEN: ${{ secrets.CRON_TOKEN }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        run: |
          echo "üîç Running secret validation for living workflows..."
          echo "Core secrets: JWT_SECRET, AUTH_TOKEN, SITE_URL"
          echo "Scanner secrets: YOUTUBE_API_KEY, REDDIT_CLIENT_ID, REDDIT_CLIENT_SECRET"
          echo "Legacy/optional: CRON_TOKEN, ADMIN_PASSWORD"
          pnpm run validate-secrets -- --verbose
          
      - name: Validate in strict mode
        env:
          # Only validate core secrets in strict mode
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
          SITE_URL: ${{ secrets.SITE_URL }}
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        run: |
          echo "üîí Running strict validation for core secrets only..."
          echo "Validating required secrets for: scanners, auth, health checks"
          pnpm run validate-secrets -- --strict
          
      - name: Comment on PR (if failed)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ‚ùå Secret Validation Failed
              
              The secret validation check failed. This could be due to:
              
              - **Weak tokens**: Tokens that don't meet security requirements (length < 32, weak patterns)
              - **Missing environment variables**: Variables used in code but not documented in .env.example
              - **Format violations**: Invalid hex/base64/alphanumeric formats
              
              ### Next Steps
              
              1. Check the workflow logs for specific validation errors
              2. Use \`pnpm run validate-secrets -- --verbose\` locally to debug
              3. For token issues, use \`pnpm run rotate-tokens <TOKEN_NAME>\` to generate new tokens
              4. For missing env vars, add them to .env.example
              
              ### Security Note
              
              This validation ensures all secrets meet security standards. Do not bypass these checks without security team approval.
              `
            })

  environment-completeness:
    runs-on: ubuntu-latest
    name: Environment Variable Completeness Check
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js with pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.3
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Check environment completeness
        run: |
          echo "üìã Checking environment variable completeness..."
          
          # Extract all process.env references from codebase
          echo "Variables referenced in codebase:"
          grep -r "process\.env\." app/ lib/ components/ scripts/ middleware.* next.config.* 2>/dev/null \
            | grep -oE 'process\.env\.([A-Z_][A-Z0-9_]*)' \
            | sed 's/process\.env\.//' \
            | sort -u \
            | tee /tmp/codebase_vars.txt
          
          echo ""
          echo "Variables in .env.example:"
          if [ -f .env.example ]; then
            grep -E '^[A-Z_][A-Z0-9_]*=' .env.example | cut -d= -f1 | sort | tee /tmp/env_example_vars.txt
          else
            echo "‚ö†Ô∏è .env.example not found"
            touch /tmp/env_example_vars.txt
          fi
          
          echo ""
          echo "Missing from .env.example:"
          comm -23 /tmp/codebase_vars.txt /tmp/env_example_vars.txt | tee /tmp/missing_vars.txt
          
          # Filter out system variables that don't need to be in .env.example
          SYSTEM_VARS="NODE_ENV PORT PWD PATH HOME USER VERCEL VERCEL_ENV VERCEL_URL VERCEL_REGION GITHUB_ACTIONS GITHUB_SHA GITHUB_REF CI BUILD_ID NEXT_RUNTIME"
          
          for var in $SYSTEM_VARS; do
            sed -i "/^$var$/d" /tmp/missing_vars.txt 2>/dev/null || true
          done
          
          if [ -s /tmp/missing_vars.txt ]; then
            echo "‚ùå Missing variables found:"
            cat /tmp/missing_vars.txt
            echo ""
            echo "Please add these variables to .env.example with appropriate example values."
            exit 1
          else
            echo "‚úÖ All codebase variables are documented in .env.example"
          fi

  token-strength-check:
    runs-on: ubuntu-latest
    name: Token Strength Verification
    if: github.event_name == 'schedule' # Only run on scheduled builds
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js with pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.3
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Check token rotation schedule
        env:
          # Focus on secrets required by living workflows
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
          SITE_URL: ${{ secrets.SITE_URL }}
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        run: |
          echo "üóìÔ∏è Checking token rotation schedule for living workflows..."
          
          # Check if any tokens need rotation based on docs/secrets.md
          # Focus on secrets actually used by active workflows
          
          CURRENT_DATE=$(date +%Y-%m-%d)
          echo "Current date: $CURRENT_DATE"
          
          echo "üîç Checking rotation status for active workflow secrets:"
          echo "  - JWT_SECRET (core authentication)"
          echo "  - AUTH_TOKEN (API authentication)" 
          echo "  - SITE_URL (deployment target)"
          echo "  - YOUTUBE_API_KEY (YouTube scanner)"
          echo "  - REDDIT_CLIENT_ID, REDDIT_CLIENT_SECRET (Reddit scanner)"
          
          # Check docs/secrets.md for last rotation dates
          if [ -f docs/secrets.md ]; then
            echo "üìã Last rotation dates from docs/secrets.md:"
            grep -E "JWT_SECRET|AUTH_TOKEN|SITE_URL|YOUTUBE_API_KEY|REDDIT_CLIENT" docs/secrets.md || true
          fi
          
          # Run token validation to ensure current tokens are still strong
          pnpm run validate-secrets -- --verbose
          
          echo "üìä Token strength verification completed for living workflows"
          
      - name: Create rotation issue (if needed)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üîê Token Rotation Required - ${new Date().toISOString().split('T')[0]}`
            const body = `## Token Rotation Required
            
            The weekly secret audit has detected tokens that may need rotation.
            
            ### Action Required
            
            1. Review token rotation schedule in \`docs/secrets.md\`
            2. Identify tokens due for rotation
            3. Use rotation script: \`pnpm run rotate-tokens <TOKEN_NAME>\`
            4. Update all storage locations
            5. Test functionality with new tokens
            6. Update rotation log
            
            ### Automation
            
            This issue was created automatically by the secret validation workflow.
            
            /cc @security-team
            `
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'rotation', 'automated']
            })