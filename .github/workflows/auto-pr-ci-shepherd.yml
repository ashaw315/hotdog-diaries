name: "Auto PR CI Shepherd"
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      pr_mode:
        description: "Use PR mode instead of direct push"
        required: false
        type: boolean
        default: false
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  # Fork and permission safety analysis
  safety-check:
    runs-on: ubuntu-latest
    name: Fork & Permission Safety Check
    outputs:
      is_fork: ${{ steps.safety.outputs.is_fork }}
      is_trusted: ${{ steps.safety.outputs.is_trusted }}
      safe_to_proceed: ${{ steps.safety.outputs.safe_to_proceed }}
      execution_mode: ${{ steps.safety.outputs.execution_mode }}
    
    steps:
      - name: Analyze fork and permission safety
        id: safety
        run: |
          echo "🔍 Analyzing repository and permission safety..."
          
          # Detect if this is a fork
          IS_FORK="false"
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            IS_FORK="true"
          fi
          
          # Determine if actor is trusted (repository member or collaborator)
          IS_TRUSTED="false"
          if [ "${{ github.actor }}" = "${{ github.repository_owner }}" ] || [ "${{ github.event_name }}" = "push" ]; then
            IS_TRUSTED="true"
          fi
          
          # Additional trust checks for known bot actors
          case "${{ github.actor }}" in
            "dependabot[bot]"|"github-actions[bot]"|"renovate[bot]")
              IS_TRUSTED="true"
              ;;
          esac
          
          # Determine execution mode based on safety analysis
          EXECUTION_MODE="restricted"
          SAFE_TO_PROCEED="false"
          
          if [ "$IS_FORK" = "false" ] && [ "$IS_TRUSTED" = "true" ]; then
            EXECUTION_MODE="full"
            SAFE_TO_PROCEED="true"
          elif [ "$IS_FORK" = "true" ] && [ "$IS_TRUSTED" = "false" ]; then
            EXECUTION_MODE="fork-restricted"
            SAFE_TO_PROCEED="false"
          elif [ "$IS_TRUSTED" = "true" ]; then
            EXECUTION_MODE="trusted-limited"
            SAFE_TO_PROCEED="true"
          fi
          
          echo "📊 Safety Analysis Results:"
          echo "  - Is Fork: $IS_FORK"
          echo "  - Is Trusted: $IS_TRUSTED"
          echo "  - Actor: ${{ github.actor }}"
          echo "  - Event: ${{ github.event_name }}"
          echo "  - Execution Mode: $EXECUTION_MODE"
          echo "  - Safe to Proceed: $SAFE_TO_PROCEED"
          
          # Set outputs
          echo "is_fork=$IS_FORK" >> $GITHUB_OUTPUT
          echo "is_trusted=$IS_TRUSTED" >> $GITHUB_OUTPUT
          echo "safe_to_proceed=$SAFE_TO_PROCEED" >> $GITHUB_OUTPUT
          echo "execution_mode=$EXECUTION_MODE" >> $GITHUB_OUTPUT
          
          # Write safety summary
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## 🔒 Fork & Permission Safety Analysis
          
          | Field | Value |
          |-------|-------|
          | **Is Fork** | $IS_FORK |
          | **Is Trusted Actor** | $IS_TRUSTED |
          | **Actor** | `${{ github.actor }}` |
          | **Event Type** | `${{ github.event_name }}` |
          | **Execution Mode** | `$EXECUTION_MODE` |
          | **Safe to Proceed** | $SAFE_TO_PROCEED |
          
          ### 🛡️ Security Policy
          
          - **Full Mode**: Repository members, push events - all shepherd functions available
          - **Trusted Limited**: Known bots - limited shepherd functions, no auto-merge
          - **Fork Restricted**: External forks - CI checks only, no repository modifications
          
          EOF

      - name: Block unsafe fork execution
        if: steps.safety.outputs.execution_mode == 'fork-restricted'
        run: |
          echo "🚨 FORK EXECUTION BLOCKED"
          echo "========================="
          echo "This workflow cannot execute shepherd operations from external forks for security reasons."
          echo ""
          echo "For external contributors:"
          echo "1. Standard CI checks will run instead"
          echo "2. Repository maintainers can manually trigger shepherd operations"
          echo "3. Consider contributing through repository collaboration"
          echo ""
          echo "This is a security measure to prevent unauthorized repository modifications."
          exit 0

  shepherd:
    needs: safety-check
    if: needs.safety-check.outputs.safe_to_proceed == 'true'
    permissions:
      contents: write
      pull-requests: write
      checks: write
      issues: write
      actions: write
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency:
      group: ci-shepherd-${{ github.ref }}
      cancel-in-progress: true
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      EXECUTION_MODE: ${{ needs.safety-check.outputs.execution_mode }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: pnpm/action-setup@v4
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - run: pnpm install --frozen-lockfile || pnpm install

      - name: "Security: Validate execution mode"
        run: |
          echo "🔒 Execution Mode: $EXECUTION_MODE"
          case "$EXECUTION_MODE" in
            "full")
              echo "✅ Full shepherd operations authorized"
              ;;
            "trusted-limited")
              echo "⚠️ Limited shepherd operations (trusted actor)"
              echo "Note: Auto-merge and auto-revert operations may be restricted"
              ;;
            "fork-restricted")
              echo "🚨 This should not execute - fork safety failed"
              exit 1
              ;;
            *)
              echo "❌ Unknown execution mode: $EXECUTION_MODE"
              exit 1
              ;;
          esac

      # Direct push path
      - name: "Direct: Preflight watchdog check"
        if: ${{ inputs.pr_mode != true && env.EXECUTION_MODE != 'fork-restricted' }}
        run: |
          echo "🔍 Running preflight production watchdog..."
          
          # Check if this is a fork PR and skip workflow dispatch
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "⚠️ Fork PR detected - skipping workflow dispatch for security"
            echo "✅ Fork validation completed successfully"
            exit 0
          fi
          
          # Check if this is ANY PR context and skip watchdog (secrets not available)
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "⚠️ PR context detected - prod-watchdog requires secrets not available in PR contexts"
            echo "🔍 Production watchdog checks will run on merge to main branch"
            echo "✅ PR validation completed - watchdog skipped for security"
            exit 0
          fi
          
          # Handle permission errors gracefully for non-PR contexts
          if ! pnpm tsx scripts/ops/ci-shepherd/run-and-wait-workflow.ts \
            --workflow .github/workflows/prod-watchdog.yml \
            --timeoutSec 900; then
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 78 ]; then
              echo "⏸️ Watchdog concluded neutrally - this is expected"
              exit 0
            else
              echo "❌ Watchdog failed with exit code $EXIT_CODE"
              exit $EXIT_CODE
            fi
          fi

      - name: "Direct: Auto-remedy on preflight failure"
        if: ${{ inputs.pr_mode != true && failure() && env.EXECUTION_MODE == 'full' }}
        run: |
          echo "🔧 Preflight watchdog failed, attempting auto-remedy..."
          pnpm tsx scripts/ops/ci-shepherd/auto-remedy.ts

      - name: "Direct: Push to main" 
        if: ${{ inputs.pr_mode != true && success() && env.EXECUTION_MODE == 'full' }}
        run: |
          echo "✅ Preflight passed, pushing to main"
          # Add actual push logic here
          
      - name: "Direct: Post-push watchdog"
        if: ${{ inputs.pr_mode != true && success() && env.EXECUTION_MODE != 'fork-restricted' }}
        run: |
          echo "🔍 Running post-push production watchdog..."
          
          # Check if this is a fork PR and skip workflow dispatch
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "⚠️ Fork PR detected - skipping workflow dispatch for security"
            echo "✅ Fork validation completed successfully"
            exit 0
          fi
          
          # Check if this is ANY PR context and skip watchdog (secrets not available)
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "⚠️ PR context detected - prod-watchdog requires secrets not available in PR contexts"
            echo "🔍 Production watchdog checks will run on merge to main branch"
            echo "✅ PR validation completed - watchdog skipped for security"
            exit 0
          fi
          
          # Handle permission errors gracefully for non-PR contexts
          if ! pnpm tsx scripts/ops/ci-shepherd/run-and-wait-workflow.ts \
            --workflow .github/workflows/prod-watchdog.yml \
            --timeoutSec 900; then
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 78 ]; then
              echo "⏸️ Watchdog concluded neutrally - this is expected"
              exit 0
            else
              echo "❌ Watchdog failed with exit code $EXIT_CODE"
              exit $EXIT_CODE
            fi
          fi

      - name: "Direct: Auto-remedy on post-push failure"
        if: ${{ inputs.pr_mode != true && failure() && env.EXECUTION_MODE == 'full' }}
        run: |
          echo "🔧 Post-push watchdog failed, attempting auto-remedy..."
          pnpm tsx scripts/ops/ci-shepherd/auto-remedy.ts

      - name: "Direct: Auto-revert if still failing"
        if: ${{ inputs.pr_mode != true && failure() && env.EXECUTION_MODE == 'full' }}
        run: |
          echo "❌ Auto-remedy failed, triggering auto-revert"
          # Add auto-revert logic here
          # pnpm tsx scripts/ops/ci-shepherd/auto-revert.ts --target main

      - name: "Direct: Limited mode notification"
        if: ${{ inputs.pr_mode != true && env.EXECUTION_MODE == 'trusted-limited' }}
        run: |
          echo "⚠️ LIMITED EXECUTION MODE"
          echo "========================="
          echo "Direct push operations are restricted for trusted-limited mode."
          echo "Only watchdog checks are permitted."
          echo "Repository modifications require full authorization."

      # PR path  
      - name: "PR: Create and monitor"
        if: ${{ inputs.pr_mode == true && env.EXECUTION_MODE == 'full' }}
        run: |
          echo "📝 Creating PR and setting up monitoring"
          # Add PR creation logic here

      - name: "PR: Pre-merge watchdog check"
        if: ${{ inputs.pr_mode == true && success() && env.EXECUTION_MODE != 'fork-restricted' }}
        run: |
          echo "🔍 Running pre-merge production watchdog..."
          
          # Check if this is ANY PR context and skip watchdog (secrets not available)
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "⚠️ PR context detected - prod-watchdog requires secrets not available in PR contexts"
            echo "🔍 Production watchdog checks will run on merge to main branch"
            echo "✅ PR validation completed - watchdog skipped for security"
            exit 0
          fi
          
          # Handle permission errors gracefully for non-PR contexts
          if ! pnpm tsx scripts/ops/ci-shepherd/run-and-wait-workflow.ts \
            --workflow .github/workflows/prod-watchdog.yml \
            --timeoutSec 900; then
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 78 ]; then
              echo "⏸️ Watchdog concluded neutrally - this is expected"
              exit 0
            else
              echo "❌ Watchdog failed with exit code $EXIT_CODE"
              exit $EXIT_CODE
            fi
          fi

      - name: "PR: Auto-remedy on pre-merge failure"
        if: ${{ inputs.pr_mode == true && failure() && env.EXECUTION_MODE == 'full' }}
        run: |
          echo "🔧 Pre-merge watchdog failed, attempting auto-remedy..."
          pnpm tsx scripts/ops/ci-shepherd/auto-remedy.ts

      - name: "PR: Block merge if still failing"
        if: ${{ inputs.pr_mode == true && failure() && env.EXECUTION_MODE != 'fork-restricted' }}
        run: |
          echo "❌ Auto-remedy failed, blocking merge"
          # Only comment on PRs from the same repository (not forks)
          if [ "${{ github.event.pull_request.head.repo.full_name }}" = "${{ github.repository }}" ]; then
            gh pr comment ${{ github.event.number }} --body "🚨 **Pre-merge watchdog failure** - auto-remedy attempted but merge still blocked"
            gh pr edit ${{ github.event.number }} --add-label "watchdog-red"
          else
            echo "Fork PR detected - skipping PR comment operations for security"
          fi
          exit 1

      - name: "PR: Proceed to merge"
        if: ${{ inputs.pr_mode == true && success() && env.EXECUTION_MODE == 'full' }}
        run: |
          echo "✅ Pre-merge watchdog passed, proceeding to merge"
          # Add merge logic here

      - name: "PR: Post-merge watchdog"
        if: ${{ inputs.pr_mode == true && success() && env.EXECUTION_MODE != 'fork-restricted' }}
        run: |
          echo "🔍 Running post-merge production watchdog..."
          
          # Check if this is ANY PR context and skip watchdog (secrets not available)
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "⚠️ PR context detected - prod-watchdog requires secrets not available in PR contexts"
            echo "🔍 Production watchdog checks will run on merge to main branch"
            echo "✅ PR validation completed - watchdog skipped for security"
            exit 0
          fi
          
          # Handle permission errors gracefully for non-PR contexts
          if ! pnpm tsx scripts/ops/ci-shepherd/run-and-wait-workflow.ts \
            --workflow .github/workflows/prod-watchdog.yml \
            --timeoutSec 900; then
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 78 ]; then
              echo "⏸️ Watchdog concluded neutrally - this is expected"
              exit 0
            else
              echo "❌ Watchdog failed with exit code $EXIT_CODE"
              exit $EXIT_CODE
            fi
          fi

      - name: "PR: Auto-remedy on post-merge failure"
        if: ${{ inputs.pr_mode == true && failure() && env.EXECUTION_MODE == 'full' }}
        run: |
          echo "🔧 Post-merge watchdog failed, attempting auto-remedy..."
          pnpm tsx scripts/ops/ci-shepherd/auto-remedy.ts

      - name: "PR: Auto-revert if still failing"
        if: ${{ inputs.pr_mode == true && failure() && env.EXECUTION_MODE == 'full' }}
        run: |
          echo "❌ Auto-remedy failed, triggering auto-revert"
          # Add auto-revert logic here  
          # pnpm tsx scripts/ops/ci-shepherd/auto-revert.ts --target main

      - name: "PR: Limited mode notification"
        if: ${{ inputs.pr_mode == true && env.EXECUTION_MODE == 'trusted-limited' }}
        run: |
          echo "⚠️ LIMITED EXECUTION MODE"
          echo "========================="
          echo "PR operations are restricted for trusted-limited mode."
          echo "Only watchdog checks are permitted."
          echo "Merge and revert operations require full authorization."

  # Fallback CI job for fork PRs
  fork-ci:
    needs: safety-check
    if: needs.safety-check.outputs.execution_mode == 'fork-restricted'
    runs-on: ubuntu-latest
    name: Fork PR - Standard CI
    permissions:
      contents: read
      checks: write
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - run: pnpm install --frozen-lockfile || pnpm install

      - name: "Fork CI: Standard checks"
        run: |
          echo "🔍 Running standard CI checks for fork PR..."
          echo "Repository: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "Branch: ${{ github.event.pull_request.head.ref }}"
          echo "Actor: ${{ github.actor }}"
          echo ""
          echo "Available checks:"
          echo "- Build verification"
          echo "- Test execution"
          echo "- Lint checks"
          echo "- Type checking"
          echo ""
          echo "Note: Shepherd operations are disabled for security"
          echo "Repository maintainers can manually trigger shepherd operations if needed"

      - name: "Fork CI: Build check"
        run: |
          echo "🔨 Checking build..."
          # Add build validation here
          echo "Build check completed"

      - name: "Fork CI: Test check"
        run: |
          echo "🧪 Running tests..."
          # Add test execution here
          echo "Test check completed"

  # Neutralize job for edge cases where no execution path is appropriate
  neutralize:
    needs: safety-check
    if: needs.safety-check.outputs.safe_to_proceed != 'true' && needs.safety-check.outputs.execution_mode != 'fork-restricted'
    runs-on: ubuntu-latest
    name: Neutralize CI Shepherd
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Checkout for neutralize action
        uses: actions/checkout@v4
        
      - name: Neutralize with summary
        uses: ./.github/actions/neutralize
        with:
          reason: "CI Shepherd execution blocked due to security or permission restrictions"
          deploy_state: ${{ needs.safety-check.outputs.execution_mode }}
          deploy_reason: "Actor: ${{ github.actor }}, Fork: ${{ needs.safety-check.outputs.is_fork }}, Trusted: ${{ needs.safety-check.outputs.is_trusted }}"