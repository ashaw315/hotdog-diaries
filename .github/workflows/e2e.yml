name: E2E Tests

on:
  schedule:
    - cron: '0 2 * * *'  # Nightly at 2 AM UTC
  pull_request:
    types: [labeled]
  workflow_dispatch:
  workflow_call:
    inputs:
      browser:
        description: 'Browser to test (chromium, firefox, webkit, all)'
        type: string
        default: 'chromium'
      timeout:
        description: 'Test timeout in minutes'
        type: number
        default: 20

permissions:
  contents: read
  actions: read

concurrency:
  group: e2e-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: test
  CI: true
  NEXT_PUBLIC_CI: true
  DISABLE_EXTERNAL_INTEGRATIONS: true
  ADMIN_USERNAME: admin
  ADMIN_PASSWORD: StrongAdminPass123!
  JWT_SECRET: test-jwt-secret-for-e2e-testing-only-do-not-use-in-production
  DATABASE_URL_SQLITE: ./ci-test.db
  PLAYWRIGHT_BASE_URL: http://127.0.0.1:3000

jobs:
  should-run:
    name: Should Run E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      run-tests: ${{ steps.check.outputs.run-tests }}
      browser: ${{ steps.check.outputs.browser }}
    steps:
      - name: Check trigger conditions
        id: check
        run: |
          RUN_TESTS="false"
          BROWSER="${{ inputs.browser || 'chromium' }}"
          
          # Always run on schedule (nightly)
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            RUN_TESTS="true"
            BROWSER="all"
            echo "🌙 Nightly run - testing all browsers"
          fi
          
          # Run on workflow_dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RUN_TESTS="true"
            echo "🚀 Manual dispatch - testing with browser: $BROWSER"
          fi
          
          # Run on PR with e2e label
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ contains(github.event.pull_request.labels.*.name, 'e2e') }}" == "true" ]]; then
            RUN_TESTS="true"
            echo "🏷️ PR with e2e label - testing with browser: $BROWSER"
          fi
          
          echo "run-tests=$RUN_TESTS" >> $GITHUB_OUTPUT
          echo "browser=$BROWSER" >> $GITHUB_OUTPUT
          echo "Decision: run-tests=$RUN_TESTS, browser=$BROWSER"

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: should-run
    if: needs.should-run.outputs.run-tests == 'true'
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js with cache
        uses: ./.github/actions/setup-node
        with:
          node-version: '20'
          cache-key-suffix: 'e2e-build'
          
      - name: Initialize test database
        run: |
          echo "🗄️ Setting up test database..."
          npm run db:init || echo "Database init completed"
          npm run admin:create || echo "Admin user creation completed"

      - name: Build Next.js application
        run: |
          echo "🏗️ Building application for E2E tests..."
          npm run build

      - name: Verify build output
        run: |
          echo "📦 Verifying build output..."
          if [ ! -d ".next" ]; then
            echo "❌ Build output missing!"
            exit 1
          fi
          echo "✅ Build verified - Size: $(du -sh .next | cut -f1)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-e2e-build
          include-hidden-files: true
          path: |
            .next/**
            public/**
            package.json
            package-lock.json
            ci-test.db
          retention-days: 1

  test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [should-run, build]
    if: needs.should-run.outputs.run-tests == 'true'
    timeout-minutes: ${{ fromJSON(inputs.timeout || 20) }}
    strategy:
      fail-fast: false
      matrix:
        browser: ${{ fromJSON(
          needs.should-run.outputs.browser == 'all' && '["chromium", "firefox", "webkit"]' ||
          format('["{0}"]', needs.should-run.outputs.browser)
        ) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js with cache
        uses: ./.github/actions/setup-node
        with:
          node-version: '20'
          cache-key-suffix: 'e2e-test-${{ matrix.browser }}'
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: nextjs-e2e-build
          path: .

      - name: Verify build artifacts
        run: |
          echo "🧩 Verifying downloaded build..."
          if [ ! -d ".next" ]; then
            echo "⚠️ Build missing, running fallback build"
            npm run build
          fi
          echo "✅ Build verified"

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        run: |
          echo "🎭 Installing Playwright browsers..."
          npx playwright install --with-deps ${{ matrix.browser }}

      - name: Initialize test environment
        run: |
          echo "🔧 Setting up test environment..."
          # Database should be included in artifacts, but fallback just in case
          [ -f "ci-test.db" ] || npm run db:init
          echo "✅ Test environment ready"

      - name: Run Playwright tests
        run: |
          echo "🧪 Running E2E tests with ${{ matrix.browser }}..."
          npx playwright test --project=${{ matrix.browser }} --reporter=github
        
      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-report-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  summary:
    name: E2E Summary
    runs-on: ubuntu-latest
    needs: [should-run, test]
    if: always() && needs.should-run.outputs.run-tests == 'true'
    steps:
      - name: Generate E2E summary
        run: |
          echo "## 🎭 E2E Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Browser(s):** ${{ needs.should-run.outputs.browser }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Browser | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # This is a simplified version - in reality you'd iterate over the matrix results
          echo "| ${{ needs.should-run.outputs.browser }} | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "## ✅ All E2E tests passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Some E2E tests failed" >> $GITHUB_STEP_SUMMARY
            echo "Check individual test reports in artifacts." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
