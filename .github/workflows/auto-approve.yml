name: Auto-Approve Content

on:
  schedule:
    # Run every 6 hours to maintain content buffer
    - cron: '0 */6 * * *'  # At minute 0 past every 6th hour
  
  workflow_dispatch:
    # Allow manual triggering with optional parameters
    inputs:
      force_approval:
        description: 'Force approval of more content'
        required: false
        default: 'false'
        type: boolean
      max_items:
        description: 'Maximum items to approve'
        required: false
        default: '200'
        type: string
      min_confidence:
        description: 'Minimum confidence score'
        required: false
        default: '0.4'
        type: string

jobs:
  auto-approve:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Auto-Approval Status
        id: check-status
        run: |
          echo "üîç Checking auto-approval candidates..."
          
          response=$(curl -s -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.AUTH_TOKEN }}" \
            "${{ secrets.SITE_URL }}/api/admin/auto-approve")
          
          http_code="${response: -3}"
          body="${response%???}"
          
          if [ "$http_code" = "200" ]; then
            echo "‚úÖ Status check successful"
            echo "$body" | jq -r '.estimation.recommendedAction // "No action needed"'
            
            # Extract candidate count for decision making
            candidates=$(echo "$body" | jq -r '.totalCandidates // 0')
            echo "candidates=$candidates" >> $GITHUB_OUTPUT
            
            echo "üìä Found $candidates approval candidates"
          else
            echo "‚ùå Status check failed with code $http_code"
            echo "$body"
            exit 1
          fi

      - name: Run Auto-Approval
        if: steps.check-status.outputs.candidates > 20 || github.event_name == 'workflow_dispatch'
        run: |
          echo "ü§ñ Running auto-approval process..."
          
          # Set parameters from workflow inputs or defaults
          FORCE_APPROVAL="${{ github.event.inputs.force_approval || 'false' }}"
          MAX_ITEMS="${{ github.event.inputs.max_items || '200' }}"
          MIN_CONFIDENCE="${{ github.event.inputs.min_confidence || '0.4' }}"
          
          echo "‚öôÔ∏è Parameters: force=$FORCE_APPROVAL, max=$MAX_ITEMS, min_confidence=$MIN_CONFIDENCE"
          
          response=$(curl -s -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.AUTH_TOKEN }}" \
            -d "{
              \"forceApproval\": $FORCE_APPROVAL,
              \"maxItems\": $MAX_ITEMS,
              \"minConfidenceScore\": $MIN_CONFIDENCE
            }" \
            "${{ secrets.SITE_URL }}/api/admin/auto-approve")
          
          http_code="${response: -3}"
          body="${response%???}"
          
          if [ "$http_code" = "200" ]; then
            echo "‚úÖ Auto-approval completed successfully"
            echo "$body" | jq -r '.message'
            
            # Extract results for reporting
            total_approved=$(echo "$body" | jq -r '.approvalResults.total // 0')
            days_of_content=$(echo "$body" | jq -r '.updatedStats.daysOfContent // 0')
            
            echo "üìä Results:"
            echo "  ‚Ä¢ Total approved: $total_approved items"
            echo "  ‚Ä¢ Days of content remaining: $days_of_content days"
            echo "  ‚Ä¢ Breakdown: $(echo "$body" | jq -c '.approvalResults')"
            
            # Check if we need alerts
            if [ "$days_of_content" -lt 7 ]; then
              echo "‚ö†Ô∏è WARNING: Only $days_of_content days of content remaining!"
              echo "::warning title=Low Content Buffer::Only $days_of_content days of content remaining. Consider running emergency scan."
            fi
          else
            echo "‚ùå Auto-approval failed with code $http_code"
            echo "$body"
            echo "::error title=Auto-Approval Failed::Auto-approval process failed with HTTP $http_code"
            exit 1
          fi

      - name: Skip Auto-Approval
        if: steps.check-status.outputs.candidates <= 20 && github.event_name != 'workflow_dispatch'
        run: |
          echo "‚úÖ Auto-approval not needed"
          echo "üìä Only ${{ steps.check-status.outputs.candidates }} candidates found (threshold: 20)"
          echo "üéØ System is healthy - maintaining current approval levels"

      - name: Verify Content Pipeline Health
        run: |
          echo "üè• Checking overall content pipeline health..."
          
          response=$(curl -s -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.AUTH_TOKEN }}" \
            "${{ secrets.SITE_URL }}/api/admin/automation-health")
          
          http_code="${response: -3}"
          body="${response%???}"
          
          if [ "$http_code" = "200" ]; then
            overall_health=$(echo "$body" | jq -r '.overallHealth // "unknown"')
            days_remaining=$(echo "$body" | jq -r '.contentSummary.daysRemaining // 0')
            
            echo "üìä Overall Health: $overall_health"
            echo "üìÖ Days Remaining: $days_remaining"
            
            # Set workflow status based on health
            case "$overall_health" in
              "critical")
                echo "::error title=Critical Content Health::Content pipeline is in critical state"
                ;;
              "warning") 
                echo "::warning title=Content Health Warning::Content pipeline needs attention"
                ;;
              "healthy")
                echo "‚úÖ Content pipeline is healthy"
                ;;
            esac
            
            # Output recommendations
            recommendations=$(echo "$body" | jq -r '.recommendations[]?' 2>/dev/null || echo "No specific recommendations")
            if [ "$recommendations" != "No specific recommendations" ]; then
              echo "üí° Recommendations:"
              echo "$body" | jq -r '.recommendations[]' | sed 's/^/  ‚Ä¢ /'
            fi
          else
            echo "‚ö†Ô∏è Could not verify pipeline health (HTTP $http_code)"
          fi

      - name: Report Summary
        run: |
          echo "üìã Auto-Approval Workflow Summary"
          echo "================================="
          echo "‚è∞ Triggered: $(date -u)"
          echo "üéØ Trigger: ${{ github.event_name }}"
          echo "üèóÔ∏è Environment: $([ '${{ github.event_name }}' = 'workflow_dispatch' ] && echo 'Manual' || echo 'Scheduled')"
          echo "üìä Candidates checked: ${{ steps.check-status.outputs.candidates || 'N/A' }}"
          echo "‚úÖ Workflow completed successfully"