name: OpenAPI Spec Drift Detection

on:
  pull_request:
    paths:
      - 'app/api/**/*.ts'
      - 'docs/openapi.yaml'
      - 'docs/openapi.ignore.json'
      - 'scripts/route-inventory.ts'
  push:
    branches: [main]
    paths:
      - 'app/api/**/*.ts'
      - 'docs/openapi.yaml'
      - 'docs/openapi.ignore.json'
  workflow_dispatch:
  schedule:
    # Run weekly to catch any drift
    - cron: '0 6 * * 1'  # Monday 6 AM UTC

concurrency:
  group: spec-drift-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: test
  CI: true

jobs:
  validate-openapi-spec:
    name: Validate OpenAPI Specification
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - uses: pnpm/action-setup@v4
          
      - name: Setup Node.js with pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
          
      - name: Install OpenAPI validation tools
        run: |
          pnpm add -g @redocly/cli @apidevtools/swagger-parser
          # Install yq for YAML parsing
          sudo snap install yq || brew install yq || (curl -L https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o yq && chmod +x yq && sudo mv yq /usr/local/bin/)
          
      - name: Validate OpenAPI specification syntax
        run: |
          echo "üîç Validating OpenAPI specification syntax..."
          
          # Check if openapi.yaml exists
          if [ ! -f "docs/openapi.yaml" ]; then
            echo "‚ùå OpenAPI specification not found at docs/openapi.yaml"
            exit 1
          fi
          
          # Check OpenAPI version first
          OPENAPI_VERSION=$(yq eval '.openapi' docs/openapi.yaml)
          echo "üìã Detected OpenAPI version: $OPENAPI_VERSION"
          
          # Validate with Redocly CLI (supports 3.1.0)
          echo "üìã Running Redocly validation..."
          redocly lint docs/openapi.yaml --skip-rule=no-unused-components
          
          # For OpenAPI 3.1.0, use @apidevtools/swagger-parser which supports it better
          if [[ "$OPENAPI_VERSION" == "3.1"* ]]; then
            echo "üìã Running OpenAPI 3.1.0 compatible validation..."
            # Use installed parser directly
            node -e "
              const SwaggerParser = require('@apidevtools/swagger-parser');
              SwaggerParser.validate('docs/openapi.yaml')
                .then(() => console.log('‚úÖ OpenAPI 3.1.0 validation passed'))
                .catch(err => { console.error('‚ùå Validation failed:', err.message); process.exit(1); });
            "
          else
            echo "üìã Running swagger-parser validation..."
            npx swagger-parser validate docs/openapi.yaml
          fi
          
          echo "‚úÖ OpenAPI specification is valid"
          
      - name: Check specification completeness
        run: |
          echo "üîç Checking OpenAPI specification completeness..."
          
          # Basic grep checks for required sections (more reliable than complex yq)
          REQUIRED_STRINGS=(
            "^openapi:"
            "^info:"
            "^servers:"
            "^paths:"
            "^components:"
            "  schemas:"
            "  securitySchemes:"
            "AdminToken:"
          )
          
          for pattern in "${REQUIRED_STRINGS[@]}"; do
            if ! grep -q "$pattern" docs/openapi.yaml; then
              echo "‚ùå Missing required pattern: $pattern"
              exit 1
            fi
            echo "‚úÖ Found pattern: $pattern"
          done
          
          # Check that we have actual paths defined
          PATH_COUNT=$(yq eval '.paths | keys | length' docs/openapi.yaml 2>/dev/null || echo "0")
          if [ "$PATH_COUNT" -eq 0 ]; then
            echo "‚ùå No API paths defined in specification"
            exit 1
          fi
          echo "‚úÖ Found $PATH_COUNT API paths in specification"
          
          echo "‚úÖ OpenAPI specification is complete"

  detect-api-drift:
    name: Detect API Route Drift
    runs-on: ubuntu-latest
    needs: validate-openapi-spec
    timeout-minutes: 10
    outputs:
      drift-detected: ${{ steps.drift-check.outputs.drift-detected }}
      missing-routes: ${{ steps.drift-check.outputs.missing-routes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - uses: pnpm/action-setup@v4
          
      - name: Setup Node.js with pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
          
      - name: Generate current route inventory
        run: |
          echo "üîç Generating current API route inventory..."
          pnpm tsx scripts/route-inventory.ts
          
          # Show inventory summary
          echo "üìä Current route inventory:"
          cat docs/api-inventory.json | jq '.totalRoutes, .adminRoutes, .publicRoutes'
          
      - name: Load ignore list
        id: ignore-list
        run: |
          echo "üìã Loading route ignore list..."
          
          if [ -f "docs/openapi.ignore.json" ]; then
            echo "‚úÖ Found ignore list with $(jq '.ignoredRoutes | length' docs/openapi.ignore.json) entries"
          else
            echo "‚ö†Ô∏è No ignore list found, creating empty one"
            echo '{"ignoredRoutes": [], "ignorePatterns": []}' > docs/openapi.ignore.json
          fi
          
      - name: Extract routes from OpenAPI spec
        run: |
          echo "üîç Extracting documented routes from OpenAPI spec..."
          
          # Extract paths from OpenAPI spec
          yq eval '.paths | keys' docs/openapi.yaml | yq eval '.[]' - > documented-routes.txt
          
          # Prefix with /api for comparison
          sed 's|^|/api|' documented-routes.txt > documented-api-routes.txt
          
          echo "üìã Documented routes:"
          cat documented-api-routes.txt
          
      - name: Check for drift
        id: drift-check
        run: |
          echo "üîç Checking for API route drift..."
          
          # Extract actual routes from inventory
          jq -r '.routes[].path' docs/api-inventory.json > actual-routes.txt
          
          # Extract ignored routes (exact matches)
          jq -r '.ignoredRoutes[].path' docs/openapi.ignore.json > ignored-routes.txt
          
          # Extract ignore patterns
          jq -r '.ignorePatterns[].pattern' docs/openapi.ignore.json > ignore-patterns.txt
          
          # Function to check if route matches any ignore pattern
          is_ignored() {
            local route="$1"
            
            # Check exact matches
            if grep -Fxq "$route" ignored-routes.txt 2>/dev/null; then
              return 0
            fi
            
            # Check patterns
            while IFS= read -r pattern; do
              if [[ "$route" =~ $pattern ]]; then
                return 0
              fi
            done < ignore-patterns.txt 2>/dev/null
            
            return 1
          }
          
          # Find missing routes (in code but not in spec and not ignored)
          MISSING_ROUTES=()
          
          while IFS= read -r route; do
            # Skip empty lines
            [ -z "$route" ] && continue
            
            # Check if route is documented or ignored
            if ! grep -Fxq "$route" documented-api-routes.txt && ! is_ignored "$route"; then
              MISSING_ROUTES+=("$route")
              echo "‚ùå Missing from OpenAPI spec: $route"
            fi
          done < actual-routes.txt
          
          # Check results
          if [ ${#MISSING_ROUTES[@]} -eq 0 ]; then
            echo "‚úÖ No API drift detected - all routes are documented or ignored"
            echo "drift-detected=false" >> $GITHUB_OUTPUT
            echo "missing-routes=" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è API drift detected! ${#MISSING_ROUTES[@]} undocumented routes found"
            
            # Format missing routes for output
            MISSING_JSON=$(printf '%s\n' "${MISSING_ROUTES[@]}" | jq -R . | jq -s .)
            echo "drift-detected=true" >> $GITHUB_OUTPUT
            echo "missing-routes=$MISSING_JSON" >> $GITHUB_OUTPUT
            
            # Generate suggestions
            echo ""
            echo "üîß To fix this drift, either:"
            echo "1. Add the missing routes to docs/openapi.yaml, or"
            echo "2. Add them to docs/openapi.ignore.json with a reason"
            echo ""
            echo "Missing routes:"
            printf '  - %s\n' "${MISSING_ROUTES[@]}"
          fi
          
      - name: Upload drift report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-drift-report
          path: |
            docs/api-inventory.json
            documented-routes.txt
            actual-routes.txt
            ignored-routes.txt
          retention-days: 14

  generate-drift-summary:
    name: Generate Drift Summary
    runs-on: ubuntu-latest
    needs: detect-api-drift
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## üìã OpenAPI Spec Drift Detection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.detect-api-drift.outputs.drift-detected }}" = "true" ]; then
            echo "### ‚ö†Ô∏è Drift Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The following API routes exist in code but are not documented in the OpenAPI specification:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Parse missing routes JSON
            MISSING_ROUTES='${{ needs.detect-api-drift.outputs.missing-routes }}'
            echo "$MISSING_ROUTES" | jq -r '.[]' | while read -r route; do
              echo "- \`$route\`" >> $GITHUB_STEP_SUMMARY
            done
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîß Resolution Options" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "1. **Document the routes**: Add them to \`docs/openapi.yaml\` with proper schemas" >> $GITHUB_STEP_SUMMARY
            echo "2. **Ignore the routes**: Add them to \`docs/openapi.ignore.json\` with clear reasons" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìñ Documentation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- [OpenAPI Specification](./docs/openapi.yaml)" >> $GITHUB_STEP_SUMMARY
            echo "- [Ignore List](./docs/openapi.ignore.json)" >> $GITHUB_STEP_SUMMARY
            echo "- [Route Inventory Script](./scripts/route-inventory.ts)" >> $GITHUB_STEP_SUMMARY
            
          else
            echo "### ‚úÖ No Drift Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All API routes are properly documented or ignored. The OpenAPI specification is up to date!" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow**: \`spec-drift.yml\`" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -Iseconds)" >> $GITHUB_STEP_SUMMARY

  auto-update-spec:
    name: Auto-update OpenAPI Spec (PR only)
    runs-on: ubuntu-latest
    needs: detect-api-drift
    if: github.event_name == 'pull_request' && needs.detect-api-drift.outputs.drift-detected == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - uses: pnpm/action-setup@v4
          
      - name: Setup Node.js with pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Generate and update OpenAPI spec
        run: |
          echo "üîÑ Auto-updating OpenAPI spec to fix drift..."
          
          # Generate current spec
          pnpm tsx scripts/openapi/export.ts --out tmp/openapi.gen.json
          
          # Run diff and auto-update
          node scripts/openapi/diff.mjs
          
          # Check if there are changes to commit
          if git diff --quiet openapi.json; then
            echo "‚úÖ No changes needed to OpenAPI spec"
          else
            echo "üìù Committing OpenAPI spec updates..."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add openapi.json
            git commit -m "fix: auto-update OpenAPI spec to resolve drift"
            git push
            echo "‚úÖ OpenAPI spec updated and committed to PR"
          fi