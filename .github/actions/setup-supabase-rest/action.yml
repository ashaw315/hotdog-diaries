name: 'Setup Supabase REST Environment'
description: 'Configure Supabase connection and environment variables for API testing'
inputs:
  supabase-url:
    description: 'Supabase project URL'
    required: true
  supabase-service-key:
    description: 'Supabase service role key'
    required: true
  database-url:
    description: 'Direct database connection URL'
    required: false
  node-env:
    description: 'Node environment'
    required: false
    default: 'production'
  verify-connection:
    description: 'Whether to verify the connection'
    required: false
    default: 'true'
outputs:
  connection-status:
    description: 'Connection verification status'
    value: ${{ steps.verify.outputs.status }}
  tables-available:
    description: 'Number of accessible tables'
    value: ${{ steps.verify.outputs.tables }}
runs:
  using: 'composite'
  steps:
    - name: Configure environment variables
      shell: bash
      run: |
        echo "🔧 Configuring Supabase environment..."
        echo "SUPABASE_URL=${{ inputs.supabase-url }}" >> $GITHUB_ENV
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ inputs.supabase-service-key }}" >> $GITHUB_ENV
        echo "NODE_ENV=${{ inputs.node-env }}" >> $GITHUB_ENV
        
        # Sanity guard
        if [ -z "${{ inputs.supabase-service-key }}" ]; then
          echo "Missing SUPABASE_SERVICE_ROLE_KEY" >&2
          exit 1
        fi
        
        # Set database URL if provided
        if [[ -n "${{ inputs.database-url }}" ]]; then
          echo "DATABASE_URL=${{ inputs.database-url }}" >> $GITHUB_ENV
        fi
        
        # Configure for production-like environment
        echo "POSTGRES_URL=${{ inputs.database-url }}" >> $GITHUB_ENV
        echo "VERCEL_ENV=production" >> $GITHUB_ENV
        
    - name: Supabase reachability with retry
      shell: bash
      run: |
        echo "🔗 Testing Supabase reachability with retry logic..."
        
        # Retry function with exponential backoff: 5s, 10s, 20s
        attempt=1
        max_attempts=3
        delays=(5 10 20)
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt/$max_attempts..."
          
          code=$(curl -sS -o /dev/null -w "%{http_code}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            --max-time 10 \
            "${SUPABASE_URL}/rest/v1/")
          
          echo "HTTP status: ${code}"
          
          if [ "${code}" = "200" ]; then
            echo "✅ Supabase reachability confirmed on attempt $attempt"
            echo "SUPABASE_REST_CODE=${code}" >> $GITHUB_ENV
            exit 0
          fi
          
          # Check for 4xx/5xx errors
          if [[ "${code}" =~ ^[45][0-9][0-9]$ ]]; then
            echo "❌ HTTP ${code} error detected on attempt $attempt"
            if [ $attempt -eq $max_attempts ]; then
              echo "::error::Supabase reachability failed after $max_attempts attempts with HTTP ${code}"
              echo "## 🚨 Supabase Connection Failure" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Status:** HTTP ${code} after ${max_attempts} retry attempts" >> $GITHUB_STEP_SUMMARY
              echo "**URL:** ${SUPABASE_URL}/rest/v1/" >> $GITHUB_STEP_SUMMARY
              echo "**Retries:** 5s, 10s, 20s delays" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "This indicates a persistent connectivity or authentication issue with Supabase." >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            echo "⚠️ Unexpected response: ${code}"
          fi
          
          if [ $attempt -lt $max_attempts ]; then
            delay=${delays[$((attempt-1))]}
            echo "Waiting ${delay}s before retry..."
            sleep $delay
          fi
          
          attempt=$((attempt + 1))
        done
        
        echo "❌ All $max_attempts attempts failed"
        exit 1
        
    - name: Verify Supabase connection
      id: verify
      if: inputs.verify-connection == 'true'
      shell: bash
      run: |
        echo "🔍 Verifying Supabase connection..."
        
        # Test REST API connection
        RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
          -H "apikey: ${{ inputs.supabase-service-key }}" \
          -H "Authorization: Bearer ${{ inputs.supabase-service-key }}" \
          "${{ inputs.supabase-url }}/rest/v1/" \
          --max-time 10)
        
        HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "✅ Supabase REST API connection successful"
          echo "status=connected" >> $GITHUB_OUTPUT
          
          # Try to get table count
          TABLES_RESPONSE=$(curl -s \
            -H "apikey: ${{ inputs.supabase-service-key }}" \
            -H "Authorization: Bearer ${{ inputs.supabase-service-key }}" \
            "${{ inputs.supabase-url }}/rest/v1/?select=*" \
            --max-time 5 || echo "[]")
          
          # Count accessible tables (rough estimate)
          TABLE_COUNT=$(echo "$TABLES_RESPONSE" | grep -o '"' | wc -l | awk '{print int($1/2)}')
          echo "📊 Estimated accessible tables: $TABLE_COUNT"
          echo "tables=$TABLE_COUNT" >> $GITHUB_OUTPUT
          
        else
          echo "❌ Supabase connection failed (HTTP $HTTP_STATUS)"
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "tables=0" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    - name: Configure database-specific settings
      shell: bash
      run: |
        echo "⚙️ Configuring database settings..."
        
        # Production database configuration
        echo "USE_POSTGRES_IN_DEV=true" >> $GITHUB_ENV
        echo "CI=true" >> $GITHUB_ENV
        
        # Disable SQLite fallback in production environment
        echo "DATABASE_URL_SQLITE=" >> $GITHUB_ENV
        
        echo "✅ Supabase environment configured"