
> hotdog-diaries@1.0.0 dev
> next dev

 ‚ö† Warning: Found multiple lockfiles. Selecting /Users/adamshaw/package-lock.json.
   Consider removing the lockfiles at:
   * /Users/adamshaw/Development/websites/hotdog-diaries/package-lock.json

   ‚ñ≤ Next.js 15.4.1
   - Local:        http://localhost:3000
   - Network:      http://192.168.86.53:3000
   - Environments: .env.local, .env

 ‚úì Starting...
 ‚úì Ready in 2.2s
 ‚úì Compiled /middleware in 470ms (177 modules)
 ‚óã Compiling /api/cron/scan-content ...
 ‚úì Compiled /api/cron/scan-content in 1952ms (625 modules)
=== REDDIT SERVICE CONSTRUCTOR DEBUG ===
Reddit ENV vars: {
  CLIENT_ID: 'SET (rEms...)',
  CLIENT_SECRET: 'SET (HJZA...)',
  USERNAME: 'SET (Massive-Engine-1759)',
  PASSWORD: 'SET (redacted)',
  USER_AGENT: 'HotdogDiaries/1.0'
}
üîç BYPASSING test credential check for debugging
‚ö†Ô∏è WARNING: Using test credentials - these will fail Reddit API calls
Reddit API client initialized with real credentials
Database connection established
Database connection established
Database connection successful
Query executed {
  text: 'SELECT * FROM scan_config ORDER BY created_at DESC LIMIT 1',
  duration: 220,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 3,
  rows: null
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 7,
  rows: undefined
}
Query executed {
  text: 'SELECT * FROM reddit_scan_config LIMIT $1',
  duration: 2,
  rows: 1
}
(node:49261) TimeoutNegativeWarning: -Infinity is a negative number.
Timeout duration was set to 1.
(Use `node --trace-warnings ...` to show where the warning was created)
(node:49261) [DEP0169] DeprecationWarning: `url.parse()` behavior is not standardized and prone to errors that have security implications. Use the WHATWG URL API instead. CVEs are not issued for `url.parse()` vulnerabilities.
Database connection established
Database connection established
Database connection established
Database connection established
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 153,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 154,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 155,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 165,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 41,
  rows: 1
}
‚ö†Ô∏è  MASTODON: Scan failed, falling back to mock data
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 40,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 4,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 8,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 11,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 15,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 3,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 4,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 5,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 6,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 4,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 13,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 9,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 4,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 3,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 12,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 9,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 2,
  rows: 0
}
‚ö†Ô∏è  YOUTUBE: API key not configured, using mock data
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 8,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 53
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 19
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 2,
  rows: 0
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 3,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 9,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 9,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 2,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 5,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 4,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 5,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 5,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 3,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 4,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 7,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 7,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 6,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 3,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 4,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 5,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 10,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 5,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 2,
  rows: 0
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 4,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 19
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 5,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 4,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 4,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 13,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 7,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 8,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 8,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 4,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 2,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 4,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 4,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 6,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 7,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 4,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 5,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 4,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 5,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 6,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 7,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 8,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 8,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 4,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 4,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 4,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 3,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 11
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 7,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 5,
  rows: 0
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 3,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 3,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 3,
  rows: 53
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 5,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 5,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 6,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 6,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 19
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 2,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 19
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 2,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 3,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 3,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 4,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 19,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection removed
Database connection removed
Database connection removed
Database connection removed
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: [homemade] 3 hotdogs with hash: 67ae6eb75c1efc90_j7fufr...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 104,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 104
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 104, content_text: '[homemade] 3 hotdogs' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Hotdog from Freddy's with hash: b2a08ed1d523536f_asefst...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 105,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 105
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 105, content_text: "Hotdog from Freddy's" }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Doing food for 60 people and am concerned I wont have enough with hash: 23d259dd1936566d_l3won5...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 106,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 106
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 106,
  content_text: 'Doing food for 60 people and am concerned I wont h'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Are these a good color for hot dogs over charcoal? Grew up without a father so I‚Äôm trying to get great at grilling. Thanks for any feedback! with hash: 7a3a150fbd3c8b6f_fu9s45...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 107,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 107
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 107,
  content_text: 'Are these a good color for hot dogs over charcoal?'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Mustard is the superior hot dog condiment. with hash: e9e8e8eae724b1cf_hm0la4...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 108,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 108
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 108, content_text: 'Mustard is the superior hot dog condiment.' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Right now, you can get a ticket to the White Sox, a hot dog, drink, chips, cookie, and a souvenir metal water bottle for $19 with hash: 6b92f3a82fb5199d_ix9lj9...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 109,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 109
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 109,
  content_text: 'Right now, you can get a ticket to the White Sox, '
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: How do you enjoy a hot dog?  Cook style, condiments, side dishes, etc? with hash: 8c7f6e57e36c6bc7_faq14j...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 110,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 110
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 110,
  content_text: 'How do you enjoy a hot dog?  Cook style, condiment'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Cooking for a short-notice wedding ‚Ä¶help! with hash: 2c4927a7087e025c_j19o5t...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 111,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 111
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 111,
  content_text: 'Cooking for a short-notice wedding ‚Ä¶help!\nMy daugh'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: My girl and I comparing wieners with hash: 8070997b3aab66f6_46sft1...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 112,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 112
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 112, content_text: 'My girl and I comparing wieners' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM reddit_scan_config LIMIT $1',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO reddit_scan_config (is_enabled, scan_interval, max_posts_per_scan, target_subreddits, se',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'UPDATE scan_config SET last_scan_at = NOW(), updated_at = NOW()',
  duration: 5,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
 POST /api/cron/scan-content 200 in 58203ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  rows: 12
}
Database connection established
Query executed { text: 'SELECT 1 FROM system_logs LIMIT 1', duration: 25, rows: 1 }
Query executed {
  text: 'INSERT INTO system_logs (log_level, component, message, metadata) VALUES ($1, $2, $3, $4), ($5, $6, ',
  duration: 1,
  rows: 9
}
 ‚úì Compiled in 37ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection removed
 ‚úì Compiled /api/cron/scan-content in 376ms (441 modules)
=== REDDIT SERVICE CONSTRUCTOR DEBUG ===
Reddit ENV vars: {
  CLIENT_ID: 'SET (rEms...)',
  CLIENT_SECRET: 'SET (HJZA...)',
  USERNAME: 'SET (Massive-Engine-1759)',
  PASSWORD: 'SET (redacted)',
  USER_AGENT: 'HotdogDiaries/1.0'
}
üîç BYPASSING test credential check for debugging
‚ö†Ô∏è WARNING: Using test credentials - these will fail Reddit API calls
Reddit API client initialized with real credentials
Database connection established
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: 'SELECT * FROM scan_config ORDER BY created_at DESC LIMIT 1',
  duration: 28,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM reddit_scan_config LIMIT $1',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 5,
  rows: 1
}
‚ö†Ô∏è  MASTODON: Scan failed, falling back to mock data
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 5,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 4,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 3,
  rows: 19
}
Database connection established
Database connection established
Database connection established
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 29,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 32,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 33,
  rows: 1
}
Database connection established
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 26,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 2,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 4,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 3,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
‚ö†Ô∏è  YOUTUBE: API key not configured, using mock data
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 3,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 3,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 9,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 10,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 10,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection removed
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Database connection removed
Database connection removed
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: [homemade] 3 hotdogs with hash: 67ae6eb75c1efc90_07gnm4...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 113,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 113
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 113, content_text: '[homemade] 3 hotdogs' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Hotdog from Freddy's with hash: b2a08ed1d523536f_r3hijg...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 114,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 114
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 114, content_text: "Hotdog from Freddy's" }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Doing food for 60 people and am concerned I wont have enough with hash: 23d259dd1936566d_lvpea5...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 115,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 115
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 115,
  content_text: 'Doing food for 60 people and am concerned I wont h'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Are these a good color for hot dogs over charcoal? Grew up without a father so I‚Äôm trying to get great at grilling. Thanks for any feedback! with hash: 7a3a150fbd3c8b6f_pfuqx0...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 116,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 116
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 116,
  content_text: 'Are these a good color for hot dogs over charcoal?'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Mustard is the superior hot dog condiment. with hash: e9e8e8eae724b1cf_dhh4ir...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 117,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 117
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 117, content_text: 'Mustard is the superior hot dog condiment.' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Right now, you can get a ticket to the White Sox, a hot dog, drink, chips, cookie, and a souvenir metal water bottle for $19 with hash: 6b92f3a82fb5199d_v9qar5...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 118,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 118
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 118,
  content_text: 'Right now, you can get a ticket to the White Sox, '
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: How do you enjoy a hot dog?  Cook style, condiments, side dishes, etc? with hash: 8c7f6e57e36c6bc7_l8j1ju...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 119,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 119
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 119,
  content_text: 'How do you enjoy a hot dog?  Cook style, condiment'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Cooking for a short-notice wedding ‚Ä¶help! with hash: 2c4927a7087e025c_quhvjr...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 120,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 120
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 120,
  content_text: 'Cooking for a short-notice wedding ‚Ä¶help!\nMy daugh'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: My girl and I comparing wieners with hash: 8070997b3aab66f6_a9ided...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 121,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 121
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 121, content_text: 'My girl and I comparing wieners' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM reddit_scan_config LIMIT $1',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO reddit_scan_config (is_enabled, scan_interval, max_posts_per_scan, target_subreddits, se',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'UPDATE scan_config SET last_scan_at = NOW(), updated_at = NOW()',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
 POST /api/cron/scan-content 200 in 56062ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  rows: 12
}
Database connection established
Query executed { text: 'SELECT 1 FROM system_logs LIMIT 1', duration: 20, rows: 1 }
Query executed {
  text: 'INSERT INTO system_logs (log_level, component, message, metadata) VALUES ($1, $2, $3, $4), ($5, $6, ',
  duration: 1,
  rows: 9
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: 'SELECT * FROM scan_config ORDER BY created_at DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM reddit_scan_config LIMIT $1',
  duration: 2,
  rows: 1
}
Database connection established
Database connection established
Database connection established
Database connection established
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 35,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 37,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 38,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 38,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
‚ö†Ô∏è  MASTODON: Scan failed, falling back to mock data
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 3,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 2,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 3,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 3,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 3,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 3,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
‚ö†Ô∏è  YOUTUBE: API key not configured, using mock data
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 2,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 2,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 1,
  rows: 53
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 19
}
Query executed {
  text: 'SELECT * FROM filter_patterns WHERE pattern_type = $1 AND is_enabled = true',
  duration: 0,
  rows: 11
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection removed
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Database connection removed
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: [homemade] 3 hotdogs with hash: 67ae6eb75c1efc90_z6y85b...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 122,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 122
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 122, content_text: '[homemade] 3 hotdogs' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Hotdog from Freddy's with hash: b2a08ed1d523536f_cd0ko6...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 123,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 123
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 123, content_text: "Hotdog from Freddy's" }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Doing food for 60 people and am concerned I wont have enough with hash: 23d259dd1936566d_w780xc...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 124,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 124
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 124,
  content_text: 'Doing food for 60 people and am concerned I wont h'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Are these a good color for hot dogs over charcoal? Grew up without a father so I‚Äôm trying to get great at grilling. Thanks for any feedback! with hash: 7a3a150fbd3c8b6f_cruxdd...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 125,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 125
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 125,
  content_text: 'Are these a good color for hot dogs over charcoal?'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Mustard is the superior hot dog condiment. with hash: e9e8e8eae724b1cf_d99h05...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 126,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 126
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 126, content_text: 'Mustard is the superior hot dog condiment.' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Right now, you can get a ticket to the White Sox, a hot dog, drink, chips, cookie, and a souvenir metal water bottle for $19 with hash: 6b92f3a82fb5199d_yz45a4...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 127,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 127
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 127,
  content_text: 'Right now, you can get a ticket to the White Sox, '
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: How do you enjoy a hot dog?  Cook style, condiments, side dishes, etc? with hash: 8c7f6e57e36c6bc7_4li6tt...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 128,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 128
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 128,
  content_text: 'How do you enjoy a hot dog?  Cook style, condiment'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Cooking for a short-notice wedding ‚Ä¶help! with hash: 2c4927a7087e025c_pn2d5o...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 129,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 129
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 129,
  content_text: 'Cooking for a short-notice wedding ‚Ä¶help!\nMy daugh'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: My girl and I comparing wieners with hash: 8070997b3aab66f6_w8kax4...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 130,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 130
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 130, content_text: 'My girl and I comparing wieners' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM reddit_scan_config LIMIT $1',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO reddit_scan_config (is_enabled, scan_interval, max_posts_per_scan, target_subreddits, se',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'UPDATE scan_config SET last_scan_at = NOW(), updated_at = NOW()',
  duration: 4,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
 POST /api/cron/scan-content 200 in 55256ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 12
}
Query executed { text: 'SELECT 1 FROM system_logs LIMIT 1', duration: 1, rows: 1 }
Query executed {
  text: 'INSERT INTO system_logs (log_level, component, message, metadata) VALUES ($1, $2, $3, $4), ($5, $6, ',
  duration: 1,
  rows: 9
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
 ‚óã Compiling /api/content ...
 ‚úì Compiled /api/content in 1194ms (328 modules)
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '      SELECT COUNT(*) as total \n' +
    '      FROM content_queue\n' +
    "      WHERE content_status = 'posted' AND ",
  duration: 5,
  rows: 1
}
Query executed {
  text: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        content_text,\n' +
    '        content_image_url,\n' +
    '        content_video_ur',
  duration: 2,
  rows: 3
}
 GET /api/content?limit=5 200 in 1429ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
 ‚óã Compiling / ...
 ‚úì Compiled / in 1005ms (716 modules)
 GET / 200 in 1459ms
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '      SELECT COUNT(*) as total \n' +
    '      FROM content_queue\n' +
    "      WHERE content_status = 'posted' AND ",
  duration: 4,
  rows: 1
}
Query executed {
  text: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        content_text,\n' +
    '        content_image_url,\n' +
    '        content_video_ur',
  duration: 1,
  rows: 3
}
 GET /api/content?page=1&limit=6 200 in 141ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 5,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
 ‚óã Compiling /api/cron/scan-content ...
 ‚úì Compiled /api/cron/scan-content in 634ms (757 modules)
=== REDDIT SERVICE CONSTRUCTOR DEBUG ===
Reddit ENV vars: {
  CLIENT_ID: 'SET (rEms...)',
  CLIENT_SECRET: 'SET (HJZA...)',
  USERNAME: 'SET (Massive-Engine-1759)',
  PASSWORD: 'SET (redacted)',
  USER_AGENT: 'HotdogDiaries/1.0'
}
üîç BYPASSING test credential check for debugging
‚ö†Ô∏è WARNING: Using test credentials - these will fail Reddit API calls
Reddit API client initialized with real credentials
Database connection established
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
 GET / 200 in 145ms
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 3,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 159,
  rows: 1
}
 POST /api/cron/scan-content?platforms=pixabay&maxPosts=5 401 in 1434ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
 ‚óã Compiling /api/admin/login ...
 ‚úì Compiled /api/admin/login in 1100ms (1166 modules)
Database connection established
Database connection successful
Query executed {
  text: 'SELECT * FROM admin_users WHERE username = $1 AND is_active = $2 LIMIT $3',
  duration: 4,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 6,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
API Error [/api/admin/login]: Error [HttpError]: Invalid username or password
    at <unknown> (HttpError: Invalid username or password)
    at createApiError (lib/api-middleware.ts:23:9)
    at loginHandler (app/api/admin/login/route.ts:85:29)
    at async POST (app/api/admin/login/route.ts:98:11)
  21 |
  22 | export function createApiError(message: string, statusCode: number = 500, code?: string): HttpError {
> 23 |   return new HttpError(message, statusCode, code)
     |         ^
  24 | }
  25 |
  26 | export async function handleApiError( {
  statusCode: 401,
  code: 'INVALID_CREDENTIALS'
}
 POST /api/admin/login 401 in 1929ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
API Error [/api/admin/login]: Error [HttpError]: Invalid JSON in request body
    at <unknown> (HttpError: Invalid JSON in request body)
    at createApiError (lib/api-middleware.ts:23:9)
    at validateJsonBody (lib/api-middleware.ts:125:10)
    at async loginHandler (app/api/admin/login/route.ts:32:15)
    at async POST (app/api/admin/login/route.ts:98:11)
  21 |
  22 | export function createApiError(message: string, statusCode: number = 500, code?: string): HttpError {
> 23 |   return new HttpError(message, statusCode, code)
     |         ^
  24 | }
  25 |
  26 | export async function handleApiError( {
  statusCode: 400,
  code: 'INVALID_JSON'
}
 POST /api/admin/login 400 in 177ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: 'SELECT * FROM admin_users WHERE username = $1 AND is_active = $2 LIMIT $3',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'UPDATE admin_users \n' +
    '         SET last_login_at = NOW(), \n' +
    '             login_count = COALESCE(login_c',
  duration: 8,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
üç™ [Login] Setting authentication cookies for user: admin
üç™ [Login] Access token length: 201
üç™ [Login] Refresh token length: 212
üç™ [Login] Cookies set in response, returning to client
 POST /api/admin/login 200 in 324ms
 ‚úì Compiled /_not-found in 496ms (869 modules)
 POST /api/admin/dashboard/manual-scan 404 in 814ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 21,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
 ‚óã Compiling /api/admin/social/scan-all ...
 ‚úì Compiled /api/admin/social/scan-all in 532ms (1171 modules)
=== REDDIT SERVICE CONSTRUCTOR DEBUG ===
Reddit ENV vars: {
  CLIENT_ID: 'SET (rEms...)',
  CLIENT_SECRET: 'SET (HJZA...)',
  USERNAME: 'SET (Massive-Engine-1759)',
  PASSWORD: 'SET (redacted)',
  USER_AGENT: 'HotdogDiaries/1.0'
}
üîç BYPASSING test credential check for debugging
‚ö†Ô∏è WARNING: Using test credentials - these will fail Reddit API calls
Reddit API client initialized with real credentials
Database connection established
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 31,
  rows: 1
}
 POST /api/admin/social/scan-all 500 in 1129ms
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 4,
  rows: undefined
}
Database connection removed
 ‚úì Compiled /api/admin/social/scan in 285ms (1173 modules)
=== REDDIT SERVICE CONSTRUCTOR DEBUG ===
Reddit ENV vars: {
  CLIENT_ID: 'SET (rEms...)',
  CLIENT_SECRET: 'SET (HJZA...)',
  USERNAME: 'SET (Massive-Engine-1759)',
  PASSWORD: 'SET (redacted)',
  USER_AGENT: 'HotdogDiaries/1.0'
}
üîç BYPASSING test credential check for debugging
‚ö†Ô∏è WARNING: Using test credentials - these will fail Reddit API calls
Reddit API client initialized with real credentials
(node:49261) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 SIGTERM listeners added to [process]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit
(node:49261) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 SIGINT listeners added to [process]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit
Database connection established
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'SELECT * FROM reddit_scan_config LIMIT $1',
  duration: 44,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM reddit_scan_config LIMIT $1',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 4,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  rows: 3
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  rows: 3
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: [homemade] 3 hotdogs with hash: 67ae6eb75c1efc90_ngf303...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 5,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 132,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 132
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 2,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 132, content_text: '[homemade] 3 hotdogs' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Hotdog from Freddy's with hash: b2a08ed1d523536f_xvdg54...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 133,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 133
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 133, content_text: "Hotdog from Freddy's" }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Doing food for 60 people and am concerned I wont have enough with hash: 23d259dd1936566d_v7kn9o...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 134,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 134
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 134,
  content_text: 'Doing food for 60 people and am concerned I wont h'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Are these a good color for hot dogs over charcoal? Grew up without a father so I‚Äôm trying to get great at grilling. Thanks for any feedback! with hash: 7a3a150fbd3c8b6f_f37nhf...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 135,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 135
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 135,
  content_text: 'Are these a good color for hot dogs over charcoal?'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Mustard is the superior hot dog condiment. with hash: e9e8e8eae724b1cf_5y06xu...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 136,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 136
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 136, content_text: 'Mustard is the superior hot dog condiment.' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Right now, you can get a ticket to the White Sox, a hot dog, drink, chips, cookie, and a souvenir metal water bottle for $19 with hash: 6b92f3a82fb5199d_n9mhra...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 137,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 137
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 137,
  content_text: 'Right now, you can get a ticket to the White Sox, '
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: How do you enjoy a hot dog?  Cook style, condiments, side dishes, etc? with hash: 8c7f6e57e36c6bc7_eby0cr...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 138,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 138
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 138,
  content_text: 'How do you enjoy a hot dog?  Cook style, condiment'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Cooking for a short-notice wedding ‚Ä¶help! with hash: 2c4927a7087e025c_eggyim...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 139,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 139
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 139,
  content_text: 'Cooking for a short-notice wedding ‚Ä¶help!\nMy daugh'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: My girl and I comparing wieners with hash: 8070997b3aab66f6_2mkp98...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 140,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 140
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 140, content_text: 'My girl and I comparing wieners' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM reddit_scan_config LIMIT $1',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO reddit_scan_config (is_enabled, scan_interval, max_posts_per_scan, target_subreddits, se',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
 POST /api/admin/social/scan 200 in 56125ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 4,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 10,
  rows: 12
}
Database connection established
Query executed { text: 'SELECT 1 FROM system_logs LIMIT 1', duration: 46, rows: 1 }
Query executed {
  text: 'INSERT INTO system_logs (log_level, component, message, metadata) VALUES ($1, $2, $3, $4), ($5, $6, ',
  duration: 27,
  rows: 9
}
 ‚úì Compiled /api/cron/scan-content in 391ms (757 modules)
=== REDDIT SERVICE CONSTRUCTOR DEBUG ===
Reddit ENV vars: {
  CLIENT_ID: 'SET (rEms...)',
  CLIENT_SECRET: 'SET (HJZA...)',
  USERNAME: 'SET (Massive-Engine-1759)',
  PASSWORD: 'SET (redacted)',
  USER_AGENT: 'HotdogDiaries/1.0'
}
üîç BYPASSING test credential check for debugging
‚ö†Ô∏è WARNING: Using test credentials - these will fail Reddit API calls
Reddit API client initialized with real credentials
 GET /api/cron/scan-content?debug=true 401 in 931ms
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
 ‚óã Compiling /api/admin/content/queue ...
 ‚úì Compiled /api/admin/content/queue in 581ms (1165 modules)
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Database connection successful
Query executed {
  text: 'SELECT id, username, email, full_name, is_active, created_at, last_login_at, login_count FROM admin_',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '      SELECT \n' +
    '        cq.*,\n' +
    '        ca.confidence_score,\n' +
    '        ca.is_spam,\n' +
    '        ca.is_inapprop',
  duration: 6,
  rows: 50
}
Query executed {
  text: '\n      SELECT COUNT(*) as total\n      FROM content_queue cq\n      \n    ',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
 GET /api/admin/content/queue 200 in 854ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  rows: 3
}
 ‚óã Compiling /api/admin/logs ...
 ‚úì Compiled /api/admin/logs in 642ms (1189 modules)
Failed to query logs: TypeError: queryBuilder.clone is not a function
    at LoggingService.queryLogs (lib/services/logging.ts:253:38)
    at eval (app/api/admin/logs/route.ts:22:38)
    at eval (lib/middleware/error-handler.ts:173:21)
  251 |
  252 |       // Get total count
> 253 |       const countQuery = queryBuilder.clone().count('*')
      |                                      ^
  254 |       const totalResult = await countQuery.first()
  255 |       const total = parseInt(totalResult?.count || '0')
  256 |
[ErrorHandlingMiddleware] Log query failed: queryBuilder.clone is not a function {
  metadata: {
    category: 'database',
    statusCode: 500,
    isOperational: true,
    context: { originalError: 'Error' },
    requestContext: {
      requestId: '644c5ffa-c27a-4058-a461-e5cdb652fe36',
      userId: undefined,
      sessionId: '[REDACTED]',
      path: '/api/admin/logs',
      method: 'GET',
      userAgent: 'curl/7.88.1',
      ip: '::ffff:127.0.0.1',
      timestamp: {},
      params: undefined
    },
    userAgent: 'curl/7.88.1',
    ip: '::ffff:127.0.0.1'
  },
  stack: 'DatabaseError: Log query failed: queryBuilder.clone is not a function\n' +
    '    at new DatabaseError (webpack-internal:///(rsc)/./lib/middleware/error-handler.ts:63:9)\n' +
    '    at ErrorHandlingMiddleware.categorizeError (webpack-internal:///(rsc)/./lib/middleware/error-handler.ts:251:20)\n' +
    '    at ErrorHandlingMiddleware.handleError (webpack-internal:///(rsc)/./lib/middleware/error-handler.ts:120:39)\n' +
    '    at eval (webpack-internal:///(rsc)/./lib/middleware/error-handler.ts:133:29)\n' +
    '    at async AppRouteRouteModule.do (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:5:38782)\n' +
    '    at async AppRouteRouteModule.handle (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:5:45984)\n' +
    '    at async responseGenerator (webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Flogs%2Froute&page=%2Fapi%2Fadmin%2Flogs%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Flogs%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!:206:38)\n' +
    '    at async AppRouteRouteModule.handleResponse (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:1:183647)\n' +
    '    at async handleResponse (webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Flogs%2Froute&page=%2Fapi%2Fadmin%2Flogs%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Flogs%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!:268:32)\n' +
    '    at async handler (webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Flogs%2Froute&page=%2Fapi%2Fadmin%2Flogs%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Flogs%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!:320:13)\n' +
    '    at async doRender (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:1586:34)\n' +
    '    at async DevServer.renderToResponseWithComponentsImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:1928:13)\n' +
    '    at async DevServer.renderPageComponent (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:2394:24)\n' +
    '    at async DevServer.renderToResponseImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:2434:32)\n' +
    '    at async DevServer.pipeImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:1034:25)\n' +
    '    at async NextNodeServer.handleCatchallRenderRequest (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/next-server.js:391:17)\n' +
    '    at async DevServer.handleRequestImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:925:17)\n' +
    '    at async /Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/dev/next-dev-server.js:398:20\n' +
    '    at async Span.traceAsyncFn (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/trace/trace.js:157:20)\n' +
    '    at async DevServer.handleRequest (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/dev/next-dev-server.js:394:24)\n' +
    '    at async invokeRender (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/lib/router-server.js:239:21)\n' +
    '    at async handleRequest (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/lib/router-server.js:436:24)\n' +
    '    at async requestHandlerImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/lib/router-server.js:464:13)\n' +
    '    at async Server.requestListener (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/lib/start-server.js:218:13)',
  timestamp: '2025-08-07T01:01:28.791Z'
}
 GET /api/admin/logs?component=FilteringService&limit=10 500 in 820ms
Database connection established
Database connection successful
Query executed { text: 'SELECT 1 FROM system_logs LIMIT 1', duration: 2, rows: 1 }
Query executed {
  text: 'INSERT INTO system_logs (log_level, component, message, metadata) VALUES ($1, $2, $3, $4) RETURNING ',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 30,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 93,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 8,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
 ‚úì Compiled in 279ms (399 modules)
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 7,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 22,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
 ‚úì Compiled /api/admin/content/queue in 221ms (609 modules)
Database connection established
Database connection successful
Query executed {
  text: 'SELECT id, username, email, full_name, is_active, created_at, last_login_at, login_count FROM admin_',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '      SELECT \n' +
    '        cq.*,\n' +
    '        ca.confidence_score,\n' +
    '        ca.is_spam,\n' +
    '        ca.is_inapprop',
  duration: 5,
  rows: 10
}
Query executed {
  text: '\n      SELECT COUNT(*) as total\n      FROM content_queue cq\n      \n    ',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
 GET /api/admin/content/queue?source_platform=pixabay&limit=10 200 in 505ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 64,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 3,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  rows: 3
}
 ‚óã Compiling /api/admin/content ...
 ‚úì Compiled /api/admin/content in 565ms (866 modules)
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        content_text,\n' +
    '        content_type,\n' +
    '        source_platform,\n' +
    '    ',
  duration: 4,
  rows: 5
}
Query executed {
  text: '\n' +
    '      SELECT COUNT(*) as total\n' +
    '      FROM content_queue\n' +
    '      WHERE 1=1\n' +
    '    ',
  duration: 1,
  rows: 1
}
 GET /api/admin/content?source_platform=pixabay&limit=5 200 in 711ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
 ‚úì Compiled /api/content in 279ms (618 modules)
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '      SELECT COUNT(*) as total \n' +
    '      FROM content_queue\n' +
    "      WHERE content_status = 'posted' AND ",
  duration: 3,
  rows: 1
}
Query executed {
  text: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        content_text,\n' +
    '        content_image_url,\n' +
    '        content_video_ur',
  duration: 1,
  rows: 3
}
 GET /api/content 200 in 392ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
 GET / 200 in 346ms
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
 ‚óã Compiling /api/admin/social/distribution ...
 ‚úì Compiled /api/admin/social/distribution in 1451ms (1011 modules)
=== REDDIT SERVICE CONSTRUCTOR DEBUG ===
Reddit ENV vars: {
  CLIENT_ID: 'SET (rEms...)',
  CLIENT_SECRET: 'SET (HJZA...)',
  USERNAME: 'SET (Massive-Engine-1759)',
  PASSWORD: 'SET (redacted)',
  USER_AGENT: 'HotdogDiaries/1.0'
}
üîç BYPASSING test credential check for debugging
‚ö†Ô∏è WARNING: Using test credentials - these will fail Reddit API calls
Reddit API client initialized with real credentials
Database connection established
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 30,
  rows: 1
}
 GET /api/admin/social/distribution 500 in 2201ms
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 3,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 45,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 19,
  rows: 3
}
 ‚úì Compiled /api/admin/content/[id]/approve in 221ms (1014 modules)
Database connection established
Database connection successful
Query executed {
  text: 'UPDATE content_queue \n' +
    '       SET is_approved = TRUE, \n' +
    '           updated_at = NOW(),\n' +
    '           admi',
  duration: 9,
  rows: 1
}
 POST /api/admin/content/131/approve 200 in 1335ms
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
 ‚úì Compiled /api/admin/content/[id] in 245ms (712 modules)
Error: Route "/api/admin/content/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at updateContentHandler (app/api/admin/content/[id]/route.ts:55:38)
    at PUT (app/api/admin/content/[id]/route.ts:139:17)
  53 |
  54 |   try {
> 55 |     const contentId = parseInt(params.id)
     |                                      ^
  56 |     
  57 |     if (isNaN(contentId)) {
  58 |       throw createApiError('Invalid content ID', 400, 'INVALID_CONTENT_ID')
Failed to update content: Error [HttpError]: No valid fields to update
    at <unknown> (HttpError: No valid fields to update)
    at createApiError (lib/api-middleware.ts:23:9)
    at updateContentHandler (app/api/admin/content/[id]/route.ts:94:27)
    at async PUT (app/api/admin/content/[id]/route.ts:139:11)
  21 |
  22 | export function createApiError(message: string, statusCode: number = 500, code?: string): HttpError {
> 23 |   return new HttpError(message, statusCode, code)
     |         ^
  24 | }
  25 |
  26 | export async function handleApiError( {
  statusCode: 400,
  code: 'NO_UPDATE_FIELDS'
}
Error: Route "/api/admin/content/[id]" used `params.id`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at PUT (app/api/admin/content/[id]/route.ts:141:85)
  139 |     return await updateContentHandler(request, context)
  140 |   } catch (error) {
> 141 |     return await handleApiError(error, request, `/api/admin/content/${context.params.id}`)
      |                                                                                     ^
  142 |   }
  143 | }
  144 |
Database connection established
Database connection successful
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
API Error [/api/admin/content/131]: Error [HttpError]: Failed to update content
    at <unknown> (HttpError: Failed to update content)
    at createApiError (lib/api-middleware.ts:23:9)
    at updateContentHandler (app/api/admin/content/[id]/route.ts:125:25)
    at async PUT (app/api/admin/content/[id]/route.ts:139:11)
  21 |
  22 | export function createApiError(message: string, statusCode: number = 500, code?: string): HttpError {
> 23 |   return new HttpError(message, statusCode, code)
     |         ^
  24 | }
  25 |
  26 | export async function handleApiError( {
  statusCode: 500,
  code: 'CONTENT_UPDATE_ERROR'
}
 PUT /api/admin/content/131 500 in 1568ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
 ‚úì Compiled /api/admin/social/settings in 225ms (715 modules)
Database connection established
Database connection successful
Query error {
  text: 'SELECT * FROM social_media_coordination_config LIMIT $1',
  duration: 4,
  error: 'relation "social_media_coordination_config" does not exist',
  code: '42P01'
}
Database connection removed
Database connection established
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 25,
  rows: 1
}
 GET /api/admin/social/settings 500 in 373ms
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
 ‚úì Compiled /api/admin/social/status in 270ms (1018 modules)
=== REDDIT SERVICE CONSTRUCTOR DEBUG ===
Reddit ENV vars: {
  CLIENT_ID: 'SET (rEms...)',
  CLIENT_SECRET: 'SET (HJZA...)',
  USERNAME: 'SET (Massive-Engine-1759)',
  PASSWORD: 'SET (redacted)',
  USER_AGENT: 'HotdogDiaries/1.0'
}
üîç BYPASSING test credential check for debugging
‚ö†Ô∏è WARNING: Using test credentials - these will fail Reddit API calls
Reddit API client initialized with real credentials
Database connection established
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 24,
  rows: 1
}
 GET /api/admin/social/status 500 in 727ms
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 3,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
 ‚úì Compiled /api/admin/filters in 345ms (709 modules)
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        pattern_type,\n' +
    '        pattern,\n' +
    '        description,\n' +
    '        is_re',
  duration: 5,
  rows: 102
}
Query executed {
  text: '\n' +
    '      SELECT \n' +
    '        total_processed,\n' +
    '        auto_approved,\n' +
    '        auto_rejected,\n' +
    '        flagge',
  duration: 7,
  rows: 0
}
 GET /api/admin/filters 200 in 515ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
 ‚úì Compiled /_not-found in 400ms (714 modules)
 POST /api/admin/content/140/process 404 in 682ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 20,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 4,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
 ‚úì Compiled /api/admin/content/process in 438ms (716 modules)
[ContentProcessor] Starting batch processing { totalItems: undefined, batchSize: NaN }
[ContentProcessor] Batch processing completed { totalProcessed: 0, successful: 0, failed: 0, duration: 0 }
 POST /api/admin/content/process 200 in 633ms
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed { text: 'SELECT 1 FROM system_logs LIMIT 1', duration: 3, rows: 1 }
Query executed {
  text: 'INSERT INTO system_logs (log_level, component, message, metadata) VALUES ($1, $2, $3, $4), ($5, $6, ',
  duration: 3,
  rows: 2
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
 ‚óã Compiling /api/admin/content/queue ...
 ‚úì Compiled /api/admin/content/queue in 648ms (617 modules)
Database connection established
Database connection successful
Query executed {
  text: 'SELECT id, username, email, full_name, is_active, created_at, last_login_at, login_count FROM admin_',
  duration: 3,
  rows: 1
}
Query executed {
  text: '\n' +
    '      SELECT \n' +
    '        cq.*,\n' +
    '        ca.confidence_score,\n' +
    '        ca.is_spam,\n' +
    '        ca.is_inapprop',
  duration: 7,
  rows: 5
}
Query executed {
  text: '\n      SELECT COUNT(*) as total\n      FROM content_queue cq\n      \n    ',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
 GET /api/admin/content/queue?limit=5 200 in 1082ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b7880550-af32-40be-890b-02b9d122db67, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:15:00.066886-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 34,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
 ‚úì Compiled /api/admin/content/[id]/approve in 204ms (620 modules)
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  rows: 3
}
Database connection established
Database connection successful
Query executed {
  text: 'UPDATE content_queue \n' +
    '       SET is_approved = TRUE, \n' +
    '           updated_at = NOW(),\n' +
    '           admi',
  duration: 10,
  rows: 1
}
 POST /api/admin/content/140/approve 200 in 341ms
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f94c8e51-7f7c-42f4-8e38-eb07e8261832, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:15:10.084148-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
 ‚úì Compiled /api/content in 231ms (625 modules)
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '      SELECT COUNT(*) as total \n' +
    '      FROM content_queue\n' +
    "      WHERE content_status = 'posted' AND ",
  duration: 3,
  rows: 1
}
Query executed {
  text: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        content_text,\n' +
    '        content_image_url,\n' +
    '        content_video_ur',
  duration: 1,
  rows: 2
}
 GET /api/content?limit=3 200 in 339ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (367a9e9a-10a5-4c33-881f-2c209795614b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:15:20.085308-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (80f8166a-7c9e-4231-ad12-3b8931061306, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:15:30.091424-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
 ‚óã Compiling /api/cron/scan-content ...
 ‚úì Compiled /api/cron/scan-content in 1184ms (921 modules)
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
=== REDDIT SERVICE CONSTRUCTOR DEBUG ===
Reddit ENV vars: {
  CLIENT_ID: 'SET (rEms...)',
  CLIENT_SECRET: 'SET (HJZA...)',
  USERNAME: 'SET (Massive-Engine-1759)',
  PASSWORD: 'SET (redacted)',
  USER_AGENT: 'HotdogDiaries/1.0'
}
üîç BYPASSING test credential check for debugging
‚ö†Ô∏è WARNING: Using test credentials - these will fail Reddit API calls
Reddit API client initialized with real credentials
 GET /api/cron/scan-content 401 in 1677ms
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
 GET / 200 in 120ms
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (32393fa6-eafd-4b5e-84da-0cb5c16af3ea, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:15:40.086376-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4781429f-bab2-44e4-9da4-265d453adf43, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:15:50.087656-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a1aaa6c8-c935-4766-b699-0b8343cc26b4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:16:00.086389-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (585f45a9-0ef7-4b0b-85c2-de058800e8ea, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:16:10.08728-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5f7f41a9-77c0-4f4c-8a1a-54f6a9f58855, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:16:20.086696-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (fa3ecb7d-754c-4cc8-ac94-a21e2f672adb, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:16:30.089868-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 146,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 10,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (6a45c7c0-e971-4f9b-bc1d-218be15ba726, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:16:40.087562-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8e9e4062-0cfe-46d9-b2e0-82b1bee459b6, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:16:50.090258-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (59107c61-143c-41db-8ea7-49857bcc1655, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:17:00.088006-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (900471f6-845a-4290-9a3a-c4f62febbde7, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:17:10.089482-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (88fbb046-ad8a-4c4b-9c6f-7998c4fd8d0d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:17:20.096718-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (eda95aa7-9c73-4d06-a923-f7822f247fd2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:17:30.096385-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8d9c0fca-3748-4e04-ae36-bbbbfe0fff6c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:17:40.097708-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 28,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (3d463cf0-cbd6-4f9d-8ed7-bb2a94470b79, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:17:50.099989-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 33,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1ea202aa-6096-4f84-b739-698d786a44e3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:18:00.105168-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4d2a6ebf-74c4-421d-a9c7-c71afc6ae970, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:18:10.099963-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (46bf70c2-89a8-499d-ace4-161727dd611b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:18:20.098718-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (9cc851cf-92f0-486e-baf4-9beb67c827b4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:18:30.095873-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5eab983a-3902-46da-87f7-d65198fda47e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:18:40.097631-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c9a1643b-1b2d-484e-912e-55f364c5e587, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:18:50.098006-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (fdc31032-4514-49b7-847b-11685ec6e66e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:19:00.099554-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e27a2493-97f1-4e17-a71f-0563f28421fc, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:19:10.099805-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a0376e5a-9c17-4d10-96cd-f120f44ce64d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:19:20.099053-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c9ebc12f-722e-4fed-b14d-777078ec93d5, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:19:30.099019-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (400f36df-6af0-4c74-94a7-5192e5a40f8a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:19:40.100465-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (837753d6-85e9-4930-91b9-c65268b79fdb, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:19:50.100025-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2ce04929-e378-4542-8ccf-234dce51e7ed, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:20:00.101924-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (0ebb8105-3b9c-4bf5-8da2-862d4a519c3c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:20:10.104682-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (87f08ee0-4407-4b60-b275-4b4ca0de0112, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:20:20.103579-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c85bb280-d6f9-4fcb-8513-f544807d4aee, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:20:30.106827-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (64f8415a-65cb-4eb6-b04f-c2d3d06e88e4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:20:40.103314-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e27b5f64-2e94-486d-b0f5-0eac7de8e23d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:20:50.103251-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (31fcd7ec-0a4e-42c0-834d-dd064c88c9a3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:21:00.105821-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 147,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 3,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 17,
  rows: 3
}
 GET / 200 in 506ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 13,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '      SELECT COUNT(*) as total \n' +
    '      FROM content_queue\n' +
    "      WHERE content_status = 'posted' AND ",
  duration: 4,
  rows: 1
}
Query executed {
  text: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        content_text,\n' +
    '        content_image_url,\n' +
    '        content_video_ur',
  duration: 3,
  rows: 2
}
 GET /api/content?page=1&limit=6 200 in 53ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 359,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1ea51a15-8734-486d-9576-d78fce7c76cf, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:21:10.1029-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (330cb193-9ede-4e06-b03e-c6f693e57f2a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:21:20.108499-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b1a7b6c2-f928-4b6f-8fba-3a470bbffbf6, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:21:30.108198-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ddb20bb9-a2f0-4221-b9a8-dfd83d735cdd, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:21:40.109601-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (38f5ff72-5a44-4aa3-8b1f-f86ff6d4bb71, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:21:50.11058-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (78e6beab-3cbb-44aa-a7c9-0680523280fd, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:22:00.109606-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (64ec4032-34e6-4cd6-bec4-b2d3ecf42dc0, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:22:10.110865-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (41a15f0f-c846-4e28-a4ee-b643384bb331, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:22:20.105592-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f2b86c80-ba0f-4732-8579-50f02724b5ac, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:22:30.102735-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b05a58de-20e5-429d-a140-9cdbaaebc38d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:22:40.10971-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
 ‚óã Compiling /api/admin/login ...
 ‚úì Compiled /api/admin/login in 594ms (610 modules)
Database connection established
Database connection successful
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 6,
  rows: 1
}
API Error [/api/admin/login]: Error [HttpError]: Invalid JSON in request body
    at <unknown> (HttpError: Invalid JSON in request body)
    at createApiError (lib/api-middleware.ts:23:9)
    at validateJsonBody (lib/api-middleware.ts:125:10)
    at async loginHandler (app/api/admin/login/route.ts:32:15)
    at async POST (app/api/admin/login/route.ts:98:11)
  21 |
  22 | export function createApiError(message: string, statusCode: number = 500, code?: string): HttpError {
> 23 |   return new HttpError(message, statusCode, code)
     |         ^
  24 | }
  25 |
  26 | export async function handleApiError( {
  statusCode: 400,
  code: 'INVALID_JSON'
}
 POST /api/admin/login 400 in 1031ms
 ‚úì Compiled /api/cron/scan-content in 392ms (912 modules)
=== REDDIT SERVICE CONSTRUCTOR DEBUG ===
Reddit ENV vars: {
  CLIENT_ID: 'SET (rEms...)',
  CLIENT_SECRET: 'SET (HJZA...)',
  USERNAME: 'SET (Massive-Engine-1759)',
  PASSWORD: 'SET (redacted)',
  USER_AGENT: 'HotdogDiaries/1.0'
}
üîç BYPASSING test credential check for debugging
‚ö†Ô∏è WARNING: Using test credentials - these will fail Reddit API calls
Reddit API client initialized with real credentials
 GET /api/cron/scan-content 401 in 992ms
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 45,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 3,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 31,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (70b565de-f8f3-4f3f-b8bb-3ed23a33430e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:22:50.105079-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (79bf8006-9fcd-4957-8895-1ccbcaf6c03c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:22:50.143162-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (05bca1ab-802c-48e5-9816-7e0a8866e33c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:23:00.103655-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d0d9fa96-043e-4e2f-88cd-fc3c5d38452f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:23:10.108409-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 359,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ca9157e4-db9a-479e-95ef-62485eb5ba7c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:23:20.0988-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1a1bf5d6-42a0-4344-be59-cb2b6e7cca34, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:23:20.125113-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f343de61-162a-46ca-8889-07b6a33f44e6, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:23:20.153578-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (40a1f1cf-9017-4d03-818e-255aa548a841, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:23:30.112195-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (961a3ac3-6356-4c66-ab67-2e6c1a997d34, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:23:40.106549-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (65fbc802-f5e7-4d62-8047-fc19086b6cc1, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:23:50.094231-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8fdd5f5c-7124-450f-8400-a6d0a5c6edde, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:23:50.119878-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a4bf9fcb-df52-4cb8-b126-8197fabc3a8e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:23:50.15037-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1b945217-428f-43cd-88cf-c57122943308, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:24:00.107501-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f20a1216-58a4-41bb-b05d-f01c359d8520, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:24:10.107805-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (cec97c37-88c9-45e6-89d4-ba7ad5f6d2cc, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:24:20.097292-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a882509c-fe43-4522-a97e-3fa9d7010978, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:24:20.127591-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (7803dd2e-c7c9-459e-b928-da10884dae88, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:24:20.158306-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (abaa4eeb-5e49-4ef3-ae69-8f26d2c369b7, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:24:30.114015-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
 ‚úì Compiled /api/admin/content/queue in 225ms (609 modules)
Database connection established
Database connection successful
Query executed {
  text: 'SELECT id, username, email, full_name, is_active, created_at, last_login_at, login_count FROM admin_',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '      SELECT \n' +
    '        cq.*,\n' +
    '        ca.confidence_score,\n' +
    '        ca.is_spam,\n' +
    '        ca.is_inapprop',
  duration: 7,
  rows: 5
}
Query executed {
  text: '\n      SELECT COUNT(*) as total\n      FROM content_queue cq\n      \n    ',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
 GET /api/admin/content/queue?source_platform=pixabay&limit=5 200 in 412ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (adea1033-56cf-4bdc-85fc-a6342465501f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:24:40.112952-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
 ‚óã Compiling /api/admin/content ...
 ‚úì Compiled /api/admin/content in 531ms (612 modules)
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        content_text,\n' +
    '        content_type,\n' +
    '        source_platform,\n' +
    '    ',
  duration: 3,
  rows: 10
}
Query executed {
  text: '\n' +
    '      SELECT COUNT(*) as total\n' +
    '      FROM content_queue\n' +
    '      WHERE 1=1\n' +
    '    ',
  duration: 1,
  rows: 1
}
 GET /api/admin/content?source_platform=pixabay&limit=10 200 in 683ms
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (09ea0ad6-2fd9-4e51-ad79-05a40d9ec5d4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:24:50.095414-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (90a9d7f6-9c30-452b-86f3-0a237880b58e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:24:50.122226-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (80cd52e2-b080-470c-b899-1e527a0e9e7d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:24:50.156432-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 33,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d90d2033-8c9a-44c0-b609-f2ca7fd34ce5, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:25:00.12433-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
 ‚úì Compiled /api/admin/reddit/scan in 467ms (1158 modules)
=== REDDIT SERVICE CONSTRUCTOR DEBUG ===
Reddit ENV vars: {
  CLIENT_ID: 'SET (rEms...)',
  CLIENT_SECRET: 'SET (HJZA...)',
  USERNAME: 'SET (Massive-Engine-1759)',
  PASSWORD: 'SET (redacted)',
  USER_AGENT: 'HotdogDiaries/1.0'
}
üîç BYPASSING test credential check for debugging
‚ö†Ô∏è WARNING: Using test credentials - these will fail Reddit API calls
Reddit API client initialized with real credentials
Database connection established
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 30,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM reddit_scan_config LIMIT $1',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 30,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (05063713-696a-4469-847c-2bd188ef9770, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:25:10.115784-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (514af524-1de5-434d-a1db-4463186fcef9, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:25:20.103585-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (05dd399a-a16a-466e-8629-b01aef55b148, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:25:20.13595-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (af888ccf-b318-483c-b4a8-4ea96aa363ab, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:25:20.167041-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 28,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f3cb280d-e969-4d11-98de-3f019ffa9530, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:25:30.121353-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 6,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 29,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e23bc055-f983-4e2e-9866-1da2a9821003, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:25:40.123137-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bf7b7df0-8161-4637-b9ac-2b8b50a0102e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:25:50.103585-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (396cd668-ec83-49b5-9f72-b525edc16753, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:25:50.134829-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ceb36802-bade-4a69-92b1-8fbbb0369c5a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:25:50.165458-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: [homemade] 3 hotdogs with hash: 67ae6eb75c1efc90_ldd32q...
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 5,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 141,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 141
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 3,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 141, content_text: '[homemade] 3 hotdogs' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 3,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 7,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Hotdog from Freddy's with hash: b2a08ed1d523536f_515hvx...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 142,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 142
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 142, content_text: "Hotdog from Freddy's" }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Doing food for 60 people and am concerned I wont have enough with hash: 23d259dd1936566d_5n7lre...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 143,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 143
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 143,
  content_text: 'Doing food for 60 people and am concerned I wont h'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Are these a good color for hot dogs over charcoal? Grew up without a father so I‚Äôm trying to get great at grilling. Thanks for any feedback! with hash: 7a3a150fbd3c8b6f_y3cy9f...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 144,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 144
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 144,
  content_text: 'Are these a good color for hot dogs over charcoal?'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Mustard is the superior hot dog condiment. with hash: e9e8e8eae724b1cf_lynye5...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 145,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 145
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 145, content_text: 'Mustard is the superior hot dog condiment.' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Right now, you can get a ticket to the White Sox, a hot dog, drink, chips, cookie, and a souvenir metal water bottle for $19 with hash: 6b92f3a82fb5199d_c0kly6...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 146,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 146
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 146,
  content_text: 'Right now, you can get a ticket to the White Sox, '
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: How do you enjoy a hot dog?  Cook style, condiments, side dishes, etc? with hash: 8c7f6e57e36c6bc7_zu9fut...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 147,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 147
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 147,
  content_text: 'How do you enjoy a hot dog?  Cook style, condiment'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Cooking for a short-notice wedding ‚Ä¶help! with hash: 2c4927a7087e025c_ri9tzp...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 148,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 148
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 148,
  content_text: 'Cooking for a short-notice wedding ‚Ä¶help!\nMy daugh'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Habanero cheddar bratwurst and a liter o beer with hash: e838255fa615d2df_srsffk...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 149,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 149
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 149,
  content_text: 'Habanero cheddar bratwurst and a liter o beer'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.content_image_url) = $1 \n' +
    '       AND cq.content',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.*, ca.similarity_hash\n' +
    '       FROM content_queue cq\n' +
    '       LEFT JOIN content_analysis ca ON',
  duration: 6,
  rows: 62
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'UPDATE content_queue \n' +
    '       SET is_approved = $1, content_status = $2, updated_at = NOW() \n' +
    '       W',
  duration: 5,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
[ContentProcessor] Content processing completed {
  contentId: 149,
  action: 'approved',
  confidence: 0.8,
  isValidHotdog: true,
  duration: 19
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: My girl and I comparing wieners with hash: 8070997b3aab66f6_4zp8ib...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 150,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 150
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 150, content_text: 'My girl and I comparing wieners' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 4,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM reddit_scan_config LIMIT $1',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO reddit_scan_config (is_enabled, scan_interval, max_posts_per_scan, target_subreddits, se',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
 POST /api/admin/reddit/scan 200 in 57354ms
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (cd8234a8-0e61-499e-a830-77dc6c664294, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:26:00.115493-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  rows: 15
}
Database connection established
Query executed { text: 'SELECT 1 FROM system_logs LIMIT 1', duration: 26, rows: 1 }
Query executed {
  text: 'INSERT INTO system_logs (log_level, component, message, metadata) VALUES ($1, $2, $3, $4), ($5, $6, ',
  duration: 2,
  rows: 11
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection established
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ee962619-5850-4b2d-b31f-9e8c2d26e244, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:26:10.113914-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection removed
Database connection established
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (748556cb-fa26-4acd-a5a2-429844fbdc15, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:26:20.102807-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (85eac4f8-e191-40d6-ba6c-fea113a15306, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:26:20.134041-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5fc0443b-445b-4f2e-8835-687f8866a81f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:26:20.164687-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bd1c71a8-2f70-44f0-9ae1-83899a26917c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:26:30.111756-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (027a866f-9d73-49bc-96c7-c1e90cc0d2c3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:26:40.114616-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bb104233-ff0d-4b1b-b410-3d788ccfb0f2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:26:50.095713-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8f9356c1-a1de-4ad1-9e42-321a76de97c9, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:26:50.120093-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4ffc6353-ec16-4b50-8ddc-4eb6ebb63fa4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:26:50.145369-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (43f5fc62-f529-40c6-bdb2-680f3184b5e1, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:27:00.115127-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
 GET / 200 in 292ms
 ‚úì Compiled in 675ms (830 modules)
 GET / 200 in 234ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (dbbe3f2f-67ed-457b-9e92-9dfeca3b51e4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:27:10.123044-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
 ‚óã Compiling /api/admin/pixabay/scan ...
 ‚úì Compiled /api/admin/pixabay/scan in 680ms (717 modules)
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 31,
  rows: 1
}
üîç Starting Pixabay scan with maxPosts: 3
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 6,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 3,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: undefined,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
[ContentProcessor] Content processing failed {
  metadata: {
    contentId: undefined,
    duration: 1,
    error: "Cannot read properties of undefined (reading 'toString')"
  },
  stack: "TypeError: Cannot read properties of undefined (reading 'toString')\n" +
    '    at ContentProcessor.processContent (webpack-internal:///(rsc)/./lib/services/content-processor.ts:57:38)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async PixabayScanningService.performScan (webpack-internal:///(rsc)/./lib/services/pixabay-scanning.ts:151:54)\n' +
    '    at async POST (webpack-internal:///(rsc)/./app/api/admin/pixabay/scan/route.ts:35:24)\n' +
    '    at async AppRouteRouteModule.do (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:5:38782)\n' +
    '    at async AppRouteRouteModule.handle (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:5:45984)\n' +
    '    at async responseGenerator (webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&page=%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!:206:38)\n' +
    '    at async AppRouteRouteModule.handleResponse (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:1:183647)\n' +
    '    at async handleResponse (webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&page=%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!:268:32)\n' +
    '    at async handler (webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&page=%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!:320:13)\n' +
    '    at async doRender (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:1586:34)\n' +
    '    at async DevServer.renderToResponseWithComponentsImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:1928:13)\n' +
    '    at async DevServer.renderPageComponent (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:2394:24)\n' +
    '    at async DevServer.renderToResponseImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:2434:32)\n' +
    '    at async DevServer.pipeImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:1034:25)\n' +
    '    at async NextNodeServer.handleCatchallRenderRequest (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/next-server.js:391:17)\n' +
    '    at async DevServer.handleRequestImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:925:17)\n' +
    '    at async /Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/dev/next-dev-server.js:398:20\n' +
    '    at async Span.traceAsyncFn (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/trace/trace.js:157:20)\n' +
    '    at async DevServer.handleRequest (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/dev/next-dev-server.js:394:24)\n' +
    '    at async invokeRender (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/lib/router-server.js:239:21)\n' +
    '    at async handleRequest (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/lib/router-server.js:436:24)\n' +
    '    at async requestHandlerImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/lib/router-server.js:464:13)\n' +
    '    at async Server.requestListener (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/lib/start-server.js:218:13)',
  timestamp: '2025-08-07T01:27:11.544Z'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: undefined,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
[ContentProcessor] Content processing failed {
  metadata: {
    contentId: undefined,
    duration: 0,
    error: "Cannot read properties of undefined (reading 'toString')"
  },
  stack: "TypeError: Cannot read properties of undefined (reading 'toString')\n" +
    '    at ContentProcessor.processContent (webpack-internal:///(rsc)/./lib/services/content-processor.ts:57:38)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async PixabayScanningService.performScan (webpack-internal:///(rsc)/./lib/services/pixabay-scanning.ts:151:54)\n' +
    '    at async POST (webpack-internal:///(rsc)/./app/api/admin/pixabay/scan/route.ts:35:24)\n' +
    '    at async AppRouteRouteModule.do (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:5:38782)\n' +
    '    at async AppRouteRouteModule.handle (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:5:45984)\n' +
    '    at async responseGenerator (webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&page=%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!:206:38)\n' +
    '    at async AppRouteRouteModule.handleResponse (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:1:183647)\n' +
    '    at async handleResponse (webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&page=%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!:268:32)\n' +
    '    at async handler (webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&page=%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!:320:13)\n' +
    '    at async doRender (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:1586:34)\n' +
    '    at async DevServer.renderToResponseWithComponentsImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:1928:13)\n' +
    '    at async DevServer.renderPageComponent (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:2394:24)\n' +
    '    at async DevServer.renderToResponseImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:2434:32)\n' +
    '    at async DevServer.pipeImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:1034:25)\n' +
    '    at async NextNodeServer.handleCatchallRenderRequest (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/next-server.js:391:17)\n' +
    '    at async DevServer.handleRequestImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:925:17)\n' +
    '    at async /Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/dev/next-dev-server.js:398:20\n' +
    '    at async Span.traceAsyncFn (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/trace/trace.js:157:20)\n' +
    '    at async DevServer.handleRequest (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/dev/next-dev-server.js:394:24)\n' +
    '    at async invokeRender (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/lib/router-server.js:239:21)\n' +
    '    at async handleRequest (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/lib/router-server.js:436:24)\n' +
    '    at async requestHandlerImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/lib/router-server.js:464:13)\n' +
    '    at async Server.requestListener (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/lib/start-server.js:218:13)',
  timestamp: '2025-08-07T01:27:11.552Z'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: undefined,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
[ContentProcessor] Content processing failed {
  metadata: {
    contentId: undefined,
    duration: 1,
    error: "Cannot read properties of undefined (reading 'toString')"
  },
  stack: "TypeError: Cannot read properties of undefined (reading 'toString')\n" +
    '    at ContentProcessor.processContent (webpack-internal:///(rsc)/./lib/services/content-processor.ts:57:38)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async PixabayScanningService.performScan (webpack-internal:///(rsc)/./lib/services/pixabay-scanning.ts:151:54)\n' +
    '    at async POST (webpack-internal:///(rsc)/./app/api/admin/pixabay/scan/route.ts:35:24)\n' +
    '    at async AppRouteRouteModule.do (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:5:38782)\n' +
    '    at async AppRouteRouteModule.handle (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:5:45984)\n' +
    '    at async responseGenerator (webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&page=%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!:206:38)\n' +
    '    at async AppRouteRouteModule.handleResponse (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:1:183647)\n' +
    '    at async handleResponse (webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&page=%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!:268:32)\n' +
    '    at async handler (webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&page=%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fpixabay%2Fscan%2Froute.ts&appDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadamshaw%2FDevelopment%2Fwebsites%2Fhotdog-diaries&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!:320:13)\n' +
    '    at async doRender (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:1586:34)\n' +
    '    at async DevServer.renderToResponseWithComponentsImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:1928:13)\n' +
    '    at async DevServer.renderPageComponent (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:2394:24)\n' +
    '    at async DevServer.renderToResponseImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:2434:32)\n' +
    '    at async DevServer.pipeImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:1034:25)\n' +
    '    at async NextNodeServer.handleCatchallRenderRequest (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/next-server.js:391:17)\n' +
    '    at async DevServer.handleRequestImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/base-server.js:925:17)\n' +
    '    at async /Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/dev/next-dev-server.js:398:20\n' +
    '    at async Span.traceAsyncFn (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/trace/trace.js:157:20)\n' +
    '    at async DevServer.handleRequest (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/dev/next-dev-server.js:394:24)\n' +
    '    at async invokeRender (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/lib/router-server.js:239:21)\n' +
    '    at async handleRequest (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/lib/router-server.js:436:24)\n' +
    '    at async requestHandlerImpl (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/lib/router-server.js:464:13)\n' +
    '    at async Server.requestListener (/Users/adamshaw/Development/websites/hotdog-diaries/node_modules/next/dist/server/lib/start-server.js:218:13)',
  timestamp: '2025-08-07T01:27:11.559Z'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
‚úÖ Pixabay scan completed in 182ms: {
  totalFound: 3,
  processed: 3,
  approved: 0,
  rejected: 3,
  duplicates: 0,
  errors: []
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
 POST /api/admin/pixabay/scan 200 in 1233ms
Query executed { text: 'SELECT 1 FROM system_logs LIMIT 1', duration: 0, rows: 1 }
Query executed {
  text: 'INSERT INTO system_logs (log_level, component, message, metadata) VALUES ($1, $2, $3, $4), ($5, $6, ',
  duration: 5,
  rows: 6
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (6618faf2-f351-4779-a038-29f2cbb8a45b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:27:20.104599-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 32,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 10,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (653e690f-bf28-46bd-94e0-cea382a5153c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:27:20.151639-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a08a15d2-8282-43cc-ab9d-825d6306b548, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:27:20.192715-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 12,
  rows: 6
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (20a111a6-a7c2-4cb3-846d-83d156170945, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:27:30.122874-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
 ‚úì Compiled /api/admin/content/queue in 209ms (618 modules)
Database connection established
Database connection successful
Query executed {
  text: 'SELECT id, username, email, full_name, is_active, created_at, last_login_at, login_count FROM admin_',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '      SELECT \n' +
    '        cq.*,\n' +
    '        ca.confidence_score,\n' +
    '        ca.is_spam,\n' +
    '        ca.is_inapprop',
  duration: 7,
  rows: 5
}
Query executed {
  text: '\n      SELECT COUNT(*) as total\n      FROM content_queue cq\n      \n    ',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
 GET /api/admin/content/queue?limit=5&sort=created_at&order=desc 200 in 674ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 29,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (69304750-5eaa-4d39-a9c9-17d5ebdde8ec, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:27:40.126908-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
 ‚úì Compiled /api/admin/content in 109ms (621 modules)
Database connection established
Database connection successful
Query executed {
  text: '\n' +
    '      SELECT \n' +
    '        id,\n' +
    '        content_text,\n' +
    '        content_type,\n' +
    '        source_platform,\n' +
    '    ',
  duration: 4,
  rows: 10
}
Query executed {
  text: '\n' +
    '      SELECT COUNT(*) as total\n' +
    '      FROM content_queue\n' +
    '      WHERE 1=1\n' +
    '    ',
  duration: 0,
  rows: 1
}
 GET /api/admin/content?source_platform=pixabay&sort=created_at&order=desc&limit=10 200 in 227ms
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c3716ce4-4dc6-427f-bb51-6e00c301d9aa, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:27:50.108681-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (78c299e9-fa5c-4e92-b70a-ea0648ee516a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:27:50.146606-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 30,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2fc31112-0a8d-4e89-b4a1-8a48972b87cc, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:27:50.186751-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 30,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b89fc7d7-3ce6-47bf-ac27-af83752695ab, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:28:00.129631-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f14f47f5-5e06-4ae3-9c9f-e09fefbfcf89, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:28:10.122841-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 35,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e1f3e1f8-51eb-4165-880e-7e92581ea013, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:28:20.115025-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (721756be-8344-4f25-bec1-9229a0915189, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:28:20.149162-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (7ae96ab0-67c7-4274-9382-eb8d211d1e63, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:28:20.181838-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 3,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a4dffb8c-8827-4d06-9b4b-09c96e2e63ee, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:28:30.127653-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (81dc2a0d-3880-447c-9e4c-df22d16b42d0, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:28:40.129609-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b12e271e-fea1-440e-a3c2-7af8b02358e8, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:28:50.107644-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (740a3063-1c07-4224-8324-f60cfc6544b3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:28:50.145451-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (80ad3718-dfd8-4f54-8223-4198b383eebe, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:28:50.178973-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 38,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 348,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 6,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 14,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (6278168d-688f-49b0-9859-6d5260ec99b5, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:29:00.501915-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 3,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 3,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 3,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 31,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5b8beb5a-8a84-4749-8688-30cb00f540db, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:29:10.135893-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a60c5a4c-257e-4b35-afbb-b7f36fc40f6c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:29:20.103572-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (02443c51-4dd5-4654-b9be-a894e51f7819, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:29:20.136996-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (dea075d8-12e4-40aa-b27e-2624991b6188, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:29:20.169806-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (46c1556c-9c59-421c-b879-4cdc9a7b3be0, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:29:30.131054-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (dfb5bbfc-5a35-4fcf-83f3-bf6e59f14b84, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:29:40.130117-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bb33f9cd-5b1c-4886-ae42-795b77e2e2e5, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:29:50.10668-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d504954d-2998-4786-b63a-9e2c638fef42, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:29:50.144503-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (41fdca39-9c2b-40cd-89b5-c2abf97d89d4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:29:50.18069-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 5,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 3,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 41,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e5cbba50-ed02-49b4-b4c8-cfd84cd940f5, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:30:00.150412-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'SELECT * FROM reddit_scan_config LIMIT $1',
  duration: 11,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bd9e193a-19ec-4b03-89f4-d10c40a92d0a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:30:10.136551-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 4,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b28704b9-a494-48c7-986e-0f589a0f0e28, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:30:20.109703-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (0afb4078-b819-4787-bd7b-20157581c55f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:30:20.151798-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1264df8b-3c68-4026-9e6d-979f76c4b36b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:30:20.18369-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 5,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (91968c96-c644-40c5-93db-18bfb769fa48, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:30:30.136025-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (0b7ea19c-7518-4f6f-b9fd-ffa3f1e18588, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:30:40.139125-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (376119e6-06b2-41a0-90a3-e52fc04a88f3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:30:50.10691-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f35ab339-5305-4162-a020-02961ed2e412, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:30:50.142864-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ff6fe02d-a734-4075-9fb2-c05f95dbb298, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:30:50.17717-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: [homemade] 3 hotdogs with hash: 67ae6eb75c1efc90_vi3s5d...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 151,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 151
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 2,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 151, content_text: '[homemade] 3 hotdogs' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 4,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Hotdog from Freddy's with hash: b2a08ed1d523536f_byjlvp...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 152,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 152
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 152, content_text: "Hotdog from Freddy's" }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Doing food for 60 people and am concerned I wont have enough with hash: 23d259dd1936566d_flgive...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 153,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 153
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 153,
  content_text: 'Doing food for 60 people and am concerned I wont h'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Are these a good color for hot dogs over charcoal? Grew up without a father so I‚Äôm trying to get great at grilling. Thanks for any feedback! with hash: 7a3a150fbd3c8b6f_bf05uz...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 154,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 154
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 154,
  content_text: 'Are these a good color for hot dogs over charcoal?'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Mustard is the superior hot dog condiment. with hash: e9e8e8eae724b1cf_6v7b5l...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 155,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 155
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 155, content_text: 'Mustard is the superior hot dog condiment.' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Right now, you can get a ticket to the White Sox, a hot dog, drink, chips, cookie, and a souvenir metal water bottle for $19 with hash: 6b92f3a82fb5199d_5qp8sq...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 156,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 156
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 156,
  content_text: 'Right now, you can get a ticket to the White Sox, '
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: How do you enjoy a hot dog?  Cook style, condiments, side dishes, etc? with hash: 8c7f6e57e36c6bc7_n7wa79...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 157,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 157
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 157,
  content_text: 'How do you enjoy a hot dog?  Cook style, condiment'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Cooking for a short-notice wedding ‚Ä¶help! with hash: 2c4927a7087e025c_sgvp3j...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 158,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 158
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 158,
  content_text: 'Cooking for a short-notice wedding ‚Ä¶help!\nMy daugh'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Habanero cheddar bratwurst and a liter o beer with hash: e838255fa615d2df_6tiyxx...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 159,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 159
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 159,
  content_text: 'Habanero cheddar bratwurst and a liter o beer'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: My girl and I comparing wieners with hash: 8070997b3aab66f6_i4kwla...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 160,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 160
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 160, content_text: 'My girl and I comparing wieners' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM reddit_scan_config LIMIT $1',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO reddit_scan_config (is_enabled, scan_interval, max_posts_per_scan, target_subreddits, se',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d726fdbf-47f4-46ba-92bc-e3af4488854e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:31:00.139539-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed { text: 'SELECT 1 FROM system_logs LIMIT 1', duration: 1, rows: 1 }
Query executed {
  text: 'INSERT INTO system_logs (log_level, component, message, metadata) VALUES ($1, $2, $3, $4), ($5, $6, ',
  duration: 2,
  rows: 10
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 13
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (de474235-525c-4dc6-acc7-87d575c3e6a2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:31:10.14852-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (9fc27b04-d094-4e4b-9b19-ef0e76cf8dd8, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:31:20.11115-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (96449957-f27c-464e-ba42-2098940bb63e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:31:20.145408-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2ac971fb-ee50-49c5-af59-924a44be7ce1, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:31:20.180132-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (9c6a5dfd-7896-49d6-9b4a-78953fc68c8b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:31:30.150536-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (dc00df3a-e828-458a-a574-ac6d4a7c01fa, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:31:40.149644-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 53,
  rows: null
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 43,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8097fc6a-3311-479b-93ca-731228011c4e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:31:50.111002-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8a42b150-630c-4c5e-b2d2-979630b574f7, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:31:50.143545-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (67ea582f-f3fc-4715-88ea-2cdfbd8f81db, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:31:50.177568-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 41,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (7341e2c9-a624-4d3f-bbc4-ffd8d4a04b99, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:32:00.14427-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 28,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (fabb5f82-6b45-4b72-86b7-790d017cd5bd, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:32:10.153763-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection removed
Database connection established
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 93,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 43,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b79b8929-fb27-435f-aa36-45470e980bb9, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:32:20.179579-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ad6ef950-8244-4fd4-9d5f-a9193431b38e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:32:20.256566-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b05a8d90-8ac3-4ba8-a5fa-26a4c3402919, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:32:20.293914-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a4030305-a031-4537-ac45-92bd8da3f688, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:32:30.207466-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 3,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 8,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 359,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (88bb5789-cfc1-41bb-8e11-cfd68c56b0ce, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:32:40.2112-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 13,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 19,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d62bad52-4fb0-4e1d-8215-f950a5ea9a95, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:32:50.107721-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 12,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (cb04f6ca-e817-4a65-aeb6-c2d82bbe8583, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:32:50.141989-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ac475c31-a8ea-42bb-a85f-cbcafe1d1e7d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:32:50.183214-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 3,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 25,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f034098e-c67e-44d9-ab20-9f6fa68632e7, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:33:00.205855-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e3a2fd9b-7724-4961-a0a4-d5e08f7edc5e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:33:10.203385-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 359,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5b1cdd8b-d1a8-496f-a02f-1955074bda2a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:33:20.1109-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b997e76e-ebee-4705-a393-92d09bb9f1b6, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:33:20.148378-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (db54f62b-0728-4dd3-922a-3cc97723f6da, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:33:20.183463-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (7addeaca-d0ce-4b6c-a6a3-b02d1eae632a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:33:30.207572-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a68c89c8-ca47-4946-b39d-56b112a5e5c3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:33:40.208758-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a7130df8-4d94-41c3-941b-42f130fd2310, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:33:50.111278-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b7a087b9-6d27-4608-8a7a-e11de6687659, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:33:50.147871-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 33,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (65cf13de-a7a2-4f9e-8289-2a93919b323d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:33:50.193847-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (3651be03-b744-4ed6-98d1-f691380a8653, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:34:00.209198-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (24dc7aad-4813-4f05-879c-379a5a2ddd9f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:34:10.210233-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (49a2d763-d076-4538-8ac7-b949177ff73b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:34:20.111995-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (3ae802bd-08fe-41b4-8600-f64db132446f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:34:20.164411-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c08f215b-26ee-400b-b7c4-20bede1aac15, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:34:20.194505-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 79,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 13,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (29e45889-7707-4d58-816b-0d306b699828, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:34:30.214124-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 33,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 6,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5ae349a7-eaaa-4388-ab26-1f27d96a24c4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:34:40.226639-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 30,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (3012a97c-d4aa-4f5b-b387-17755529338f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:34:50.118419-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e0ada574-6dff-4faf-a167-119a9d7dd22b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:34:50.156503-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (29f86f53-033f-4af1-a7b0-968dbf6fa26d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:34:50.191457-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5acc4293-4d70-4494-9b5e-04e71d51eb8e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:35:00.213587-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c9a7462c-68f9-4578-bb93-170416cd6021, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:35:10.216459-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 35,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 18,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (fb661064-9191-408c-b157-3c491d7a948b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:35:20.126243-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 28,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (12195f6c-117c-49f0-9a34-cb662521ba4c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:35:20.18162-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 28,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (edf79622-a8be-4f1b-898e-4a47b958ea14, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:35:20.222726-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (86d47ad7-665c-4242-9c0f-bbbf57804033, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:35:30.220547-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (7ab28f68-5ba7-450e-96d6-4bfca1589fbf, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:35:40.218751-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b31ed22f-e5db-48df-bfb3-decaa8b76f44, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:35:50.113012-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (62bdcdef-fa9b-43b9-ac23-30986b9ff0e8, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:35:50.165816-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b2be57c3-e2a6-49f0-ac47-b9334326bdb9, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:35:50.202591-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 28,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b7947f19-ee61-4d46-81fb-f1501936b570, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:36:00.222696-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 32,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2dea6aac-8e80-4c0c-accf-1219ec0f6dd1, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:36:10.227464-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (de7d409a-9116-484c-83eb-82adcac6fad2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:36:20.115952-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bbe7927e-e6dc-48ec-9393-f8c3207bdd2d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:36:20.14985-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (dae56d30-ce77-4b7d-8a4b-48daec16a975, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:36:20.183489-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (07d7964f-d1f6-4343-9744-5bc6ceeda575, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:36:20.217923-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 67,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 6,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 13,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f9bcae9e-b5e1-41bb-8304-3f34b640bf6d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:36:30.282253-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (90282968-e104-475b-825e-b16a4d51c4b1, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:36:40.230907-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (814b26f1-6576-4f55-94c5-8a2815123413, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:36:50.112941-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1ee7de3a-d28e-4224-921a-f591a413be90, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:36:50.148565-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 60,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 19,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2b212c7e-fc3e-469f-af12-61745b347c0d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:36:50.241992-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 33,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (3192465d-97f9-48b3-87de-9236fd492a2f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:37:00.242218-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 10,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 28,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1d5cda8b-15d0-4c2c-b04e-54e5264cf7d9, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:37:10.232868-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 5,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c8239091-b300-4ad8-88c9-eaf0cff7f9eb, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:37:20.116061-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (de94c599-aebe-4f93-809c-f0751b9a5339, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:37:20.15858-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (345177a9-251a-4359-808a-3d0e13b1680c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:37:20.194683-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (84079982-4fac-4d1c-bdb9-92f24e9fab45, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:37:20.234344-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b9947023-10a6-45a7-a84d-32af18ccf60b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:37:30.23997-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (0dbe8001-7fba-48c8-aa4a-d85e067f89ad, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:37:40.236842-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 3,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (631d44fc-92b9-497b-906a-6cdd5097904a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:37:50.111803-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (0647e2de-b82b-43c4-ac40-818dbce0daa0, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:37:50.147301-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8dde5566-9dbf-4ec5-b23c-0e32466fe11e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:37:50.184199-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e9b2a531-d3b5-4c5d-aff2-4a09171bb562, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:37:50.236744-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (244e7fa0-03ea-42ec-99f5-072345c5c1ae, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:38:00.240395-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (7754aa93-d1de-4de8-b00a-41c195ac5d6d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:38:10.240569-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (7ebe3cec-e173-4793-a6c9-6005b3bac5eb, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:38:20.108977-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 3,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (3af76c66-2f62-4b18-855f-894e7b43152e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:38:20.143995-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (9359599e-0526-46d0-a1bd-bdaf54ee0a2d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:38:20.174297-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 13,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (662ccdcb-f01f-4060-bc99-6370c19c690a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:38:20.232578-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (fa437778-6531-4ec9-b46c-ac29f291314c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:38:30.24078-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bfdb67ba-4269-4c7b-8976-0ff1966d85a4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:38:40.243132-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 28,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1450833c-ee20-4188-b336-e2db7df98385, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:38:50.119328-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f8aff8bb-66ef-437d-8032-0112c7dc5319, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:38:50.15507-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (abe478d2-9e41-49d3-aa07-5b928ef4a9e2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:38:50.189034-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 30,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (052a029e-e16b-4f78-8671-d56af5a70413, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:38:50.246767-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1e4b511a-643b-4d94-8d5b-e118027f2d8f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:39:00.243641-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1cfaa989-0d3b-4b82-86d1-6e2030409456, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:39:10.236049-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bde41a90-da6b-412e-aac4-7f5b163c76b0, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:39:20.108798-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (37dcd427-b07d-475c-a8e6-e0ee56a69fb2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:39:20.142154-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bb7adc82-d8c8-409a-a2e5-b987c1403de9, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:39:20.176648-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (53a44cf0-7547-426a-8fb0-e1116ccfe339, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:39:20.236762-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (98ca4e25-dd7d-4bf2-950c-f4c751e89dc0, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:39:30.248342-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a623e0a8-4a65-4efe-8ddd-054642affe73, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:39:40.248079-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 3,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (6be20a3c-ad42-4405-ae38-b7b674f39f66, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:39:50.117328-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b9811456-c394-4158-a3b9-096e28a10464, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:39:50.151279-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d99e6d39-52c6-4b9b-815e-c14feb9c4773, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:39:50.185579-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d6429c6b-ad4d-4fd6-b115-e0b73bb47b08, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:39:50.24403-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bb6d2515-0a9d-460f-8013-82d647175317, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:40:00.246388-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (dc8445de-7aab-412a-a589-771e4c19a086, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:40:10.247839-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (10936cf9-366c-4d14-80fe-5f928a27e8c6, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:40:20.119317-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 10,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1f6c920b-bd26-479f-86bf-e09e471bbfcd, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:40:20.158573-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (0309565c-4477-45a0-adb6-ca28489de9d2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:40:20.199421-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d4e572d3-06fe-4f7e-a2df-f9f6ba800273, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:40:20.250184-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (232a2bb4-af11-429c-ab8c-b674a01c7bc2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:40:30.253762-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4919c2b2-b7c4-4322-b5ba-92b4ba837e4e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:40:40.254003-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (227fc24d-9d4e-4bf7-8688-37f5c027c3e0, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:40:50.123253-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (7c716616-390e-4deb-bdd3-fa3ef280cca8, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:40:50.156629-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (caaae4ba-613c-47af-893f-fd250aa22788, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:40:50.189677-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1d8c87d5-9000-477d-b117-6a83e93d6c34, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:40:50.253919-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 36,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (190683cf-32d9-4bf3-8acd-a7971c595f51, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:41:00.267262-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 33,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4c937c72-5ffb-43ba-acd6-06add7b85095, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:41:10.266022-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (87a49a65-6bc3-4a0d-9cb3-cb3258fedb7f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:41:20.122968-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (9fc9241b-21c2-4afc-bd24-e0f4b14ea488, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:41:20.158311-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (3493758d-1de9-4a29-a7f1-c17aef3ed486, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:41:20.192483-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (30af7bfd-e3b9-4295-8885-ad80d6f44c7e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:41:20.25551-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 4,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2c545a98-e7da-4ef6-848e-c0f6d270e2bb, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:41:30.259274-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 10,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (454fe675-b103-4c87-bffb-17ee803a1e59, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:41:40.255467-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d7790fd0-a689-466b-b10a-069cc3e75893, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:41:50.121126-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b89661db-e732-4a96-b647-5410c2b0f6ac, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:41:50.158988-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (804b9d40-4c0f-4f61-8587-47c31842b4d3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:41:50.193259-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (17279938-f94e-4ad0-8eed-5682e7c4b93e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:41:50.258691-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (915af3dd-43b6-42b9-a0e2-28171dfe0853, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:42:00.260569-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 30,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (950ddff0-04b5-4d0a-a1ca-f4c3711c21a7, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:42:10.266266-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ab497d63-3019-49ce-a5a4-3bb8970f518e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:42:20.123161-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f0f3de93-e9f0-431e-8a5b-0df4b11f51f9, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:42:20.161508-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (0a9b1d42-33f9-4c76-9e59-fa751b938bf4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:42:20.19624-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (0a22b24b-0da7-441b-ab34-90dbf2e6975b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:42:20.262355-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 33,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d33db1f1-63e1-4cdf-a922-e411736f75d7, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:42:30.271813-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (917bda24-d2be-4531-9346-0544965093db, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:42:40.260006-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8768b720-9967-43cb-9792-d47d765a4013, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:42:50.119383-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c7f8bd58-3405-4996-ab4e-ce8b598e1f98, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:42:50.148159-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a06b5b9d-d332-444b-af23-1f015690d925, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:42:50.175507-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d3618a80-6873-4541-929e-2020172e2eb3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:42:50.259062-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 19,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 33,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (9a599181-1d96-4168-9fdb-57060b83d76a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:43:00.273636-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (93d59abc-a9ce-4a24-8c1f-1272df1f0424, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:43:10.265561-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (74257235-3f7d-4fbf-ad8c-40fe7061b48e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:43:20.118593-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ce4a7c41-95e5-45d3-b2ef-98de706daa64, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:43:20.153055-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ca57ddb3-017a-4f98-970e-874ac2000fa8, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:43:20.189659-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4c9218e5-0fdc-4164-85ab-6d480e262d06, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:43:20.264195-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 30,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2b3622f2-5b47-49c0-acbf-e04676a3a8c9, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:43:30.272813-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 28,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (85ea8e43-cc49-49af-a8ab-fa324aadf4f2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:43:40.260783-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection removed
 GET / 200 in 343ms
Database connection established
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 78,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 78,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
 ‚úì Compiled in 1346ms (830 modules)
 GET / 200 in 723ms
 GET / 200 in 21ms
 GET / 200 in 21ms
 GET / 200 in 27ms
 GET / 200 in 26ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 3,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 3,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
 ‚úì Compiled in 356ms (830 modules)
 GET / 200 in 431ms
 GET / 200 in 34ms
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 20,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d10e7fda-c6b8-4146-9ffa-7b923a42e342, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:43:50.142053-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (fb755e53-3d61-4b09-b505-5f4625bda221, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:43:50.224163-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1cd136c1-b642-417a-b21a-20bb37d3f735, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:43:50.253104-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2896bae2-4d34-4adb-b5d4-94eadbc60b4c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:44:00.262531-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d20149c0-3527-4a2c-ae89-245a9845dc8b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:44:10.262419-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (69f54028-d5c5-4624-8b4d-08098507e6a9, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:44:20.117741-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (beea292e-823f-4b11-a2db-f9665b260ccb, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:44:20.145747-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (6d0ab917-b7d3-4072-9bd4-238ecd31b925, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:44:20.179088-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (96ab759a-cf22-4452-b83a-133a76947118, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:44:20.261807-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (115a2854-7ef6-49b2-88d3-d97d0c0c5a75, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:44:30.26719-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (9badcb72-097f-468c-8841-c6a912edc92a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:44:40.265052-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (7a82074c-ea56-4159-b93b-ce8cf8749ff8, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:44:50.121629-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (42e6e284-bc96-42ea-8473-f202e9e7af44, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:44:50.152679-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ffbc45b9-71cd-4bcd-b003-47190dad67b9, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:44:50.184923-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (fe9e92b1-3b22-4532-8e38-067e204b79bc, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:44:50.261833-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (92103924-3f02-4a1d-9d3c-507e3d45582e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:45:00.271305-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
 ‚úì Compiled in 308ms (653 modules)
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (3f6b95d3-cd1d-48d5-8f7a-ed8cb4a5f53b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:45:10.265053-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
 ‚úì Compiled in 117ms (653 modules)
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d1b1afb9-dfb0-4856-acab-5cbe50ce9269, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:45:20.118506-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2a3e9de2-a3ae-41e0-92fd-485fa9608b0c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:45:20.144614-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (fb37af81-c70c-4329-bf80-dbab6fa74906, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:45:20.171295-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (38696b74-3c68-42f6-aba8-283d7d037d44, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:45:20.264823-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (6352e702-04f5-4318-a7fc-a259b590a82d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:45:30.266407-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ba4557e4-23fc-4c91-8ff1-333edb65ce6d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:45:40.270967-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (6b0b4544-4fc1-4a47-87e8-133fad6facf1, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:45:50.119229-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (fa09a6bc-b320-4627-a492-0a894b3ba6c3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:45:50.146042-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ea8b7edc-1944-4bd4-af89-e6135d5f6b65, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:45:50.175443-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (3be1e73d-ab75-425b-b851-0c8027692486, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:45:50.26584-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e6607707-0a01-48bc-93b8-15eacddefccd, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:46:00.267703-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (db7fcd04-f4fa-45be-8101-ff4dce3f307e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:46:10.268384-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (86371ed7-d3db-4b08-8880-9597c0da6cf6, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:46:20.122608-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 359,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1ac72f75-9e63-4946-871c-0b6cacbcdf44, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:46:20.1514-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (99974e48-8009-4f3b-89d5-f5aa17dd1e64, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:46:20.18804-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5a183c6d-4e31-4a9e-87cf-aa2214c76286, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:46:20.270093-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (6207a483-75dd-4c45-b561-e386ff0031f8, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:46:30.269976-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (54c82301-b5a4-49a0-b8a7-ba84c6069389, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:46:40.27192-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (739dfb4b-8494-457f-ad1a-be8232be8fb0, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:46:50.121024-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (23cbc753-e00b-48e7-8ee9-e9296e1d9bf6, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:46:50.15559-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (05b3514e-9036-47dc-9859-36b56e167f98, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:46:50.188972-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f988a38b-a1d1-4a01-ad24-b7443ff85845, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:46:50.272076-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (afdb58af-86ce-469e-8448-a1603bd54500, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:47:00.274201-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e84dcddc-72cc-45da-adf1-78af2d747149, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:47:10.273229-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 40,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ded7da41-4a0a-4a9e-afac-911e595c8185, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:47:20.14457-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (69c308b4-8feb-4576-960e-35106ba39c07, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:47:20.182655-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 359,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (385970ec-ea41-46a6-8751-8db70fb3c16e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:47:20.2171-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b13ff1d8-8e76-42c0-bcac-39fef5739185, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:47:20.27236-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (682e8cff-1a41-4d5b-92ba-41c5dcc0c324, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:47:30.277872-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2e03d0f1-1547-4ddd-8bb7-7f60727e4ee3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:47:40.284281-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ccce5e80-541b-4770-8a20-2736a1cebc83, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:47:50.126451-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (9c19ccc2-9bf8-4667-84bc-d2b45fc66a83, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:47:50.153641-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bc7f812f-f235-40aa-bebb-2f3d3b710c23, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:47:50.185071-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f4326026-6453-4ae3-bca7-75d52c2803f1, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:47:50.278889-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (81117f33-fff0-4ec8-9e98-d83e3e9b3a43, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:48:00.283564-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (3666c675-672f-4791-ac6b-d96df9182bf7, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:48:10.283371-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection removed
Database connection established
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 9,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 35,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (111e24b9-9336-4492-bc37-cadee0214d89, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:48:20.142646-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5cdd8d58-e741-46e0-8664-d7f02c5d05a4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:48:20.179049-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (94b95bb6-dcf2-4926-a0b7-c2997190e9eb, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:48:20.214193-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (59e818f6-bb04-4bc7-b4c6-bdbad65b0369, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:48:20.288431-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2e2083f7-5422-44e1-b8d6-6659fdfca95a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:48:30.283334-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 511,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c258a7d4-8cd7-45e6-83bb-cd1e1155fc7f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:48:40.777302-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 12,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 11,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (46d9b2f1-153b-45cf-977a-60ec9a33271a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:48:50.126248-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (675eb1aa-f00a-4365-8b71-73dd0d24700c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:48:50.156281-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4bbc6e37-15ef-4391-bf56-f5db5256b3ee, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:48:50.190463-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8ac03127-64b3-4f5c-aa45-6b556b4b0c8a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:48:50.286953-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (9a428e7b-4110-4eba-9ef8-cd22193d87b7, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:49:00.283765-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8fba3b00-18c3-43b9-a389-393162170a6b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:49:10.283738-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a7ade5b3-f153-4b6d-8ffa-e4d6707398f5, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:49:20.12635-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (022e0429-bfd4-47c7-93f0-7f9f2d732c0e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:49:20.154588-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (19b492d4-0205-4081-a214-79cd52b8fe16, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:49:20.188049-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a9bc107c-2fca-488d-aa05-de3d508259d4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:49:20.282464-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b4f53b8c-0249-4501-89c5-1d17a9677e8a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:49:30.283253-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (87cba4fe-5028-42f3-9b6b-4df6081b5e00, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:49:40.284451-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection removed
Database connection established
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5d384386-d298-41c2-8561-58a091379237, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:49:50.128738-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d8124f60-bd8a-43ad-ae7f-828f6c6ebbbf, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:49:50.157455-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (33ffeb07-f9ee-47b0-b74c-092887cf8bc1, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:49:50.188397-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8e564a35-c650-4205-987a-b73b3a0134a8, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:49:50.286775-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (065485a9-24e5-446b-b0a6-4b835347f2af, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:50:00.284953-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8d5c4057-6619-4a78-ba37-2ee7eda7cfea, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:50:10.289059-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f576c566-0320-46d4-a9aa-7bcf4ffbd9a9, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:50:20.129411-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f9f41f23-dff3-4c33-bc71-3c565aa5aa8b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:50:20.159013-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a3b61a13-a1f7-4c14-83c5-67171eade829, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:50:20.191972-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (6c63c2f5-166b-444b-9936-5abd2bde6a57, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:50:20.287342-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (32cb4d4b-5784-4cc3-8eac-50416b60a8a0, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:50:30.296081-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (020faffc-ae42-4c6b-989d-011d7f66835f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:50:40.291406-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b01dda1d-dbd9-4d7d-a0ad-bc6fd6afde5c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:50:50.135658-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b1f18be9-5935-460b-a984-98757839a9cf, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:50:50.170109-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (aa2f46bf-a82c-43f2-bbd0-fa3f46da6634, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:50:50.200182-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (59a37c49-d36f-4e64-b040-f8bd67798dcf, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:50:50.293419-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b0ebd046-21dc-4e4b-b3ef-44fb4ee92bc3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:51:00.293887-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (7c9d6b92-bf9e-46b4-9ac7-9d0c7db28c6c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:51:10.295884-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection removed
Database connection established
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (7a8cdc7f-2973-4f86-bcfa-58c913cb78f2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:51:20.133938-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (9043a72d-c593-4918-971b-92d254f8500a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:51:20.162886-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a7bd37a9-e25d-4bb2-96eb-f9f3c1a5ed65, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:51:20.194931-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (341e4f5f-797d-438d-bac0-add10a419537, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:51:20.296053-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
 GET / 200 in 345ms
 ‚úì Compiled in 583ms (830 modules)
 GET / 200 in 122ms
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a5034a79-30a1-4a1e-85dc-bc986702bec2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:51:30.305391-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (08d2b08f-88a9-4d85-ad53-50c7d0c10208, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:51:40.302868-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (11689f3a-b310-4e90-8ad1-919f4d28f640, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:51:50.133493-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5d8d9fad-03dd-4dcb-bf5f-62721d017652, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:51:50.166214-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (cfbcbc84-95b1-449d-a61f-ab7423c733d0, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:51:50.195513-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (238203d9-9cbe-451d-aaac-1d7fe153da3f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:51:50.302536-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e4c4b58f-240a-4a38-9dca-a0c89284f002, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:52:00.308596-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
 ‚úì Compiled in 204ms (830 modules)
 GET / 200 in 240ms
 GET / 200 in 23ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d82eeb46-5cfd-4cf8-8e94-3ddcc7fd40fb, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:52:10.304309-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ef420edb-4932-4bf0-aaa3-0d72e709ca70, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:52:20.136104-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4e7590cb-21bb-4a9f-b018-2cdbf3ea1fc0, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:52:20.164682-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f02d9394-f875-48e2-aca1-a50004aee896, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:52:20.194851-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (41dafd11-9fb3-45fa-a9d7-cf8cf1d9a05c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:52:20.30569-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
 ‚úì Compiled in 308ms (830 modules)
 GET / 200 in 344ms
 GET / 200 in 22ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d347e706-3e89-4f9c-8dab-fc2e76620f7b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:52:30.308508-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b45bdb56-9831-4fb1-92ad-4022cd717137, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:52:40.307769-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a79783f6-01e6-48a4-be1c-177432554435, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:52:50.139385-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (6c6b5016-eacf-466a-9390-9986bc100f85, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:52:50.173341-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (dadde26e-b512-4f47-a05d-7d60d8c1cc59, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:52:50.209277-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d59871e5-7c99-4190-82e2-60b03b186466, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:52:50.313437-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (98d0e892-b29b-41d8-858b-a05c065678dd, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:53:00.313464-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2ad79428-3461-4f2d-8bbf-0a9c7e2b6c4b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:53:10.317017-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 4,
  rows: null
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e6a10722-209b-498c-9a56-f87ee8c02c4c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:53:20.141111-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (025bdd9b-503a-4cfe-9751-cea24cde4805, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:53:20.188536-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b37be4a5-f5e0-46f0-9433-96229df6205b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:53:20.23015-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2b2092ac-b3c7-494b-ab88-983e1e234934, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:53:20.319895-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
 ‚úì Compiled in 227ms (830 modules)
 GET / 200 in 298ms
 GET / 200 in 25ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f178254b-d485-48c3-9b7b-885f2a430ce7, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:53:30.315742-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (584e8c9f-a438-42f9-8038-522dc3bf99ee, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:53:40.318738-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 3,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (3f1acb6a-baa8-4277-aa37-a7987f8b4b30, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:53:50.135763-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4ac34334-fd76-431e-83c8-af49ef2b2dbe, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:53:50.162945-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (22ae968d-619d-4f65-b524-db28122d2445, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:53:50.196373-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5b9d48d6-dc0a-49a7-9907-826543426509, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:53:50.320618-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f1dab0e5-bdc9-41fa-a6e9-1db56917c990, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:54:00.317968-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (0b972c9b-2444-4d99-91f5-9211d26aeb38, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:54:10.321704-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f705a31f-006d-4793-bbb3-d357faeb9659, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:54:20.138183-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1dc0b800-d9eb-4e6d-be30-5a38ecfdd244, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:54:20.173732-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e75ddfa2-9669-415c-971d-61b1a2c131b4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:54:20.208811-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ba447ad0-d0f1-40cc-ae5f-c6abe0708470, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:54:20.322417-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e0b24382-ffce-4edb-a506-f845234e5f98, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:54:30.320852-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (574f2a8d-4b62-4752-83d3-414ed3803544, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:54:40.322414-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (fcd17c4a-cead-44f7-90e6-cce55212f7c1, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:54:50.199802-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b253d63e-5ffb-4227-9f40-b1426bd97fa2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:54:50.235749-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (fe2d0d33-53fe-4645-8508-25f4f62f9eae, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:54:50.271502-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c3fef702-ab1f-4058-89c5-ac30b41499cc, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:54:50.386725-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 358,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (de1201de-de13-4de2-9aaa-6cdd5db5c571, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:55:00.382-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e4aad9af-f463-4add-a115-423d35b97ebb, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:55:10.382544-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (87b24ca5-f067-480e-ba1d-d8f16c22be26, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:55:20.195875-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (3cdd87b7-aec1-41e2-95e6-e691ff04866f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:55:20.22345-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (9ad6843f-5d57-46b1-9b6e-a025c7c621d6, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:55:20.255555-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 16,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e8592d6c-74b9-4cbc-a7a8-95dbba65ae4b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:55:20.383155-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (9de39a89-5213-47f3-b0e7-40ef91d7b07c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:55:30.391927-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4352ab65-6530-4eb5-824c-de03b7652113, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:55:40.391359-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection removed
Database connection established
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (42dad275-a676-4834-8bfd-868db74ffc40, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:55:50.198529-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f93725ea-b07d-484e-9aeb-a53dece745b8, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:55:50.227344-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (79813e85-0fcc-4648-a616-cc4eae2a5327, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:55:50.258419-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (cc54834e-abcd-4384-964a-7042235f08b4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:55:50.390414-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1ec21cc8-ae95-4aef-8aa4-fbe2bad96f5b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:56:00.399862-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
 ‚úì Compiled in 210ms (830 modules)
 GET / 200 in 292ms
 GET / 200 in 28ms
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1cda6122-e587-4bb8-a78f-aad95042028e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:56:10.397427-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4e8cd4ca-d237-492d-a7ed-86b68ec76a59, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:56:20.200986-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (3bb95765-3359-408b-bad6-f793d139910f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:56:20.231764-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (75284441-92ca-48d2-a98e-246a9b173402, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:56:20.259515-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e2270f1d-bf27-4bd7-bc74-06e09dfee831, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:56:20.393887-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1281,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (3ce98837-146d-4dae-9f33-063db8812fbb, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:56:31.684357-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 10,
  rows: 3
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c543736e-c6a3-41ac-b762-5c6a53a7bc75, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:56:40.396534-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (742842da-18b3-484c-885f-a028f2f2bf65, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:56:50.201654-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (54015497-affe-412d-a2ac-48b7ffa2ac57, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:56:50.229896-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c7813113-8428-4fec-ab23-9bad0e60ca72, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:56:50.261587-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bf13a768-6c26-4759-a28c-d3d169b2ef45, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:56:50.398332-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (68cae42a-c2d5-49e3-95a3-9f847210e57b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:57:00.398371-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (3603cd79-30ac-4bd7-afd2-f9c7caa6bb74, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:57:10.403231-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bb023d7a-1edd-40ad-a5e0-2e42a66f5de8, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:57:20.201944-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ea7cb40b-6d38-4393-a819-702e4810cb5b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:57:20.233861-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bea12d7c-d9f8-48fe-aa9f-17aca06638c3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:57:20.26992-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bf578d7b-aef2-4071-bde5-a22135fe72f9, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:57:20.405306-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (498a0478-a5bc-47c9-bb5b-8d8e53b5723b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:57:30.404177-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (68188197-41a8-4963-bc85-261aba910691, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:57:40.40896-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection removed
Database connection established
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (7fd9dc84-a43b-4620-a3fd-6a9819c8915a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:57:50.202533-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b5ab0434-feaf-46b2-8c8c-6652a0b86ee1, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:57:50.230526-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a3006b37-1dac-4b8d-867c-db16bce1518f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:57:50.262466-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (acacaab5-f92e-4e90-8781-f9e17ec70fe6, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:57:50.406111-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 67,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (96ddaa2f-fdc8-49de-b1e7-b805d9993f7d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:58:00.408962-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (24988fb8-00a0-476e-98e7-44a524f6de60, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:58:10.409744-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4a9b8d62-482a-4799-af49-26485456a9ba, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:58:20.204737-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bc28f5f2-91ba-4c57-a2fd-275220e813be, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:58:20.236647-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (50d70a48-5463-4fd0-8af7-32ca4e0556e4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:58:20.271372-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c98ed296-0012-4da3-98c7-76cc1d99d049, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:58:20.408736-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (fab39481-ad23-4b83-aefc-954c2ec1e16a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:58:30.411565-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c1d11199-4e27-42a0-a1c7-98cd4381c8e3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:58:40.421428-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ac78e3c4-637e-4efa-83eb-0ae469870489, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:58:50.213282-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5ab615e8-4d04-469f-bdb0-5ee8dd98ac5a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:58:50.24812-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8c31a9f8-4365-4b6f-866e-2828e1613873, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:58:50.285548-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bcb4f49f-3ea3-4913-a86c-9bb52e942ce3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:58:50.421816-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c3703d9a-b330-4d63-addb-b9449964e716, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:59:00.422082-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4d98ff4d-2de4-4623-87fd-6828ed1cf43c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:59:10.425994-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e42834fe-c95e-43ef-b0b0-f8263568ada4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:59:20.213633-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1b151360-9be6-4fde-bd9a-57c90be7544a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:59:20.251313-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (427e2aac-edd0-402b-8824-9dda925fcd6d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:59:20.287437-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a978e270-47be-44a5-a4ed-b6028c94a5eb, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:59:20.428434-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a0d5de32-2124-4daa-a684-d9d9fb209ed5, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:59:30.427384-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 36,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 10,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (06529ca1-6016-41a9-9d14-698a70ad77f8, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:59:40.440769-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8cb8f1cd-f7c9-4816-a5b8-14c9ec72c052, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:59:50.216353-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (195f1a16-e70b-46a5-8974-1651bcc8629e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:59:50.252975-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c100cb46-ed41-473b-82bd-68ccdaf0fa1c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:59:50.28826-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (045aa599-7c08-4855-a09f-8e0ca1759a6f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 21:59:50.42965-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (473c8c0e-5f92-463d-8164-1d7cb7c2e3af, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:00:00.430243-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'SELECT * FROM reddit_scan_config LIMIT $1',
  duration: 6,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 10,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ab7e32d0-8fe9-4100-8b37-dca7ce842c1d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:00:10.430861-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8705c860-1f37-4345-a484-71f8c4b73f55, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:00:20.216268-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (50da6a08-6015-4a01-93bd-d02a0c2defe2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:00:20.255242-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4b348a6e-13c6-436b-9cf7-eac2bee31b4b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:00:20.293093-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (42e1f1a9-318f-4227-be54-a53e2e170a89, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:00:20.431529-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (111e4962-684e-42b6-a23f-0847ea763a6d, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:00:30.432917-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (dabf9538-39e8-4649-b5ab-2940ad85b1af, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:00:40.434929-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 3,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bac21a1f-2709-4803-960d-25fdd9cb1a34, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:00:50.215636-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4652dbbe-51de-4d19-9e45-318b29235566, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:00:50.251908-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2aab275c-49a9-4103-8ede-ae0e1bceed74, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:00:50.28885-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (84d1397e-dcfa-4ffc-be45-0e1c63c3f83e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:00:50.430369-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 2,
  rows: 1
}
Processing post: [homemade] 3 hotdogs with hash: 67ae6eb75c1efc90_n25puo...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 4,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 161,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 161
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 3,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 161, content_text: '[homemade] 3 hotdogs' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 6,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Hotdog from Freddy's with hash: b2a08ed1d523536f_m4jbp5...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 162,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 162
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 162, content_text: "Hotdog from Freddy's" }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Doing food for 60 people and am concerned I wont have enough with hash: 23d259dd1936566d_g2dpam...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 163,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 163
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 163,
  content_text: 'Doing food for 60 people and am concerned I wont h'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Are these a good color for hot dogs over charcoal? Grew up without a father so I‚Äôm trying to get great at grilling. Thanks for any feedback! with hash: 7a3a150fbd3c8b6f_ikhsn2...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 164,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 164
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 164,
  content_text: 'Are these a good color for hot dogs over charcoal?'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Mustard is the superior hot dog condiment. with hash: e9e8e8eae724b1cf_vv1xhw...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 165,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 165
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 165, content_text: 'Mustard is the superior hot dog condiment.' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Right now, you can get a ticket to the White Sox, a hot dog, drink, chips, cookie, and a souvenir metal water bottle for $19 with hash: 6b92f3a82fb5199d_zo5j7d...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 166,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 166
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 166,
  content_text: 'Right now, you can get a ticket to the White Sox, '
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: How do you enjoy a hot dog?  Cook style, condiments, side dishes, etc? with hash: 8c7f6e57e36c6bc7_54adfb...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 167,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 167
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 167,
  content_text: 'How do you enjoy a hot dog?  Cook style, condiment'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: Cooking for a short-notice wedding ‚Ä¶help! with hash: 2c4927a7087e025c_y1sutm...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 168,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 168
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 1,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 168,
  content_text: 'Cooking for a short-notice wedding ‚Ä¶help!\nMy daugh'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 1,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Processing post: Habanero cheddar bratwurst and a liter o beer with hash: e838255fa615d2df_czo9bi...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 169,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 169
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: {
  id: 169,
  content_text: 'Habanero cheddar bratwurst and a liter o beer'
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Processing post: My girl and I comparing wieners with hash: 8070997b3aab66f6_b42nz4...
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_queue (content_text, content_image_url, content_video_url, content_type, source_',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
[ContentProcessor] Starting content processing {
  contentId: 170,
  config: {
    autoApprovalThreshold: 0.6,
    autoRejectionThreshold: 0.2,
    requireManualReview: false,
    enableDuplicateDetection: true,
    enableSpamFilter: true,
    enableInappropriateFilter: true,
    enableUnrelatedFilter: true,
    enableRequiredTermsCheck: true
  }
}
ContentProcessor: Getting content by ID 170
Query executed {
  text: 'SELECT * FROM content_queue WHERE id = $1',
  duration: 0,
  rows: 1
}
ContentProcessor: Query result - found 1 rows
ContentProcessor: Found content: { id: 170, content_text: 'My girl and I comparing wieners' }
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE cq.content_hash = $1 \n' +
    '       AND ($2::INTEGER IS NULL',
  duration: 0,
  rows: 0
}
Query executed {
  text: 'SELECT cq.* FROM content_queue cq\n' +
    '       WHERE MD5(cq.original_url) = $1 \n' +
    '       AND ($2::INTEGER IS',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO content_analysis (\n' +
    '        content_queue_id, is_spam, is_inappropriate, is_unrelated, is',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'SELECT * FROM reddit_scan_config LIMIT $1',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO reddit_scan_config (is_enabled, scan_interval, max_posts_per_scan, target_subreddits, se',
  duration: 2,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 0,
  rows: 1
}
Query executed {
  text: 'INSERT INTO system_logs (log_level, message, component, metadata, created_at)\n' +
    '       VALUES ($1, $2,',
  duration: 1,
  rows: 1
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 29,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (649666b8-1d3c-4a48-be19-3a0b1327d305, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:01:00.438278-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed { text: 'SELECT 1 FROM system_logs LIMIT 1', duration: 3, rows: 1 }
Query executed {
  text: 'INSERT INTO system_logs (log_level, component, message, metadata) VALUES ($1, $2, $3, $4), ($5, $6, ',
  duration: 2,
  rows: 10
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 13
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 31,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b9d5e2bc-b2ef-49a1-b796-14a0ba498257, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:01:10.441275-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5ba9c13a-f5b4-40ae-bf71-43309d77cf42, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:01:20.220533-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4075655d-bc4b-44b1-8670-ee2ef64142d1, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:01:20.25831-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (576c54cc-3d2a-4fb5-ae72-1ae5f1c92e68, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:01:20.297382-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8eabc35c-6b27-44cc-a4c3-1986a3b28e16, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:01:20.43375-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1e86f00a-1c6d-4967-9282-f1d90310016f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:01:30.43617-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a6cc4cbb-5185-468c-bc72-43ea7c01dca8, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:01:40.433304-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a141fbb8-3bcd-478b-9233-1866d7bafe53, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:01:50.219176-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (79337885-39e8-401c-a9fa-97163f4e12f3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:01:50.255312-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (fc438f02-3cbd-430b-8866-b5ad1608630f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:01:50.293163-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (90e60bd3-de2b-4f94-bf84-e9552d765a24, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:01:50.438536-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 289,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4d2d9529-db0d-4fd5-a6b1-0b7d3b09922c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:02:00.703282-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8b5da850-dec4-4ff6-8c3e-9314dafcaafb, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:02:10.433666-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 3,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d13e96d3-78d9-4b61-b7d8-fe0847dc8da4, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:02:20.212652-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (0e944170-8a8b-4709-b04d-39e1a680db8a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:02:20.250756-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (639c00d8-ff23-4050-97e0-0cb1e894b177, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:02:20.289706-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 46,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 11,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (61dfe326-cc2b-49dc-b94b-77f5be73e098, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:02:20.461556-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (997a6bde-d292-45db-859c-d40a83628cb9, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:02:30.43872-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (07f1d6f6-6a0b-4b88-bd2f-7c3e83204bff, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:02:40.432481-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (13526d27-8b88-4841-bc6f-e013e1329ff9, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:02:50.213586-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d7c5ebc6-be02-4380-a7be-5b2679cf353c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:02:50.243228-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (6efa5511-42c7-4383-84b8-207be8c5715a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:02:50.279137-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4fd26f1b-3b18-4194-bb10-eeaf3b4dcee3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:02:50.435562-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e204fa27-c6e9-45ac-9de8-66a46fd9d004, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:03:00.44362-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (aaf25018-f439-4a01-8204-4f39e88ce6b6, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:03:10.432835-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (eb6edffd-41c9-4b42-8696-6d2c494a7e37, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:03:20.223571-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (817ce54f-cb22-4701-9264-b12d0b61aec2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:03:20.262307-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (e5755fc5-6fa5-4aea-bc6f-7f8f9bfe3b4b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:03:20.299329-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (dbeb7d67-5de7-4f77-9fe1-a494bf2aa4e3, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:03:20.432246-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d3e380ab-caf4-44cf-8cdb-a7446e92eb23, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:03:30.436814-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ba54b265-b238-44e2-bb8e-d1552240cd37, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:03:40.433936-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2fef1745-eff9-436a-83e0-9c9bb0847b52, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:03:50.224757-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b2be62ee-8fe6-4f21-87b9-54d75525920f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:03:50.261576-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5f1c8795-93bb-483e-9d82-e85d7f119e6b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:03:50.299453-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (b674d788-29ca-479e-b2aa-ad37c5f68266, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:03:50.439466-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (43e58512-31e1-4411-9dc9-f6130d17d7cd, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:04:00.439821-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (79a3d257-7877-4690-8ecd-305b33dd5eda, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:04:10.435677-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection removed
Database connection established
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 35,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f2b880d2-92c4-4f45-a017-46401ab70126, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:04:20.235574-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (9599599f-6070-4270-96ff-1a415cc9fc39, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:04:20.274527-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d2b750ac-7bfc-4075-993c-68decef702cc, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:04:20.311999-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ccb4f0f4-60fa-483b-9010-6b8324a1eb82, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:04:20.444906-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 31,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 10,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (819080fa-eb06-4652-8126-1902863e9656, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:04:30.451303-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 11,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (786b1e1e-16cc-40f1-90ea-cd1f2219e711, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:04:40.446429-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 34,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 10,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (19db04ee-8e14-4941-b9b8-59c0ea93258b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:04:50.23588-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (066e28d9-91ad-4025-8380-a077587424d9, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:04:50.273142-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f565a5e1-dde1-4505-8411-e15309ea1f18, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:04:50.310504-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (85b9a94b-3820-4f36-bd57-3608fec55458, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:04:50.447107-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 10,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (088736e2-8f2c-41a3-b261-b049d226a14e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:05:00.451055-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f355b076-7856-4ef0-a740-1db1b7055196, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:05:10.442691-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (41ca481c-095b-4898-83a5-09f79b4d312f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:05:20.219846-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (7ab2c9ce-a356-4a75-bd05-b996a27fcaf7, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:05:20.249931-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8f829f3d-972f-4d89-9774-1120d1f1dfb1, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:05:20.282344-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (d83469d8-9950-44de-baf8-4d13b23d08ff, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:05:20.443423-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (6ddee274-bde4-499d-882f-8a515c14896a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:05:30.448781-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5743cf0d-2156-4cd1-bebd-2218e91df53e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:05:40.448199-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 572,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (0bfae449-602b-4765-b3b3-44a58d10431b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:05:50.223388-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 23,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (38e4ca4f-4baf-44b8-8144-ca955eec5fb9, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:05:50.258487-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 10,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a752ec35-fc42-48c6-8c8e-fc4422a78348, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:05:50.299654-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (deeaa473-bfaf-4eb8-a80c-c0e95e37c837, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:05:50.44313-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4abd387e-11a7-4ecc-be0a-f24a373e01ab, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:06:00.447805-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (a4fe0517-24f6-4b48-9e4e-0dbbb29b57df, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:06:10.451522-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
 ‚úì Compiled in 433ms (830 modules)
 ‚®Ø [Error: ENOENT: no such file or directory, open '/Users/adamshaw/Development/websites/hotdog-diaries/.next/server/app/page.js'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/Users/adamshaw/Development/websites/hotdog-diaries/.next/server/app/page.js',
  page: '/'
}
 ‚óã Compiling /_error ...
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 3,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 3,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 4,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 5,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
 ‚úì Compiled /_error in 3.2s (980 modules)
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 35,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 14,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (c37aeb5c-c11a-4f10-9fb3-2026443dc445, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:06:20.240099-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 34,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 216,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (f588f72f-7b96-43a8-a231-a27c31c61958, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:06:20.296653-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
 GET / 500 in 4429ms
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 161,
  rows: null
}
 GET / 200 in 154ms
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 10,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8fe7e89f-c806-493e-877e-305dbe1754eb, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:06:20.680521-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
 GET / 200 in 22ms
 GET / 200 in 22ms
 GET / 200 in 270ms
 ‚óã Compiling /_not-found ...
 ‚úì Compiled /_not-found in 771ms (985 modules)
 GET /_next/static/css/app/layout.css?v=1754532380829 404 in 1220ms
 GET /_next/static/chunks/app-pages-internals.js 404 in 1205ms
 GET /_next/static/chunks/app/error.js 404 in 672ms
 GET /_next/static/chunks/app/page.js 404 in 58ms
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 27,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (8c516e57-1c2f-4f1a-94e0-07ada1938ac2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:06:30.540869-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 26,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (49612674-46b0-4142-a10a-f65dfb60c86e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:06:40.538891-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 18,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 6,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (fb9178b5-f0c3-428f-88e1-a4754f749815, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:06:50.222182-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (43b228eb-769e-4e09-87e8-2f9a1ae5caf6, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:06:50.258298-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (0c53abe1-715c-4566-bba0-e36bda6af6f5, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:06:50.302589-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (4213d6c3-33cc-4bd1-8016-6fb7a00db814, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:06:50.540571-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 0,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (fd6472c5-bd5d-41d8-9205-e9f4b89f085a, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:07:00.541896-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ea8c791e-4323-4e3d-9ab5-6eaa8e32dc47, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:07:10.539046-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (6d3d66e6-f1dc-436a-be12-58cf968d1ae2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:07:20.224696-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5389b4a9-6df9-4665-a6ae-d3910bdefcc2, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:07:20.259756-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (05270ddc-7dc4-4819-9d36-6bca52cc0c36, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:07:20.295687-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 17,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 2,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ea8472b1-abdc-4346-9442-d9f6505e85c0, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:07:20.541515-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 19,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (9c150aa5-3691-415d-bc59-4d060360885c, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:07:30.545022-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 20,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 7,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (7f612e5c-bca2-4e19-8ccc-8a0464163a9f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:07:40.544327-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection removed
Database connection removed
Database connection established
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (7df2b300-f0fd-4f18-8d89-5b8db653294e, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:07:50.23151-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2f46ad49-5d8a-4bea-b739-398120124417, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:07:50.268036-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (ae5c070e-7816-4d3e-bcd2-e1185da0cbc0, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:07:50.304143-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2ed5c566-db87-451a-a034-381ef0326966, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:07:50.550451-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 0,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 24,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 10,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (0fb03008-35b3-44d7-b904-0b6cd0b0dc5b, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:08:00.551477-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 4,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 3,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (49b7c021-37ce-4cb6-ad66-a88be2d7a0c0, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:08:10.552325-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 0,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 5,
  rows: 3
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 1,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 1,
  rows: 3
}
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 28,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 8,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:241:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1a0dd39a-b084-456f-8db5-42d5bbe4a0dd, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:08:20.235351-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 22,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:257:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (bb8a1797-9d60-4380-a27c-c1f2e15ca9de, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:08:20.272203-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 21,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 9,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async MetricsService.addToBuffer (lib/services/metrics.ts:713:6)
    at async MetricsService.recordSystemMetrics (lib/services/metrics.ts:272:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:759:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 361,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (5e568053-5541-424d-a43e-50c0a7b8311f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:08:20.309017-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Database connection established
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 25,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query error {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 10,
  error: 'null value in column "value" of relation "system_metrics" violates not-null constraint',
  code: '23502'
}
Failed to flush metrics buffer: error: null value in column "value" of relation "system_metrics" violates not-null constraint
    at async DatabaseConnection.query (lib/db.ts:117:23)
    at async InsertBuilder.execute (lib/db-query-builder.ts:308:11)
    at async MetricsService.flushBuffer (lib/services/metrics.ts:729:6)
    at async Timeout.eval [as _onTimeout] (lib/services/metrics.ts:754:6)
  115 |     while (retries > 0) {
  116 |       try {
> 117 |         const result = await this.pool!.query<T>(text, params)
      |                       ^
  118 |         const duration = Date.now() - start
  119 |         
  120 |         // Only log in development {
  length: 360,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (be9eeae4-cba1-4780-9fe7-7d7f8d56617f, batch_processing_started, null, count, 2025-08-06 21:14:50.082-04, {}, {}, development, 2025-08-06 22:08:20.55238-04).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'system_metrics',
  column: 'value',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '1889',
  routine: 'ExecConstraints'
}
Database connection removed
Query executed {
  text: '\n' +
    '        CREATE TABLE IF NOT EXISTS system_metrics (\n' +
    '          id UUID PRIMARY KEY DEFAULT gen_rando',
  duration: 2,
  rows: null
}
Query executed {
  text: '\n' +
    '        CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(name);\n' +
    '        CREATE ',
  duration: 1,
  rows: undefined
}
Query executed {
  text: 'INSERT INTO system_metrics (name, value, unit, timestamp, tags, metadata, environment) VALUES ($1, $',
  duration: 2,
  rows: 3
}
[?25h
